 £
bC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Controllers\AdminController.cs
	namespace		 	
AmazeCareAPI		
 
.		 
Controllers		 "
{

 
[ 
	Authorize 
( 
Roles 
= 
$str &
)& '
]' (
[ 
Route 

(
 
$str 
) 
] 
[ 
ApiController 
] 
public 

class 
AdminController  
:! "
ControllerBase# 1
{ 
private 
readonly 
IAdminService &
_adminService' 4
;4 5
public 
AdminController 
( 
IAdminService ,
adminService- 9
)9 :
{ 	
_adminService 
= 
adminService (
;( )
} 	
[ 	
HttpGet	 
( 
$str  
)  !
]! "
public 
async 
Task 
< 
IActionResult '
>' (%
CheckUsernameAvailability) B
(B C
[C D
	FromQueryD M
]M N
stringO U
usernameV ^
)^ _
{ 	
try 
{ 
var 
( 
isAvailable  
,  !
message" )
)) *
=+ ,
await- 2
_adminService3 @
.@ A*
CheckUsernameAvailabilityAsyncA _
(_ `
username` h
)h i
;i j
return 
Ok 
( 
new 
{ 
Username  (
=) *
username+ 3
,3 4
IsAvailable5 @
=A B
isAvailableC N
,N O
MessageP W
=X Y
messageZ a
}b c
)c d
;d e
} 
catch 
( 
	Exception 
ex 
)  
{   
return!! 

StatusCode!! !
(!!! "
$num!!" %
,!!% &
new!!' *
{!!+ ,
message!!- 4
=!!5 6
$str!!7 p
,!!p q
error!!r w
=!!x y
ex!!z |
.!!| }
Message	!!} Ñ
}
!!Ö Ü
)
!!Ü á
;
!!á à
}"" 
}## 	
['' 	
HttpPost''	 
('' 
$str'' !
)''! "
]''" #
public(( 
async(( 
Task(( 
<(( 
IActionResult(( '
>((' (
RegisterAdmin(() 6
(((6 7
[((7 8
FromBody((8 @
]((@ A 
AdminRegistrationDto((B V
registrationDto((W f
)((f g
{)) 	
try** 
{++ 
var,, 
admin,, 
=,, 
await,, !
_adminService,," /
.,,/ 0
RegisterAdmin,,0 =
(,,= >
registrationDto-- #
.--# $
Username--$ ,
,--, -
registrationDto.. #
...# $
Password..$ ,
,.., -
registrationDto// #
.//# $
FullName//$ ,
,//, -
registrationDto00 #
.00# $
Email00$ )
)11 
;11 
return22 
CreatedAtAction22 &
(22& '
nameof22' -
(22- .
RegisterAdmin22. ;
)22; <
,22< =
new22> A
{22B C
id22D F
=22G H
admin22I N
.22N O
AdminID22O V
}22W X
,22X Y
admin22Z _
)22_ `
;22` a
}33 
catch44 
(44 %
InvalidOperationException44 ,
ex44- /
)44/ 0
{55 
return66 

BadRequest66 !
(66! "
new66" %
{66& '
message66( /
=660 1
ex662 4
.664 5
Message665 <
}66= >
)66> ?
;66? @
}77 
catch88 
(88 
	Exception88 
ex88 
)88  
{99 
return:: 

StatusCode:: !
(::! "
$num::" %
,::% &
new::' *
{::+ ,
message::- 4
=::5 6
$str::7 c
,::c d
error::e j
=::k l
ex::m o
.::o p
Message::p w
}::x y
)::y z
;::z {
};; 
}<< 	
[>> 	
HttpPost>>	 
(>> 
$str>> "
)>>" #
]>># $
public?? 
async?? 
Task?? 
<?? 
IActionResult?? '
>??' (
RegisterDoctor??) 7
(??7 8
[??8 9
FromBody??9 A
]??A B!
DoctorRegistrationDto??C X
	doctorDto??Y b
)??b c
{@@ 	
tryAA 
{BB 
varCC 
doctorCC 
=CC 
awaitCC "
_adminServiceCC# 0
.CC0 1
RegisterDoctorCC1 ?
(CC? @
	doctorDtoCC@ I
)CCI J
;CCJ K
returnDD 
OkDD 
(DD 
newDD 
{DD 
messageDD  '
=DD( )
$strDD* K
,DDK L
doctorDDM S
}DDT U
)DDU V
;DDV W
}EE 
catchFF 
(FF %
InvalidOperationExceptionFF ,
exFF- /
)FF/ 0
{GG 
returnHH 

BadRequestHH !
(HH! "
newHH" %
{HH& '
messageHH( /
=HH0 1
exHH2 4
.HH4 5
MessageHH5 <
}HH= >
)HH> ?
;HH? @
}II 
catchJJ 
(JJ 
	ExceptionJJ 
exJJ 
)JJ  
{KK 
returnLL 

StatusCodeLL !
(LL! "
$numLL" %
,LL% &
newLL' *
{LL+ ,
messageLL- 4
=LL5 6
$strLL7 d
,LLd e
errorLLf k
=LLl m
exLLn p
.LLp q
MessageLLq x
}LLy z
)LLz {
;LL{ |
}MM 
}NN 	
[PP 	
HttpGetPP	 
(PP 
$strPP "
)PP" #
]PP# $
publicQQ 
asyncQQ 
TaskQQ 
<QQ 
IActionResultQQ '
>QQ' (!
GetAllSpecializationsQQ) >
(QQ> ?
)QQ? @
{RR 	
trySS 
{TT 
varUU 
specializationsUU #
=UU$ %
awaitUU& +
_adminServiceUU, 9
.UU9 :&
GetAllSpecializationsAsyncUU: T
(UUT U
)UUU V
;UUV W
ifVV 
(VV 
specializationsVV #
==VV$ &
nullVV' +
||VV, .
!VV/ 0
specializationsVV0 ?
.VV? @
AnyVV@ C
(VVC D
)VVD E
)VVE F
returnWW 
NotFoundWW #
(WW# $
$strWW$ ?
)WW? @
;WW@ A
returnXX 
OkXX 
(XX 
specializationsXX )
)XX) *
;XX* +
}YY 
catchZZ 
(ZZ 
	ExceptionZZ 
exZZ 
)ZZ  
{[[ 
return\\ 

StatusCode\\ !
(\\! "
$num\\" %
,\\% &
new\\' *
{\\+ ,
message\\- 4
=\\5 6
$str\\7 l
,\\l m
error\\n s
=\\t u
ex\\v x
.\\x y
Message	\\y Ä
}
\\Å Ç
)
\\Ç É
;
\\É Ñ
}]] 
}^^ 	
[`` 	
HttpGet``	 
(`` 
$str`` .
)``. /
]``/ 0
publicaa 
asyncaa 
Taskaa 
<aa 
IActionResultaa '
>aa' (
GetDoctorDetailsaa) 9
(aa9 :
intaa: =
doctorIdaa> F
)aaF G
{bb 	
trycc 
{dd 
varee 
doctoree 
=ee 
awaitee "
_adminServiceee# 0
.ee0 1
GetDoctorDetailsee1 A
(eeA B
doctorIdeeB J
)eeJ K
;eeK L
ifff 
(ff 
doctorff 
==ff 
nullff "
)ff" #
returngg 
NotFoundgg #
(gg# $
$"gg$ &
$strgg& 5
{gg5 6
doctorIdgg6 >
}gg> ?
$strgg? J
"ggJ K
)ggK L
;ggL M
returnhh 
Okhh 
(hh 
doctorhh  
)hh  !
;hh! "
}ii 
catchjj 
(jj 
	Exceptionjj 
exjj 
)jj  
{kk 
returnll 

StatusCodell !
(ll! "
$numll" %
,ll% &
newll' *
{ll+ ,
messagell- 4
=ll5 6
$strll7 k
,llk l
errorllm r
=lls t
exllu w
.llw x
Messagellx 
}
llÄ Å
)
llÅ Ç
;
llÇ É
}mm 
}nn 	
[qq 	
HttpPutqq	 
(qq 
$strqq *
)qq* +
]qq+ ,
publicrr 
asyncrr 
Taskrr 
<rr 
IActionResultrr '
>rr' (
UpdateDoctorrr) 5
(rr5 6
intrr6 9
doctorIdrr: B
,rrB C
[rrD E
FromBodyrrE M
]rrM N
DoctorUpdateDtorrO ^
	doctorDtorr_ h
)rrh i
{ss 	
trytt 
{uu 
varvv 
successvv 
=vv 
awaitvv #
_adminServicevv$ 1
.vv1 2
UpdateDoctorDetailsvv2 E
(vvE F
doctorIdvvF N
,vvN O
	doctorDtovvP Y
)vvY Z
;vvZ [
ifww 
(ww 
!ww 
successww 
)ww 
returnxx 
NotFoundxx #
(xx# $
newxx$ '
{xx( )
messagexx* 1
=xx2 3
$strxx4 G
}xxH I
)xxI J
;xxJ K
returnyy 
Okyy 
(yy 
newyy 
{yy 
messageyy  '
=yy( )
$stryy* H
}yyI J
)yyJ K
;yyK L
}zz 
catch{{ 
({{ 
	Exception{{ 
ex{{ 
){{  
{|| 
return}} 

StatusCode}} !
(}}! "
$num}}" %
,}}% &
new}}' *
{}}+ ,
message}}- 4
=}}5 6
$str}}7 a
,}}a b
error}}c h
=}}i j
ex}}k m
.}}m n
Message}}n u
}}}v w
)}}w x
;}}x y
}~~ 
} 	
[
ÅÅ 	

HttpDelete
ÅÅ	 
(
ÅÅ 
$str
ÅÅ 6
)
ÅÅ6 7
]
ÅÅ7 8
public
ÇÇ 
async
ÇÇ 
Task
ÇÇ 
<
ÇÇ 
IActionResult
ÇÇ '
>
ÇÇ' (
DeleteDoctor
ÇÇ) 5
(
ÇÇ5 6
int
ÇÇ6 9
userId
ÇÇ: @
,
ÇÇ@ A
int
ÇÇB E
doctorId
ÇÇF N
)
ÇÇN O
{
ÉÉ 	
try
ÑÑ 
{
ÖÖ 
var
ÜÜ 
result
ÜÜ 
=
ÜÜ 
await
ÜÜ "
_adminService
ÜÜ# 0
.
ÜÜ0 1
DeleteDoctor
ÜÜ1 =
(
ÜÜ= >
userId
ÜÜ> D
,
ÜÜD E
doctorId
ÜÜF N
)
ÜÜN O
;
ÜÜO P
if
áá 
(
áá 
!
áá 
result
áá 
)
áá 
return
àà 
NotFound
àà #
(
àà# $
new
àà$ '
{
àà( )
message
àà* 1
=
àà2 3
$str
àà4 Z
}
àà[ \
)
àà\ ]
;
àà] ^
return
ââ 
Ok
ââ 
(
ââ 
new
ââ 
{
ââ 
message
ââ  '
=
ââ( )
$str
ââ* j
}
ââk l
)
ââl m
;
ââm n
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã 
ex
ãã 
)
ãã  
{
åå 
return
çç 

StatusCode
çç !
(
çç! "
$num
çç" %
,
çç% &
new
çç' *
{
çç+ ,
message
çç- 4
=
çç5 6
$str
çç7 a
,
çça b
error
ççc h
=
ççi j
ex
ççk m
.
ççm n
Message
ççn u
}
ççv w
)
ççw x
;
ççx y
}
éé 
}
èè 	
[
íí 	
HttpGet
íí	 
(
íí 
$str
íí 0
)
íí0 1
]
íí1 2
public
ìì 
async
ìì 
Task
ìì 
<
ìì 
IActionResult
ìì '
>
ìì' (
GetPatientDetails
ìì) :
(
ìì: ;
int
ìì; >
	patientId
ìì? H
)
ììH I
{
îî 	
try
ïï 
{
ññ 
var
óó 
patient
óó 
=
óó 
await
óó #
_adminService
óó$ 1
.
óó1 2
GetPatientDetails
óó2 C
(
óóC D
	patientId
óóD M
)
óóM N
;
óóN O
return
òò 
Ok
òò 
(
òò 
patient
òò !
)
òò! "
;
òò" #
}
ôô 
catch
öö 
(
öö "
KeyNotFoundException
öö '
ex
öö( *
)
öö* +
{
õõ 
return
úú 
NotFound
úú 
(
úú  
ex
úú  "
.
úú" #
Message
úú# *
)
úú* +
;
úú+ ,
}
ùù 
catch
ûû 
(
ûû 
	Exception
ûû 
ex
ûû 
)
ûû  
{
üü 
return
†† 

StatusCode
†† !
(
††! "
$num
††" %
,
††% &
new
††' *
{
††+ ,
message
††- 4
=
††5 6
$str
††7 l
,
††l m
error
††n s
=
††t u
ex
††v x
.
††x y
Message††y Ä
}††Å Ç
)††Ç É
;††É Ñ
}
°° 
}
¢¢ 	
[
££ 	
HttpPost
££	 
(
££ 
$str
££ !
)
££! "
]
££" #
public
§§ 
async
§§ 
Task
§§ 
<
§§ 
IActionResult
§§ '
>
§§' (
UpdatePatient
§§) 6
(
§§6 7
[
§§7 8
FromBody
§§8 @
]
§§@ A

PatientDto
§§B L

patientDto
§§M W
)
§§W X
{
•• 	
try
¶¶ 
{
ßß 
var
®® 
patient
®® 
=
®® 
await
®® #
_adminService
®®$ 1
.
®®1 2
UpdatePatient
®®2 ?
(
®®? @

patientDto
®®@ J
)
®®J K
;
®®K L
return
©© 
Ok
©© 
(
©© 
patient
©© !
)
©©! "
;
©©" #
}
™™ 
catch
´´ 
(
´´ "
KeyNotFoundException
´´ '
ex
´´( *
)
´´* +
{
¨¨ 
return
≠≠ 
NotFound
≠≠ 
(
≠≠  
ex
≠≠  "
.
≠≠" #
Message
≠≠# *
)
≠≠* +
;
≠≠+ ,
}
ÆÆ 
catch
ØØ 
(
ØØ 
	Exception
ØØ 
ex
ØØ 
)
ØØ  
{
∞∞ 
return
±± 

StatusCode
±± !
(
±±! "
$num
±±" %
,
±±% &
new
±±' *
{
±±+ ,
message
±±- 4
=
±±5 6
$str
±±7 b
,
±±b c
error
±±d i
=
±±j k
ex
±±l n
.
±±n o
Message
±±o v
}
±±w x
)
±±x y
;
±±y z
}
≤≤ 
}
≥≥ 	
[
µµ 	

HttpDelete
µµ	 
(
µµ 
$str
µµ 8
)
µµ8 9
]
µµ9 :
public
∂∂ 
async
∂∂ 
Task
∂∂ 
<
∂∂ 
IActionResult
∂∂ '
>
∂∂' (
DeletePatient
∂∂) 6
(
∂∂6 7
int
∂∂7 :
userId
∂∂; A
,
∂∂A B
int
∂∂C F
	patientId
∂∂G P
)
∂∂P Q
{
∑∑ 	
try
∏∏ 
{
ππ 
var
∫∫ 
result
∫∫ 
=
∫∫ 
await
∫∫ "
_adminService
∫∫# 0
.
∫∫0 1
DeletePatient
∫∫1 >
(
∫∫> ?
userId
∫∫? E
,
∫∫E F
	patientId
∫∫G P
)
∫∫P Q
;
∫∫Q R
if
ªª 
(
ªª 
!
ªª 
result
ªª 
)
ªª 
return
ºº 
NotFound
ºº #
(
ºº# $
new
ºº$ '
{
ºº( )
message
ºº* 1
=
ºº2 3
$str
ºº4 [
}
ºº\ ]
)
ºº] ^
;
ºº^ _
return
ΩΩ 
Ok
ΩΩ 
(
ΩΩ 
new
ΩΩ 
{
ΩΩ 
message
ΩΩ  '
=
ΩΩ( )
$str
ΩΩ* k
}
ΩΩl m
)
ΩΩm n
;
ΩΩn o
}
ææ 
catch
øø 
(
øø 
	Exception
øø 
ex
øø 
)
øø  
{
¿¿ 
return
¡¡ 

StatusCode
¡¡ !
(
¡¡! "
$num
¡¡" %
,
¡¡% &
new
¡¡' *
{
¡¡+ ,
message
¡¡- 4
=
¡¡5 6
$str
¡¡7 b
,
¡¡b c
error
¡¡d i
=
¡¡j k
ex
¡¡l n
.
¡¡n o
Message
¡¡o v
}
¡¡w x
)
¡¡x y
;
¡¡y z
}
¬¬ 
}
√√ 	
[
∆∆ 	
HttpGet
∆∆	 
(
∆∆ 
$str
∆∆ 9
)
∆∆9 :
]
∆∆: ;
public
«« 
async
«« 
Task
«« 
<
«« 
IActionResult
«« '
>
««' ($
ViewAppointmentDetails
««) ?
(
««? @
int
««@ C
appointmentId
««D Q
)
««Q R
{
»» 	
try
…… 
{
   
var
ÀÀ 
appointment
ÀÀ 
=
ÀÀ  !
await
ÀÀ" '
_adminService
ÀÀ( 5
.
ÀÀ5 6$
ViewAppointmentDetails
ÀÀ6 L
(
ÀÀL M
appointmentId
ÀÀM Z
)
ÀÀZ [
;
ÀÀ[ \
if
ÃÃ 
(
ÃÃ 
appointment
ÃÃ 
==
ÃÃ  "
null
ÃÃ# '
)
ÃÃ' (
return
ÕÕ 
NotFound
ÕÕ #
(
ÕÕ# $
$str
ÕÕ$ ;
)
ÕÕ; <
;
ÕÕ< =
return
ŒŒ 
Ok
ŒŒ 
(
ŒŒ 
appointment
ŒŒ %
)
ŒŒ% &
;
ŒŒ& '
}
œœ 
catch
–– 
(
–– 
	Exception
–– 
ex
–– 
)
––  
{
—— 
return
““ 

StatusCode
““ !
(
““! "
$num
““" %
,
““% &
new
““' *
{
““+ ,
message
““- 4
=
““5 6
$str
““7 p
,
““p q
error
““r w
=
““x y
ex
““z |
.
““| }
Message““} Ñ
}““Ö Ü
)““Ü á
;““á à
}
”” 
}
‘‘ 	
[
÷÷ 	
HttpPut
÷÷	 
(
÷÷ 
$str
÷÷ >
)
÷÷> ?
]
÷÷? @
public
◊◊ 
async
◊◊ 
Task
◊◊ 
<
◊◊ 
IActionResult
◊◊ '
>
◊◊' (#
RescheduleAppointment
◊◊) >
(
◊◊> ?
int
◊◊? B
appointmentId
◊◊C P
,
◊◊P Q
[
◊◊R S
FromBody
◊◊S [
]
◊◊[ \&
AppointmentRescheduleDto
◊◊] u
rescheduleDto◊◊v É
)◊◊É Ñ
{
ÿÿ 	
try
ŸŸ 
{
⁄⁄ 
var
€€ 
appointment
€€ 
=
€€  !
await
€€" '
_adminService
€€( 5
.
€€5 6#
RescheduleAppointment
€€6 K
(
€€K L
appointmentId
€€L Y
,
€€Y Z
rescheduleDto
€€[ h
)
€€h i
;
€€i j
if
‹‹ 
(
‹‹ 
appointment
‹‹ 
==
‹‹  "
null
‹‹# '
)
‹‹' (
return
›› 
NotFound
›› #
(
››# $
$str
››$ <
)
››< =
;
››= >
return
ﬁﬁ 
Ok
ﬁﬁ 
(
ﬁﬁ 
appointment
ﬁﬁ %
)
ﬁﬁ% &
;
ﬁﬁ& '
}
ﬂﬂ 
catch
‡‡ 
(
‡‡ '
InvalidOperationException
‡‡ ,
ex
‡‡- /
)
‡‡/ 0
{
·· 
return
‚‚ 

BadRequest
‚‚ !
(
‚‚! "
ex
‚‚" $
.
‚‚$ %
Message
‚‚% ,
)
‚‚, -
;
‚‚- .
}
„„ 
catch
‰‰ 
(
‰‰ 
	Exception
‰‰ 
ex
‰‰ 
)
‰‰  
{
ÂÂ 
return
ÊÊ 

StatusCode
ÊÊ !
(
ÊÊ! "
$num
ÊÊ" %
,
ÊÊ% &
new
ÊÊ' *
{
ÊÊ+ ,
message
ÊÊ- 4
=
ÊÊ5 6
$str
ÊÊ7 n
,
ÊÊn o
error
ÊÊp u
=
ÊÊv w
ex
ÊÊx z
.
ÊÊz {
MessageÊÊ{ Ç
}ÊÊÉ Ñ
)ÊÊÑ Ö
;ÊÊÖ Ü
}
ÁÁ 
}
ËË 	
[
ÎÎ 	
HttpGet
ÎÎ	 
(
ÎÎ 
$str
ÎÎ 3
)
ÎÎ3 4
]
ÎÎ4 5
public
ÏÏ 
async
ÏÏ 
Task
ÏÏ 
<
ÏÏ 
IActionResult
ÏÏ '
>
ÏÏ' ((
GetSchedulesWithDoctorName
ÏÏ) C
(
ÏÏC D
int
ÏÏD G
doctorId
ÏÏH P
)
ÏÏP Q
{
ÌÌ 	
try
ÓÓ 
{
ÔÔ 
var
 
	schedules
 
=
 
await
  %
_adminService
& 3
.
3 4-
GetSchedulesWithDoctorNameAsync
4 S
(
S T
doctorId
T \
)
\ ]
;
] ^
return
ÒÒ 
Ok
ÒÒ 
(
ÒÒ 
	schedules
ÒÒ #
)
ÒÒ# $
;
ÒÒ$ %
}
ÚÚ 
catch
ÛÛ 
(
ÛÛ 
	Exception
ÛÛ 
ex
ÛÛ 
)
ÛÛ  
{
ÙÙ 
return
ıı 

StatusCode
ıı !
(
ıı! "
$num
ıı" %
,
ıı% &
$"
ıı' )
$str
ıı) @
{
ıı@ A
ex
ııA C
.
ııC D
Message
ııD K
}
ııK L
"
ııL M
)
ııM N
;
ııN O
}
ˆˆ 
}
˜˜ 	
[
˘˘ 	
HttpPut
˘˘	 
(
˘˘ 
$str
˘˘ 5
)
˘˘5 6
]
˘˘6 7
public
˙˙ 
async
˙˙ 
Task
˙˙ 
<
˙˙ 
IActionResult
˙˙ '
>
˙˙' (
UpdateSchedule
˙˙) 7
(
˙˙7 8
int
˙˙8 ;

scheduleId
˙˙< F
,
˙˙F G
[
˙˙H I
FromBody
˙˙I Q
]
˙˙Q R
UpdateScheduleDto
˙˙S d
	updateDto
˙˙e n
)
˙˙n o
{
˚˚ 	
try
¸¸ 
{
˝˝ 
var
˛˛ 
success
˛˛ 
=
˛˛ 
await
˛˛ #
_adminService
˛˛$ 1
.
˛˛1 2(
UpdateScheduleByAdminAsync
˛˛2 L
(
˛˛L M

scheduleId
˛˛M W
,
˛˛W X
	updateDto
˛˛Y b
)
˛˛b c
;
˛˛c d
if
ˇˇ 
(
ˇˇ 
!
ˇˇ 
success
ˇˇ 
)
ˇˇ 
return
ÄÄ 
NotFound
ÄÄ #
(
ÄÄ# $
$str
ÄÄ$ 9
)
ÄÄ9 :
;
ÄÄ: ;
return
ÇÇ 
Ok
ÇÇ 
(
ÇÇ 
$str
ÇÇ :
)
ÇÇ: ;
;
ÇÇ; <
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
	Exception
ÑÑ 
ex
ÑÑ 
)
ÑÑ  
{
ÖÖ 
return
ÜÜ 

StatusCode
ÜÜ !
(
ÜÜ! "
$num
ÜÜ" %
,
ÜÜ% &
$"
ÜÜ' )
$str
ÜÜ) @
{
ÜÜ@ A
ex
ÜÜA C
.
ÜÜC D
Message
ÜÜD K
}
ÜÜK L
"
ÜÜL M
)
ÜÜM N
;
ÜÜN O
}
áá 
}
àà 	
[
ää 	
HttpPut
ää	 
(
ää 
$str
ää 5
)
ää5 6
]
ää6 7
public
ãã 
async
ãã 
Task
ãã 
<
ãã 
IActionResult
ãã '
>
ãã' (
CancelSchedule
ãã) 7
(
ãã7 8
int
ãã8 ;

scheduleId
ãã< F
)
ããF G
{
åå 	
try
çç 
{
éé 
var
èè 
success
èè 
=
èè 
await
èè #
_adminService
èè$ 1
.
èè1 2(
CancelScheduleByAdminAsync
èè2 L
(
èèL M

scheduleId
èèM W
)
èèW X
;
èèX Y
if
êê 
(
êê 
!
êê 
success
êê 
)
êê 
return
ëë 
NotFound
ëë #
(
ëë# $
$str
ëë$ N
)
ëëN O
;
ëëO P
return
ìì 
Ok
ìì 
(
ìì 
$str
ìì ;
)
ìì; <
;
ìì< =
}
îî 
catch
ïï 
(
ïï 
	Exception
ïï 
ex
ïï 
)
ïï  
{
ññ 
return
óó 

StatusCode
óó !
(
óó! "
$num
óó" %
,
óó% &
$"
óó' )
$str
óó) @
{
óó@ A
ex
óóA C
.
óóC D
Message
óóD K
}
óóK L
"
óóL M
)
óóM N
;
óóN O
}
òò 
}
ôô 	
[
õõ 	
HttpPut
õõ	 
(
õõ 
$str
õõ 8
)
õõ8 9
]
õõ9 :
public
úú 
async
úú 
Task
úú 
<
úú 
IActionResult
úú '
>
úú' (%
MarkScheduleAsCompleted
úú) @
(
úú@ A
int
úúA D

scheduleId
úúE O
)
úúO P
{
ùù 	
try
ûû 
{
üü 
var
†† 
success
†† 
=
†† 
await
†† #
_adminService
††$ 1
.
††1 2*
MarkScheduleAsCompletedAsync
††2 N
(
††N O

scheduleId
††O Y
)
††Y Z
;
††Z [
if
°° 
(
°° 
!
°° 
success
°° 
)
°° 
return
¢¢ 
NotFound
¢¢ #
(
¢¢# $
$str
¢¢$ T
)
¢¢T U
;
¢¢U V
return
§§ 
Ok
§§ 
(
§§ 
$str
§§ F
)
§§F G
;
§§G H
}
•• 
catch
¶¶ 
(
¶¶ 
	Exception
¶¶ 
ex
¶¶ 
)
¶¶  
{
ßß 
return
®® 

StatusCode
®® !
(
®®! "
$num
®®" %
,
®®% &
$"
®®' )
$str
®®) @
{
®®@ A
ex
®®A C
.
®®C D
Message
®®D K
}
®®K L
"
®®L M
)
®®M N
;
®®N O
}
©© 
}
™™ 	
[
¨¨ 	
HttpGet
¨¨	 
(
¨¨ 
$str
¨¨  
)
¨¨  !
]
¨¨! "
public
≠≠ 
async
≠≠ 
Task
≠≠ 
<
≠≠ 
IActionResult
≠≠ '
>
≠≠' (
GetBillingDetails
≠≠) :
(
≠≠: ;
)
≠≠; <
{
ÆÆ 	
try
ØØ 
{
∞∞ 
var
±± 
billingDetails
±± "
=
±±# $
await
±±% *
_adminService
±±+ 8
.
±±8 9-
GetBillingDetailsWithNamesAsync
±±9 X
(
±±X Y
)
±±Y Z
;
±±Z [
return
≤≤ 
Ok
≤≤ 
(
≤≤ 
billingDetails
≤≤ (
)
≤≤( )
;
≤≤) *
}
≥≥ 
catch
¥¥ 
(
¥¥ 
	Exception
¥¥ 
ex
¥¥ 
)
¥¥  
{
µµ 
return
∂∂ 

StatusCode
∂∂ !
(
∂∂! "
$num
∂∂" %
,
∂∂% &
$"
∂∂' )
$str
∂∂) @
{
∂∂@ A
ex
∂∂A C
.
∂∂C D
Message
∂∂D K
}
∂∂K L
"
∂∂L M
)
∂∂M N
;
∂∂N O
}
∑∑ 
}
∏∏ 	
[
∫∫ 	
HttpPut
∫∫	 
(
∫∫ 
$str
∫∫ *
)
∫∫* +
]
∫∫+ ,
public
ªª 
async
ªª 
Task
ªª 
<
ªª 
IActionResult
ªª '
>
ªª' (
MarkBillAsPaid
ªª) 7
(
ªª7 8
int
ªª8 ;
	billingId
ªª< E
)
ªªE F
{
ºº 	
try
ΩΩ 
{
ææ 
var
øø 
success
øø 
=
øø 
await
øø #
_adminService
øø$ 1
.
øø1 2!
MarkBillAsPaidAsync
øø2 E
(
øøE F
	billingId
øøF O
)
øøO P
;
øøP Q
if
¿¿ 
(
¿¿ 
!
¿¿ 
success
¿¿ 
)
¿¿ 
return
¡¡ 
NotFound
¡¡ #
(
¡¡# $
$str
¡¡$ Y
)
¡¡Y Z
;
¡¡Z [
return
√√ 
Ok
√√ 
(
√√ 
$str
√√ =
)
√√= >
;
√√> ?
}
ƒƒ 
catch
≈≈ 
(
≈≈ 
	Exception
≈≈ 
ex
≈≈ 
)
≈≈  
{
∆∆ 
return
«« 

StatusCode
«« !
(
««! "
$num
««" %
,
««% &
$"
««' )
$str
««) @
{
««@ A
ex
««A C
.
««C D
Message
««D K
}
««K L
"
««L M
)
««M N
;
««N O
}
»» 
}
…… 	
[
ÀÀ 	
HttpGet
ÀÀ	 
(
ÀÀ 
$str
ÀÀ $
)
ÀÀ$ %
]
ÀÀ% &
public
ÃÃ 
async
ÃÃ 
Task
ÃÃ 
<
ÃÃ 
IActionResult
ÃÃ '
>
ÃÃ' (
GetAllMedications
ÃÃ) :
(
ÃÃ: ;
)
ÃÃ; <
{
ÕÕ 	
try
ŒŒ 
{
œœ 
var
–– 
medications
–– 
=
––  !
await
––" '
_adminService
––( 5
.
––5 6$
GetAllMedicationsAsync
––6 L
(
––L M
)
––M N
;
––N O
return
—— 
Ok
—— 
(
—— 
medications
—— %
)
——% &
;
——& '
}
““ 
catch
”” 
(
”” 
	Exception
”” 
ex
”” 
)
””  
{
‘‘ 
return
’’ 

StatusCode
’’ !
(
’’! "
$num
’’" %
,
’’% &
$"
’’' )
$str
’’) @
{
’’@ A
ex
’’A C
.
’’C D
Message
’’D K
}
’’K L
"
’’L M
)
’’M N
;
’’N O
}
÷÷ 
}
◊◊ 	
[
ÿÿ 	
HttpPost
ÿÿ	 
(
ÿÿ 
$str
ÿÿ "
)
ÿÿ" #
]
ÿÿ# $
public
ŸŸ 
async
ŸŸ 
Task
ŸŸ 
<
ŸŸ 
IActionResult
ŸŸ '
>
ŸŸ' (
AddMedication
ŸŸ) 6
(
ŸŸ6 7
[
ŸŸ7 8
FromBody
ŸŸ8 @
]
ŸŸ@ A'
CreateUpdateMedicationDto
ŸŸB [!
createMedicationDto
ŸŸ\ o
)
ŸŸo p
{
⁄⁄ 	
try
€€ 
{
‹‹ 
await
›› 
_adminService
›› #
.
››# $ 
AddMedicationAsync
››$ 6
(
››6 7!
createMedicationDto
››7 J
)
››J K
;
››K L
return
ﬁﬁ 
Ok
ﬁﬁ 
(
ﬁﬁ 
$str
ﬁﬁ :
)
ﬁﬁ: ;
;
ﬁﬁ; <
}
ﬂﬂ 
catch
‡‡ 
(
‡‡ 
	Exception
‡‡ 
ex
‡‡ 
)
‡‡  
{
·· 
return
‚‚ 

StatusCode
‚‚ !
(
‚‚! "
$num
‚‚" %
,
‚‚% &
$"
‚‚' )
$str
‚‚) @
{
‚‚@ A
ex
‚‚A C
.
‚‚C D
Message
‚‚D K
}
‚‚K L
"
‚‚L M
)
‚‚M N
;
‚‚N O
}
„„ 
}
‰‰ 	
[
ÊÊ 	
HttpPut
ÊÊ	 
(
ÊÊ 
$str
ÊÊ 3
)
ÊÊ3 4
]
ÊÊ4 5
public
ÁÁ 
async
ÁÁ 
Task
ÁÁ 
<
ÁÁ 
IActionResult
ÁÁ '
>
ÁÁ' (
UpdateMedication
ÁÁ) 9
(
ÁÁ9 :
int
ÁÁ: =
medicationId
ÁÁ> J
,
ÁÁJ K
[
ÁÁL M
FromBody
ÁÁM U
]
ÁÁU V'
CreateUpdateMedicationDto
ÁÁW p"
updateMedicationDtoÁÁq Ñ
)ÁÁÑ Ö
{
ËË 	
try
ÈÈ 
{
ÍÍ 
var
ÎÎ 
success
ÎÎ 
=
ÎÎ 
await
ÎÎ #
_adminService
ÎÎ$ 1
.
ÎÎ1 2#
UpdateMedicationAsync
ÎÎ2 G
(
ÎÎG H
medicationId
ÎÎH T
,
ÎÎT U!
updateMedicationDto
ÎÎV i
)
ÎÎi j
;
ÎÎj k
if
ÏÏ 
(
ÏÏ 
!
ÏÏ 
success
ÏÏ 
)
ÏÏ 
return
ÌÌ 
NotFound
ÌÌ #
(
ÌÌ# $
$str
ÌÌ$ ;
)
ÌÌ; <
;
ÌÌ< =
return
ÔÔ 
Ok
ÔÔ 
(
ÔÔ 
$str
ÔÔ <
)
ÔÔ< =
;
ÔÔ= >
}
 
catch
ÒÒ 
(
ÒÒ 
	Exception
ÒÒ 
ex
ÒÒ 
)
ÒÒ  
{
ÚÚ 
return
ÛÛ 

StatusCode
ÛÛ !
(
ÛÛ! "
$num
ÛÛ" %
,
ÛÛ% &
$"
ÛÛ' )
$str
ÛÛ) @
{
ÛÛ@ A
ex
ÛÛA C
.
ÛÛC D
Message
ÛÛD K
}
ÛÛK L
"
ÛÛL M
)
ÛÛM N
;
ÛÛN O
}
ÙÙ 
}
ıı 	
[
˜˜ 	
HttpGet
˜˜	 
(
˜˜ 
$str
˜˜ 
)
˜˜ 
]
˜˜  
public
¯¯ 
async
¯¯ 
Task
¯¯ 
<
¯¯ 
IActionResult
¯¯ '
>
¯¯' (
GetAllTests
¯¯) 4
(
¯¯4 5
)
¯¯5 6
{
˘˘ 	
try
˙˙ 
{
˚˚ 
var
¸¸ 
tests
¸¸ 
=
¸¸ 
await
¸¸ !
_adminService
¸¸" /
.
¸¸/ 0
GetAllTestsAsync
¸¸0 @
(
¸¸@ A
)
¸¸A B
;
¸¸B C
return
˝˝ 
Ok
˝˝ 
(
˝˝ 
tests
˝˝ 
)
˝˝  
;
˝˝  !
}
˛˛ 
catch
ˇˇ 
(
ˇˇ 
	Exception
ˇˇ 
ex
ˇˇ 
)
ˇˇ  
{
ÄÄ 
return
ÅÅ 

StatusCode
ÅÅ !
(
ÅÅ! "
$num
ÅÅ" %
,
ÅÅ% &
$"
ÅÅ' )
$str
ÅÅ) @
{
ÅÅ@ A
ex
ÅÅA C
.
ÅÅC D
Message
ÅÅD K
}
ÅÅK L
"
ÅÅL M
)
ÅÅM N
;
ÅÅN O
}
ÇÇ 
}
ÉÉ 	
[
ÖÖ 	
HttpPost
ÖÖ	 
(
ÖÖ 
$str
ÖÖ 
)
ÖÖ 
]
ÖÖ 
public
ÜÜ 
async
ÜÜ 
Task
ÜÜ 
<
ÜÜ 
IActionResult
ÜÜ '
>
ÜÜ' (
AddTest
ÜÜ) 0
(
ÜÜ0 1
[
ÜÜ1 2
FromBody
ÜÜ2 :
]
ÜÜ: ;!
CreateUpdateTestDto
ÜÜ< O
createTestDto
ÜÜP ]
)
ÜÜ] ^
{
áá 	
try
àà 
{
ââ 
await
ää 
_adminService
ää #
.
ää# $
AddTestAsync
ää$ 0
(
ää0 1
createTestDto
ää1 >
)
ää> ?
;
ää? @
return
ãã 
Ok
ãã 
(
ãã 
$str
ãã 4
)
ãã4 5
;
ãã5 6
}
åå 
catch
çç 
(
çç 
	Exception
çç 
ex
çç 
)
çç  
{
éé 
return
èè 

StatusCode
èè !
(
èè! "
$num
èè" %
,
èè% &
$"
èè' )
$str
èè) @
{
èè@ A
ex
èèA C
.
èèC D
Message
èèD K
}
èèK L
"
èèL M
)
èèM N
;
èèN O
}
êê 
}
ëë 	
[
íí 	
HttpPut
íí	 
(
íí 
$str
íí '
)
íí' (
]
íí( )
public
ìì 
async
ìì 
Task
ìì 
<
ìì 
IActionResult
ìì '
>
ìì' (

UpdateTest
ìì) 3
(
ìì3 4
int
ìì4 7
testId
ìì8 >
,
ìì> ?
[
ìì@ A
FromBody
ììA I
]
ììI J!
CreateUpdateTestDto
ììK ^
updateTestDto
ìì_ l
)
ììl m
{
îî 	
try
ïï 
{
ññ 
var
óó 
success
óó 
=
óó 
await
óó #
_adminService
óó$ 1
.
óó1 2
UpdateTestAsync
óó2 A
(
óóA B
testId
óóB H
,
óóH I
updateTestDto
óóJ W
)
óóW X
;
óóX Y
if
òò 
(
òò 
!
òò 
success
òò 
)
òò 
return
ôô 
NotFound
ôô #
(
ôô# $
$str
ôô$ 5
)
ôô5 6
;
ôô6 7
return
õõ 
Ok
õõ 
(
õõ 
$str
õõ 6
)
õõ6 7
;
õõ7 8
}
úú 
catch
ùù 
(
ùù 
	Exception
ùù 
ex
ùù 
)
ùù  
{
ûû 
return
üü 

StatusCode
üü !
(
üü! "
$num
üü" %
,
üü% &
$"
üü' )
$str
üü) @
{
üü@ A
ex
üüA C
.
üüC D
Message
üüD K
}
üüK L
"
üüL M
)
üüM N
;
üüN O
}
†† 
}
°° 	
}
™™ 
}´´ ◊)
aC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Controllers\AuthController.cs
	namespace

 	
AmazeCareAPI


 
.

 
Controllers

 "
{ 
[ 
ApiController 
] 
[ 
Route 

(
 
$str 
) 
] 
public 

class 
AuthController 
:  !
ControllerBase" 0
{ 
private 
readonly !
AuthenticationService ."
_authenticationService/ E
;E F
private 
readonly 
ILogger  
<  !
AuthController! /
>/ 0
_logger1 8
;8 9
public 
AuthController 
( !
AuthenticationService 3!
authenticationService4 I
,I J
ILoggerK R
<R S
AuthControllerS a
>a b
loggerc i
)i j
{ 	"
_authenticationService "
=# $!
authenticationService% :
;: ;
_logger 
= 
logger 
; 
} 	
[ 	
HttpPost	 
( 
$str 
) 
] 
public 
async 
Task 
< 
IActionResult '
>' (
Login) .
(. /
[/ 0
FromBody0 8
]8 9
LoginRequest: F
requestG N
)N O
{ 	
if 
( 
request 
== 
null 
||  "
string# )
.) *
IsNullOrEmpty* 7
(7 8
request8 ?
.? @
Username@ H
)H I
||J L
stringM S
.S T
IsNullOrEmptyT a
(a b
requestb i
.i j
Passwordj r
)r s
)s t
{ 
_logger 
. 

LogWarning "
(" #
$str# Y
)Y Z
;Z [
return 

BadRequest !
(! "
$str" ;
); <
;< =
}   
try"" 
{## 
var%% 
token%% 
=%% 
await%% !"
_authenticationService%%" 8
.%%8 9
AuthenticateUser%%9 I
(%%I J
request%%J Q
.%%Q R
Username%%R Z
,%%Z [
request%%\ c
.%%c d
Password%%d l
)%%l m
;%%m n
if'' 
('' 
string'' 
.'' 
IsNullOrEmpty'' (
(''( )
token'') .
)''. /
)''/ 0
{(( 
_logger)) 
.)) 

LogWarning)) &
())& '
$"))' )
$str))) N
{))N O
request))O V
.))V W
Username))W _
}))_ `
"))` a
)))a b
;))b c
return** 
Unauthorized** '
(**' (
$str**( G
)**G H
;**H I
}++ 
var.. 
tokenHandler..  
=..! "
new..# &#
JwtSecurityTokenHandler..' >
(..> ?
)..? @
;..@ A
var// 
jwtToken// 
=// 
tokenHandler// +
.//+ ,
	ReadToken//, 5
(//5 6
token//6 ;
)//; <
as//= ?
JwtSecurityToken//@ P
;//P Q
var00 

expiration00 
=00  
jwtToken00! )
?00) *
.00* +
ValidTo00+ 2
;002 3
return22 
Ok22 
(22 
new22 
{33 
Token44 
=44 
token44 !
,44! "

Expiration55 
=55  

expiration55! +
}66 
)66 
;66 
}77 
catch88 
(88 #
AuthenticationException88 *
ex88+ -
)88- .
{99 
_logger:: 
.:: 

LogWarning:: "
(::" #
ex::# %
.::% &
Message::& -
)::- .
;::. /
return;; 
Unauthorized;; #
(;;# $
ex;;$ &
.;;& '
Message;;' .
);;. /
;;;/ 0
}<< 
catch== 
(== 
ServiceException== #
ex==$ &
)==& '
{>> 
_logger?? 
.?? 
LogError??  
(??  !
ex??! #
,??# $
$str??% B
)??B C
;??C D
return@@ 

StatusCode@@ !
(@@! "
$num@@" %
,@@% &
ex@@' )
.@@) *
Message@@* 1
)@@1 2
;@@2 3
}AA 
catchBB 
(BB 
	ExceptionBB 
exBB 
)BB  
{CC 
_loggerDD 
.DD 
LogErrorDD  
(DD  !
exDD! #
,DD# $
$strDD% E
)DDE F
;DDF G
returnEE 

StatusCodeEE !
(EE! "
$numEE" %
,EE% &
$strEE' F
)EEF G
;EEG H
}FF 
}GG 	
}II 
}JJ âö
cC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Controllers\DoctorController.cs
	namespace 	
AmazeCareAPI
 
. 
Controllers "
{ 
[ 
	Authorize 
( 
Roles 
= 
$str 
)  
]  !
[ 
Route 

(
 
$str 
) 
] 
[ 
ApiController 
] 
public 

class 
DoctorController !
:" #
ControllerBase$ 2
{ 
private 
readonly 
IDoctorService '
_doctorService( 6
;6 7
public 
DoctorController 
(  
IDoctorService  .
doctorService/ <
)< =
{ 	
_doctorService 
= 
doctorService *
;* +
} 	
[ 	
HttpGet	 
( 
$str *
)* +
]+ ,
public 
async 
Task 
< 
IActionResult '
>' (#
GetAppointmentsByStatus) @
(@ A
[A B
	FromQueryB K
]K L
stringM S
statusT Z
)Z [
{   	
try!! 
{"" 
var## 
doctorId## 
=## 
await## $%
GetDoctorIdFromTokenAsync##% >
(##> ?
)##? @
;##@ A
if$$ 
($$ 
string$$ 
.$$ 
IsNullOrWhiteSpace$$ -
($$- .
status$$. 4
)$$4 5
||$$6 8
!$$9 :
new$$: =
[$$= >
]$$> ?
{$$@ A
$str$$B M
,$$M N
$str$$O Z
,$$Z [
$str$$\ f
,$$f g
$str$$h s
}$$t u
.$$u v
Contains$$v ~
($$~ 
status	$$ Ö
)
$$Ö Ü
)
$$Ü á
return%% 

BadRequest%% %
(%%% &
$str%%& ~
)%%~ 
;	%% Ä
var'' 
appointments''  
=''! "
await''# (
_doctorService'') 7
.''7 8#
GetAppointmentsByStatus''8 O
(''O P
doctorId''P X
.''X Y
Value''Y ^
,''^ _
status''` f
)''f g
;''g h
if(( 
((( 
appointments((  
==((! #
null(($ (
||(() +
!((, -
appointments((- 9
.((9 :
Any((: =
(((= >
)((> ?
)((? @
return)) 
NotFound)) #
())# $
$str))$ V
)))V W
;))W X
return++ 
Ok++ 
(++ 
appointments++ &
)++& '
;++' (
},, 
catch-- 
(-- '
UnauthorizedAccessException-- .
ex--/ 1
)--1 2
{.. 
return// 
Unauthorized// #
(//# $
ex//$ &
.//& '
Message//' .
)//. /
;/// 0
}00 
catch11 
(11 
NotFoundException11 $
ex11% '
)11' (
{22 
return33 
NotFound33 
(33  
ex33  "
.33" #
Message33# *
)33* +
;33+ ,
}44 
catch55 
(55 
ValidationException55 &
ex55' )
)55) *
{66 
return77 

BadRequest77 !
(77! "
ex77" $
.77$ %
Message77% ,
)77, -
;77- .
}88 
catch99 
(99 
	Exception99 
ex99 
)99  
{:: 
return<< 

StatusCode<< !
(<<! "
$num<<" %
,<<% &
$str<<' F
)<<F G
;<<G H
}== 
}>> 	
[?? 	
HttpPut??	 
(?? 
$str?? =
)??= >
]??> ?
public@@ 
async@@ 
Task@@ 
<@@ 
IActionResult@@ '
>@@' (%
ApproveAppointmentRequest@@) B
(@@B C
int@@C F
appointmentId@@G T
)@@T U
{AA 	
tryBB 
{CC 
varDD 
doctorIdDD 
=DD 
awaitDD $%
GetDoctorIdFromTokenAsyncDD% >
(DD> ?
)DD? @
;DD@ A
varEE 
successEE 
=EE 
awaitEE #
_doctorServiceEE$ 2
.EE2 3%
ApproveAppointmentRequestEE3 L
(EEL M
doctorIdEEM U
.EEU V
ValueEEV [
,EE[ \
appointmentIdEE] j
)EEj k
;EEk l
ifFF 
(FF 
!FF 
successFF 
)FF 
returnGG 
NotFoundGG #
(GG# $
$strGG$ ^
)GG^ _
;GG_ `
returnII 
OkII 
(II 
$strII >
)II> ?
;II? @
}JJ 
catchKK 
(KK '
UnauthorizedAccessExceptionKK .
exKK/ 1
)KK1 2
{LL 
returnMM 
UnauthorizedMM #
(MM# $
exMM$ &
.MM& '
MessageMM' .
)MM. /
;MM/ 0
}NN 
catchOO 
(OO 
NotFoundExceptionOO $
exOO% '
)OO' (
{PP 
returnQQ 
NotFoundQQ 
(QQ  
exQQ  "
.QQ" #
MessageQQ# *
)QQ* +
;QQ+ ,
}RR 
catchSS 
(SS 
ValidationExceptionSS &
exSS' )
)SS) *
{TT 
returnUU 

BadRequestUU !
(UU! "
exUU" $
.UU$ %
MessageUU% ,
)UU, -
;UU- .
}VV 
catchWW 
(WW 
	ExceptionWW 
exWW 
)WW  
{XX 
returnYY 

StatusCodeYY !
(YY! "
$numYY" %
,YY% &
$strYY' F
)YYF G
;YYG H
}ZZ 
}[[ 	
[__ 	
HttpPut__	 
(__ 
$str__ ;
)__; <
]__< =
public`` 
async`` 
Task`` 
<`` 
IActionResult`` '
>``' (&
CancelScheduledAppointment``) C
(``C D
int``D G
appointmentId``H U
)``U V
{aa 	
trybb 
{cc 
vardd 
doctorIddd 
=dd 
awaitdd $%
GetDoctorIdFromTokenAsyncdd% >
(dd> ?
)dd? @
;dd@ A
varee 
successee 
=ee 
awaitee #
_doctorServiceee$ 2
.ee2 3&
CancelScheduledAppointmentee3 M
(eeM N
doctorIdeeN V
.eeV W
ValueeeW \
,ee\ ]
appointmentIdee^ k
)eek l
;eel m
ifff 
(ff 
!ff 
successff 
)ff 
returngg 
NotFoundgg #
(gg# $
$strgg$ S
)ggS T
;ggT U
returnii 
Okii 
(ii 
$strii >
)ii> ?
;ii? @
}jj 
catchkk 
(kk '
UnauthorizedAccessExceptionkk .
exkk/ 1
)kk1 2
{ll 
returnmm 
Unauthorizedmm #
(mm# $
exmm$ &
.mm& '
Messagemm' .
)mm. /
;mm/ 0
}nn 
catchoo 
(oo 
NotFoundExceptionoo $
exoo% '
)oo' (
{pp 
returnqq 
NotFoundqq 
(qq  
exqq  "
.qq" #
Messageqq# *
)qq* +
;qq+ ,
}rr 
catchss 
(ss 
ValidationExceptionss &
exss' )
)ss) *
{tt 
returnuu 

BadRequestuu !
(uu! "
exuu" $
.uu$ %
Messageuu% ,
)uu, -
;uu- .
}vv 
catchww 
(ww 
	Exceptionww 
exww 
)ww  
{xx 
returnyy 

StatusCodeyy !
(yy! "
$numyy" %
,yy% &
$stryy' F
)yyF G
;yyG H
}zz 
}{{ 	
[~~ 	
HttpPut~~	 
(~~ 
$str~~ 8
)~~8 9
]~~9 :
public 
async 
Task 
< 
IActionResult '
>' (!
RescheduleAppointment) >
(> ?
int? B
appointmentIdC P
,P Q
[R S
FromBodyS [
][ \$
AppointmentRescheduleDto] u
rescheduleDto	v É
)
É Ñ
{
ÄÄ 	
try
ÅÅ 
{
ÇÇ 
var
ÉÉ 
doctorId
ÉÉ 
=
ÉÉ 
await
ÉÉ $'
GetDoctorIdFromTokenAsync
ÉÉ% >
(
ÉÉ> ?
)
ÉÉ? @
;
ÉÉ@ A
if
ÑÑ 
(
ÑÑ 
doctorId
ÑÑ 
==
ÑÑ 
null
ÑÑ  $
)
ÑÑ$ %
return
ÖÖ 
Unauthorized
ÖÖ '
(
ÖÖ' (
$str
ÖÖ( Y
)
ÖÖY Z
;
ÖÖZ [
var
áá 
(
áá 
success
áá 
,
áá 
message
áá %
)
áá% &
=
áá' (
await
áá) .
_doctorService
áá/ =
.
áá= >(
RescheduleAppointmentAsync
áá> X
(
ááX Y
doctorId
ááY a
.
ááa b
Value
ááb g
,
áág h
appointmentId
áái v
,
ááv w
rescheduleDtoááx Ö
)ááÖ Ü
;ááÜ á
if
ââ 
(
ââ 
!
ââ 
success
ââ 
)
ââ 
return
ää 

BadRequest
ää %
(
ää% &
message
ää& -
)
ää- .
;
ää. /
return
åå 
Ok
åå 
(
åå 
$str
åå A
)
ååA B
;
ååB C
}
çç 
catch
éé 
(
éé 
	Exception
éé 
ex
éé 
)
éé  
{
èè 
return
êê 

StatusCode
êê !
(
êê! "
$num
êê" %
,
êê% &
$"
êê' )
$str
êê) <
{
êê< =
ex
êê= ?
.
êê? @
Message
êê@ G
}
êêG H
"
êêH I
)
êêI J
;
êêJ K
}
ëë 
}
íí 	
[
îî 	
HttpPost
îî	 
(
îî 
$str
îî 8
)
îî8 9
]
îî9 :
public
ïï 
async
ïï 
Task
ïï 
<
ïï 
IActionResult
ïï '
>
ïï' (!
ConductConsultation
ïï) <
(
ïï< =
int
ïï= @
appointmentId
ïïA N
,
ïïN O
[
ïïP Q
FromBody
ïïQ Y
]
ïïY Z$
CreateMedicalRecordDto
ïï[ q
	recordDto
ïïr {
,
ïï{ |
[
ïï} ~
	FromQueryïï~ á
]ïïá à
decimalïïâ ê
consultationFeeïïë †
)ïï† °
{
ññ 	
try
óó 
{
òò 
var
ôô 
doctorId
ôô 
=
ôô 
await
ôô $'
GetDoctorIdFromTokenAsync
ôô% >
(
ôô> ?
)
ôô? @
;
ôô@ A
if
öö 
(
öö 
doctorId
öö 
==
öö 
null
öö  $
)
öö$ %
return
õõ 
Unauthorized
õõ '
(
õõ' (
$str
õõ( Y
)
õõY Z
;
õõZ [
var
ùù 
success
ùù 
=
ùù 
await
ùù #
_doctorService
ùù$ 2
.
ùù2 3!
ConductConsultation
ùù3 F
(
ùùF G
doctorId
ùùG O
.
ùùO P
Value
ùùP U
,
ùùU V
appointmentId
ùùW d
,
ùùd e
	recordDto
ùùf o
,
ùùo p
consultationFeeùùq Ä
)ùùÄ Å
;ùùÅ Ç
if
üü 
(
üü 
!
üü 
success
üü 
)
üü 
return
†† 

BadRequest
†† %
(
††% &
$str
††& G
)
††G H
;
††H I
return
¢¢ 
Ok
¢¢ 
(
¢¢ 
$str
¢¢ @
)
¢¢@ A
;
¢¢A B
}
££ 
catch
§§ 
(
§§ 
	Exception
§§ 
ex
§§ 
)
§§  
{
•• 
return
¶¶ 

StatusCode
¶¶ !
(
¶¶! "
$num
¶¶" %
,
¶¶% &
$"
¶¶' )
$str
¶¶) <
{
¶¶< =
ex
¶¶= ?
.
¶¶? @
Message
¶¶@ G
}
¶¶G H
"
¶¶H I
)
¶¶I J
;
¶¶J K
}
ßß 
}
®® 	
[
´´ 	
HttpGet
´´	 
(
´´ 
$str
´´ G
)
´´G H
]
´´H I
public
¨¨ 
async
¨¨ 
Task
¨¨ 
<
¨¨ 
IActionResult
¨¨ '
>
¨¨' (&
GetPatientMedicalRecords
¨¨) A
(
¨¨A B
int
¨¨B E
	patientId
¨¨F O
)
¨¨O P
{
≠≠ 	
try
ÆÆ 
{
ØØ 
var
∞∞ 
doctorId
∞∞ 
=
∞∞ 
await
∞∞ $'
GetDoctorIdFromTokenAsync
∞∞% >
(
∞∞> ?
)
∞∞? @
;
∞∞@ A
if
±± 
(
±± 
doctorId
±± 
==
±± 
null
±±  $
)
±±$ %
return
≤≤ 
Unauthorized
≤≤ '
(
≤≤' (
$str
≤≤( Y
)
≤≤Y Z
;
≤≤Z [
var
¥¥ 
records
¥¥ 
=
¥¥ 
await
¥¥ #
_doctorService
¥¥$ 2
.
¥¥2 3/
!GetMedicalRecordsByPatientIdAsync
¥¥3 T
(
¥¥T U
	patientId
¥¥U ^
)
¥¥^ _
;
¥¥_ `
return
µµ 
Ok
µµ 
(
µµ 
records
µµ !
)
µµ! "
;
µµ" #
}
∂∂ 
catch
∑∑ 
(
∑∑ 
	Exception
∑∑ 
ex
∑∑ 
)
∑∑  
{
∏∏ 
return
ππ 

StatusCode
ππ !
(
ππ! "
$num
ππ" %
,
ππ% &
$"
ππ' )
$str
ππ) <
{
ππ< =
ex
ππ= ?
.
ππ? @
Message
ππ@ G
}
ππG H
"
ππH I
)
ππI J
;
ππJ K
}
∫∫ 
}
ªª 	
[
øø 	
HttpPut
øø	 
(
øø 
$str
øø =
)
øø= >
]
øø> ?
public
¿¿ 
async
¿¿ 
Task
¿¿ 
<
¿¿ 
IActionResult
¿¿ '
>
¿¿' (!
UpdateMedicalRecord
¿¿) <
(
¿¿< =
int
¿¿= @
recordId
¿¿A I
,
¿¿I J
int
¿¿K N
	patientId
¿¿O X
,
¿¿X Y
[
¿¿Z [
FromBody
¿¿[ c
]
¿¿c d$
UpdateMedicalRecordDto
¿¿e {
	recordDto¿¿| Ö
)¿¿Ö Ü
{
¡¡ 	
try
¬¬ 
{
√√ 
var
ƒƒ 
doctorId
ƒƒ 
=
ƒƒ 
await
ƒƒ $'
GetDoctorIdFromTokenAsync
ƒƒ% >
(
ƒƒ> ?
)
ƒƒ? @
;
ƒƒ@ A
if
≈≈ 
(
≈≈ 
doctorId
≈≈ 
==
≈≈ 
null
≈≈  $
)
≈≈$ %
return
∆∆ 
Unauthorized
∆∆ '
(
∆∆' (
$str
∆∆( Y
)
∆∆Y Z
;
∆∆Z [
var
»» 
success
»» 
=
»» 
await
»» #
_doctorService
»»$ 2
.
»»2 3!
UpdateMedicalRecord
»»3 F
(
»»F G
doctorId
»»G O
.
»»O P
Value
»»P U
,
»»U V
recordId
»»W _
,
»»_ `
	patientId
»»a j
,
»»j k
	recordDto
»»l u
)
»»u v
;
»»v w
if
…… 
(
…… 
!
…… 
success
…… 
)
…… 
return
   
NotFound
   #
(
  # $
$str
  $ V
)
  V W
;
  W X
return
ÃÃ 
Ok
ÃÃ 
(
ÃÃ 
$str
ÃÃ @
)
ÃÃ@ A
;
ÃÃA B
}
ÕÕ 
catch
ŒŒ 
(
ŒŒ 
	Exception
ŒŒ 
ex
ŒŒ 
)
ŒŒ  
{
œœ 
return
–– 

StatusCode
–– !
(
––! "
$num
––" %
,
––% &
$"
––' )
$str
––) <
{
––< =
ex
––= ?
.
––? @
Message
––@ G
}
––G H
"
––H I
)
––I J
;
––J K
}
—— 
}
““ 	
[
‘‘ 	
HttpPut
‘‘	 
(
‘‘ 
$str
‘‘ *
)
‘‘* +
]
‘‘+ ,
public
’’ 
async
’’ 
Task
’’ 
<
’’ 
IActionResult
’’ '
>
’’' (!
UpdateBillingStatus
’’) <
(
’’< =
int
’’= @
	billingId
’’A J
)
’’J K
{
÷÷ 	
try
◊◊ 
{
ÿÿ 
var
ŸŸ 
doctorId
ŸŸ 
=
ŸŸ 
await
ŸŸ $'
GetDoctorIdFromTokenAsync
ŸŸ% >
(
ŸŸ> ?
)
ŸŸ? @
;
ŸŸ@ A
if
⁄⁄ 
(
⁄⁄ 
doctorId
⁄⁄ 
==
⁄⁄ 
null
⁄⁄  $
)
⁄⁄$ %
return
€€ 
Unauthorized
€€ '
(
€€' (
$str
€€( Y
)
€€Y Z
;
€€Z [
var
›› 
success
›› 
=
›› 
await
›› #
_doctorService
››$ 2
.
››2 3&
UpdateBillingStatusAsync
››3 K
(
››K L
	billingId
››L U
,
››U V
doctorId
››W _
.
››_ `
Value
››` e
)
››e f
;
››f g
if
ﬁﬁ 
(
ﬁﬁ 
!
ﬁﬁ 
success
ﬁﬁ 
)
ﬁﬁ 
return
ﬂﬂ 

BadRequest
ﬂﬂ %
(
ﬂﬂ% &
$str
ﬂﬂ& ]
)
ﬂﬂ] ^
;
ﬂﬂ^ _
return
·· 
Ok
·· 
(
·· 
$str
·· =
)
··= >
;
··> ?
}
‚‚ 
catch
„„ 
(
„„ 
	Exception
„„ 
ex
„„ 
)
„„  
{
‰‰ 
return
ÂÂ 

StatusCode
ÂÂ !
(
ÂÂ! "
$num
ÂÂ" %
,
ÂÂ% &
$"
ÂÂ' )
$str
ÂÂ) <
{
ÂÂ< =
ex
ÂÂ= ?
.
ÂÂ? @
Message
ÂÂ@ G
}
ÂÂG H
"
ÂÂH I
)
ÂÂI J
;
ÂÂJ K
}
ÊÊ 
}
ÁÁ 	
[
ËË 	
HttpGet
ËË	 
(
ËË 
$str
ËË 
)
ËË 
]
ËË 
public
ÈÈ 
async
ÈÈ 
Task
ÈÈ 
<
ÈÈ 
IActionResult
ÈÈ '
>
ÈÈ' (
GetDoctorBills
ÈÈ) 7
(
ÈÈ7 8
)
ÈÈ8 9
{
ÍÍ 	
try
ÎÎ 
{
ÏÏ 
var
ÌÌ 
doctorId
ÌÌ 
=
ÌÌ 
await
ÌÌ $'
GetDoctorIdFromTokenAsync
ÌÌ% >
(
ÌÌ> ?
)
ÌÌ? @
;
ÌÌ@ A
if
ÓÓ 
(
ÓÓ 
doctorId
ÓÓ 
==
ÓÓ 
null
ÓÓ  $
)
ÓÓ$ %
return
ÔÔ 
Unauthorized
ÔÔ '
(
ÔÔ' (
$str
ÔÔ( C
)
ÔÔC D
;
ÔÔD E
var
ÒÒ 
bills
ÒÒ 
=
ÒÒ 
await
ÒÒ !
_doctorService
ÒÒ" 0
.
ÒÒ0 1%
GetBillsByDoctorIdAsync
ÒÒ1 H
(
ÒÒH I
doctorId
ÒÒI Q
.
ÒÒQ R
Value
ÒÒR W
)
ÒÒW X
;
ÒÒX Y
return
ÚÚ 
Ok
ÚÚ 
(
ÚÚ 
bills
ÚÚ 
)
ÚÚ  
;
ÚÚ  !
}
ÛÛ 
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ 
ex
ÙÙ 
)
ÙÙ  
{
ıı 
return
ˆˆ 

StatusCode
ˆˆ !
(
ˆˆ! "
$num
ˆˆ" %
,
ˆˆ% &
$"
ˆˆ' )
$str
ˆˆ) <
{
ˆˆ< =
ex
ˆˆ= ?
.
ˆˆ? @
Message
ˆˆ@ G
}
ˆˆG H
"
ˆˆH I
)
ˆˆI J
;
ˆˆJ K
}
˜˜ 
}
¯¯ 	
[
˚˚ 	
HttpGet
˚˚	 
(
˚˚ 
$str
˚˚ $
)
˚˚$ %
]
˚˚% &
public
¸¸ 
async
¸¸ 
Task
¸¸ 
<
¸¸ 
ActionResult
¸¸ &
<
¸¸& '
IEnumerable
¸¸' 2
<
¸¸2 3
MedicationDto
¸¸3 @
>
¸¸@ A
>
¸¸A B
>
¸¸B C
GetMedications
¸¸D R
(
¸¸R S
)
¸¸S T
{
˝˝ 	
try
˛˛ 
{
ˇˇ 
var
ÄÄ 
medications
ÄÄ 
=
ÄÄ  !
await
ÄÄ" '
_doctorService
ÄÄ( 6
.
ÄÄ6 7!
GetMedicationsAsync
ÄÄ7 J
(
ÄÄJ K
)
ÄÄK L
;
ÄÄL M
return
ÅÅ 
Ok
ÅÅ 
(
ÅÅ 
medications
ÅÅ %
)
ÅÅ% &
;
ÅÅ& '
}
ÇÇ 
catch
ÉÉ 
(
ÉÉ 
	Exception
ÉÉ 
ex
ÉÉ 
)
ÉÉ  
{
ÑÑ 
return
ÖÖ 

StatusCode
ÖÖ !
(
ÖÖ! "
$num
ÖÖ" %
,
ÖÖ% &
$"
ÖÖ' )
$str
ÖÖ) <
{
ÖÖ< =
ex
ÖÖ= ?
.
ÖÖ? @
Message
ÖÖ@ G
}
ÖÖG H
"
ÖÖH I
)
ÖÖI J
;
ÖÖJ K
}
ÜÜ 
}
áá 	
[
àà 	
HttpGet
àà	 
(
àà 
$str
àà 
)
àà 
]
àà  
public
ââ 
async
ââ 
Task
ââ 
<
ââ 
ActionResult
ââ &
<
ââ& '
IEnumerable
ââ' 2
<
ââ2 3
TestDto
ââ3 :
>
ââ: ;
>
ââ; <
>
ââ< =
GetTests
ââ> F
(
ââF G
)
ââG H
{
ää 	
try
ãã 
{
åå 
var
çç 
tests
çç 
=
çç 
await
çç !
_doctorService
çç" 0
.
çç0 1
GetTestsAsync
çç1 >
(
çç> ?
)
çç? @
;
çç@ A
return
éé 
Ok
éé 
(
éé 
tests
éé 
)
éé  
;
éé  !
}
èè 
catch
êê 
(
êê 
	Exception
êê 
ex
êê 
)
êê  
{
ëë 
return
íí 

StatusCode
íí !
(
íí! "
$num
íí" %
,
íí% &
$"
íí' )
$str
íí) <
{
íí< =
ex
íí= ?
.
íí? @
Message
íí@ G
}
ííG H
"
ííH I
)
ííI J
;
ííJ K
}
ìì 
}
îî 	
[
ññ 	
HttpPost
ññ	 
(
ññ 
$str
ññ "
)
ññ" #
]
ññ# $
public
óó 
async
óó 
Task
óó 
<
óó 
IActionResult
óó '
>
óó' (
AddSchedule
óó) 4
(
óó4 5
[
óó5 6
FromBody
óó6 >
]
óó> ?
CreateScheduleDto
óó@ Q
scheduleDto
óóR ]
)
óó] ^
{
òò 	
try
ôô 
{
öö 
var
õõ 
doctorId
õõ 
=
õõ 
await
õõ $'
GetDoctorIdFromTokenAsync
õõ% >
(
õõ> ?
)
õõ? @
;
õõ@ A
if
úú 
(
úú 
doctorId
úú 
==
úú 
null
úú  $
)
úú$ %
return
ùù 
Unauthorized
ùù '
(
ùù' (
$str
ùù( Y
)
ùùY Z
;
ùùZ [
bool
üü 
success
üü 
=
üü 
await
üü $
_doctorService
üü% 3
.
üü3 4
AddScheduleAsync
üü4 D
(
üüD E
doctorId
üüE M
.
üüM N
Value
üüN S
,
üüS T
scheduleDto
üüU `
)
üü` a
;
üüa b
if
†† 
(
†† 
!
†† 
success
†† 
)
†† 
return
°° 

BadRequest
°° %
(
°°% &
$str
°°& ?
)
°°? @
;
°°@ A
return
££ 
Ok
££ 
(
££ 
$str
££ 8
)
££8 9
;
££9 :
}
§§ 
catch
•• 
(
•• 
	Exception
•• 
ex
•• 
)
••  
{
¶¶ 
return
ßß 

StatusCode
ßß !
(
ßß! "
$num
ßß" %
,
ßß% &
$"
ßß' )
$str
ßß) <
{
ßß< =
ex
ßß= ?
.
ßß? @
Message
ßß@ G
}
ßßG H
"
ßßH I
)
ßßI J
;
ßßJ K
}
®® 
}
©© 	
[
´´ 	
HttpPut
´´	 
(
´´ 
$str
´´ .
)
´´. /
]
´´/ 0
public
¨¨ 
async
¨¨ 
Task
¨¨ 
<
¨¨ 
IActionResult
¨¨ '
>
¨¨' (
UpdateSchedule
¨¨) 7
(
¨¨7 8
int
¨¨8 ;

scheduleId
¨¨< F
,
¨¨F G
[
¨¨H I
FromBody
¨¨I Q
]
¨¨Q R
UpdateScheduleDto
¨¨S d
	updateDto
¨¨e n
)
¨¨n o
{
≠≠ 	
try
ÆÆ 
{
ØØ 
var
∞∞ 
doctorId
∞∞ 
=
∞∞ 
await
∞∞ $'
GetDoctorIdFromTokenAsync
∞∞% >
(
∞∞> ?
)
∞∞? @
;
∞∞@ A
if
±± 
(
±± 
doctorId
±± 
==
±± 
null
±±  $
)
±±$ %
return
≤≤ 
Unauthorized
≤≤ '
(
≤≤' (
$str
≤≤( Y
)
≤≤Y Z
;
≤≤Z [
bool
¥¥ 
success
¥¥ 
=
¥¥ 
await
¥¥ $
_doctorService
¥¥% 3
.
¥¥3 4!
UpdateScheduleAsync
¥¥4 G
(
¥¥G H

scheduleId
¥¥H R
,
¥¥R S
doctorId
¥¥T \
.
¥¥\ ]
Value
¥¥] b
,
¥¥b c
	updateDto
¥¥d m
)
¥¥m n
;
¥¥n o
if
µµ 
(
µµ 
!
µµ 
success
µµ 
)
µµ 
return
∂∂ 
NotFound
∂∂ #
(
∂∂# $
$str
∂∂$ P
)
∂∂P Q
;
∂∂Q R
return
∏∏ 
Ok
∏∏ 
(
∏∏ 
$str
∏∏ :
)
∏∏: ;
;
∏∏; <
}
ππ 
catch
∫∫ 
(
∫∫ 
	Exception
∫∫ 
ex
∫∫ 
)
∫∫  
{
ªª 
return
ºº 

StatusCode
ºº !
(
ºº! "
$num
ºº" %
,
ºº% &
$"
ºº' )
$str
ºº) <
{
ºº< =
ex
ºº= ?
.
ºº? @
Message
ºº@ G
}
ººG H
"
ººH I
)
ººI J
;
ººJ K
}
ΩΩ 
}
ææ 	
[
øø 	
HttpGet
øø	 
(
øø 
$str
øø "
)
øø" #
]
øø# $
public
¿¿ 
async
¿¿ 
Task
¿¿ 
<
¿¿ 
IActionResult
¿¿ '
>
¿¿' (
GetSchedules
¿¿) 5
(
¿¿5 6
)
¿¿6 7
{
¡¡ 	
try
¬¬ 
{
√√ 
var
ƒƒ 
doctorId
ƒƒ 
=
ƒƒ 
await
ƒƒ $'
GetDoctorIdFromTokenAsync
ƒƒ% >
(
ƒƒ> ?
)
ƒƒ? @
;
ƒƒ@ A
if
≈≈ 
(
≈≈ 
doctorId
≈≈ 
==
≈≈ 
null
≈≈  $
)
≈≈$ %
return
∆∆ 
Unauthorized
∆∆ '
(
∆∆' (
$str
∆∆( Y
)
∆∆Y Z
;
∆∆Z [
var
»» 
	schedules
»» 
=
»» 
await
»»  %
_doctorService
»»& 4
.
»»4 5
GetSchedulesAsync
»»5 F
(
»»F G
doctorId
»»G O
.
»»O P
Value
»»P U
)
»»U V
;
»»V W
if
…… 
(
…… 
!
…… 
	schedules
…… 
.
…… 
Any
…… "
(
……" #
)
……# $
)
……$ %
return
   
NotFound
   #
(
  # $
$str
  $ 8
)
  8 9
;
  9 :
return
ÃÃ 
Ok
ÃÃ 
(
ÃÃ 
	schedules
ÃÃ #
)
ÃÃ# $
;
ÃÃ$ %
}
ÕÕ 
catch
ŒŒ 
(
ŒŒ 
	Exception
ŒŒ 
ex
ŒŒ 
)
ŒŒ  
{
œœ 
return
–– 

StatusCode
–– !
(
––! "
$num
––" %
,
––% &
$"
––' )
$str
––) <
{
––< =
ex
––= ?
.
––? @
Message
––@ G
}
––G H
"
––H I
)
––I J
;
––J K
}
—— 
}
““ 	
[
‘‘ 	
HttpPut
‘‘	 
(
‘‘ 
$str
‘‘ .
)
‘‘. /
]
‘‘/ 0
public
’’ 
async
’’ 
Task
’’ 
<
’’ 
IActionResult
’’ '
>
’’' (
CancelSchedule
’’) 7
(
’’7 8
int
’’8 ;

scheduleId
’’< F
)
’’F G
{
÷÷ 	
try
◊◊ 
{
ÿÿ 
var
ŸŸ 
doctorId
ŸŸ 
=
ŸŸ 
await
ŸŸ $'
GetDoctorIdFromTokenAsync
ŸŸ% >
(
ŸŸ> ?
)
ŸŸ? @
;
ŸŸ@ A
if
⁄⁄ 
(
⁄⁄ 
doctorId
⁄⁄ 
==
⁄⁄ 
null
⁄⁄  $
)
⁄⁄$ %
return
€€ 
Unauthorized
€€ '
(
€€' (
$str
€€( Y
)
€€Y Z
;
€€Z [
bool
›› 
success
›› 
=
›› 
await
›› $
_doctorService
››% 3
.
››3 4!
CancelScheduleAsync
››4 G
(
››G H

scheduleId
››H R
,
››R S
doctorId
››T \
.
››\ ]
Value
››] b
)
››b c
;
››c d
if
ﬁﬁ 
(
ﬁﬁ 
!
ﬁﬁ 
success
ﬁﬁ 
)
ﬁﬁ 
return
ﬂﬂ 
NotFound
ﬂﬂ #
(
ﬂﬂ# $
$str
ﬂﬂ$ d
)
ﬂﬂd e
;
ﬂﬂe f
return
·· 
Ok
·· 
(
·· 
$str
·· <
)
··< =
;
··= >
}
‚‚ 
catch
„„ 
(
„„ )
UnauthorizedAccessException
„„ .
ex
„„/ 1
)
„„1 2
{
‰‰ 
return
ÂÂ 
Unauthorized
ÂÂ #
(
ÂÂ# $
$"
ÂÂ$ &
$str
ÂÂ& ;
{
ÂÂ; <
ex
ÂÂ< >
.
ÂÂ> ?
Message
ÂÂ? F
}
ÂÂF G
"
ÂÂG H
)
ÂÂH I
;
ÂÂI J
}
ÊÊ 
catch
ÁÁ 
(
ÁÁ "
KeyNotFoundException
ÁÁ '
ex
ÁÁ( *
)
ÁÁ* +
{
ËË 
return
ÈÈ 
NotFound
ÈÈ 
(
ÈÈ  
$"
ÈÈ  "
$str
ÈÈ" 6
{
ÈÈ6 7
ex
ÈÈ7 9
.
ÈÈ9 :
Message
ÈÈ: A
}
ÈÈA B
"
ÈÈB C
)
ÈÈC D
;
ÈÈD E
}
ÍÍ 
catch
ÎÎ 
(
ÎÎ '
InvalidOperationException
ÎÎ ,
ex
ÎÎ- /
)
ÎÎ/ 0
{
ÏÏ 
return
ÌÌ 

BadRequest
ÌÌ !
(
ÌÌ! "
$"
ÌÌ" $
$str
ÌÌ$ 7
{
ÌÌ7 8
ex
ÌÌ8 :
.
ÌÌ: ;
Message
ÌÌ; B
}
ÌÌB C
"
ÌÌC D
)
ÌÌD E
;
ÌÌE F
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
	Exception
ÔÔ 
ex
ÔÔ 
)
ÔÔ  
{
 
return
ÚÚ 

StatusCode
ÚÚ !
(
ÚÚ! "
$num
ÚÚ" %
,
ÚÚ% &
$"
ÚÚ' )
$str
ÚÚ) G
{
ÚÚG H
ex
ÚÚH J
.
ÚÚJ K
Message
ÚÚK R
}
ÚÚR S
"
ÚÚS T
)
ÚÚT U
;
ÚÚU V
}
ÛÛ 
}
ÙÙ 	
[
ˆˆ 	
HttpPut
ˆˆ	 
(
ˆˆ 
$str
ˆˆ 1
)
ˆˆ1 2
]
ˆˆ2 3
public
˜˜ 
async
˜˜ 
Task
˜˜ 
<
˜˜ 
IActionResult
˜˜ '
>
˜˜' (
CompleteSchedule
˜˜) 9
(
˜˜9 :
int
˜˜: =

scheduleId
˜˜> H
)
˜˜H I
{
¯¯ 	
try
˘˘ 
{
˙˙ 
var
˚˚ 
doctorId
˚˚ 
=
˚˚ 
await
˚˚ $'
GetDoctorIdFromTokenAsync
˚˚% >
(
˚˚> ?
)
˚˚? @
;
˚˚@ A
if
¸¸ 
(
¸¸ 
doctorId
¸¸ 
==
¸¸ 
null
¸¸  $
)
¸¸$ %
return
˝˝ 
Unauthorized
˝˝ '
(
˝˝' (
$str
˝˝( Y
)
˝˝Y Z
;
˝˝Z [
bool
ˇˇ 
success
ˇˇ 
=
ˇˇ 
await
ˇˇ $
_doctorService
ˇˇ% 3
.
ˇˇ3 4#
CompleteScheduleAsync
ˇˇ4 I
(
ˇˇI J

scheduleId
ˇˇJ T
,
ˇˇT U
doctorId
ˇˇV ^
.
ˇˇ^ _
Value
ˇˇ_ d
)
ˇˇd e
;
ˇˇe f
if
ÄÄ 
(
ÄÄ 
!
ÄÄ 
success
ÄÄ 
)
ÄÄ 
return
ÅÅ 
NotFound
ÅÅ #
(
ÅÅ# $
$str
ÅÅ$ d
)
ÅÅd e
;
ÅÅe f
return
ÉÉ 
Ok
ÉÉ 
(
ÉÉ 
$str
ÉÉ :
)
ÉÉ: ;
;
ÉÉ; <
}
ÑÑ 
catch
ÖÖ 
(
ÖÖ )
UnauthorizedAccessException
ÖÖ .
ex
ÖÖ/ 1
)
ÖÖ1 2
{
ÜÜ 
return
áá 
Unauthorized
áá #
(
áá# $
$"
áá$ &
$str
áá& ;
{
áá; <
ex
áá< >
.
áá> ?
Message
áá? F
}
ááF G
"
ááG H
)
ááH I
;
ááI J
}
àà 
catch
ââ 
(
ââ "
KeyNotFoundException
ââ '
ex
ââ( *
)
ââ* +
{
ää 
return
ãã 
NotFound
ãã 
(
ãã  
$"
ãã  "
$str
ãã" 6
{
ãã6 7
ex
ãã7 9
.
ãã9 :
Message
ãã: A
}
ããA B
"
ããB C
)
ããC D
;
ããD E
}
åå 
catch
çç 
(
çç '
InvalidOperationException
çç ,
ex
çç- /
)
çç/ 0
{
éé 
return
èè 

BadRequest
èè !
(
èè! "
$"
èè" $
$str
èè$ 7
{
èè7 8
ex
èè8 :
.
èè: ;
Message
èè; B
}
èèB C
"
èèC D
)
èèD E
;
èèE F
}
êê 
catch
ëë 
(
ëë 
	Exception
ëë 
ex
ëë 
)
ëë  
{
íí 
return
îî 

StatusCode
îî !
(
îî! "
$num
îî" %
,
îî% &
$"
îî' )
$str
îî) G
{
îîG H
ex
îîH J
.
îîJ K
Message
îîK R
}
îîR S
"
îîS T
)
îîT U
;
îîU V
}
ïï 
}
ññ 	
private
öö 
async
öö 
Task
öö 
<
öö 
int
öö 
?
öö 
>
öö  '
GetDoctorIdFromTokenAsync
öö! :
(
öö: ;
)
öö; <
{
õõ 	
var
ùù 
userIdClaim
ùù 
=
ùù 
User
ùù "
.
ùù" #
	FindFirst
ùù# ,
(
ùù, -

ClaimTypes
ùù- 7
.
ùù7 8
NameIdentifier
ùù8 F
)
ùùF G
;
ùùG H
if
ûû 
(
ûû 
userIdClaim
ûû 
==
ûû 
null
ûû #
||
ûû$ &
!
ûû' (
int
ûû( +
.
ûû+ ,
TryParse
ûû, 4
(
ûû4 5
userIdClaim
ûû5 @
.
ûû@ A
Value
ûûA F
,
ûûF G
out
ûûH K
int
ûûL O
userId
ûûP V
)
ûûV W
)
ûûW X
{
üü 
throw
†† 
new
†† )
UnauthorizedAccessException
†† 5
(
††5 6
$str
††6 S
)
††S T
;
††T U
}
°° 
var
££ 
DoctorID
££ 
=
££ 
await
££  
_doctorService
££! /
.
££/ 0
GetDoctorIdAsync
££0 @
(
££@ A
userId
££A G
)
££G H
;
££H I
return
•• 
DoctorID
•• 
;
•• 
}
¶¶ 	
}
®® 
}™™ ·—
dC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Controllers\PatientController.cs
	namespace		 	
AmazeCareAPI		
 
.		 
Controllers		 "
{

 
[ 
	Authorize 
( 
Roles 
= 
$str  
)  !
]! "
[ 
ApiController 
] 
[ 
Route 

(
 
$str 
) 
] 
public 

class 
PatientController "
:# $
ControllerBase% 3
{ 
private 
readonly 
IPatientService (
_patientService) 8
;8 9
public 
PatientController  
(  !
IPatientService! 0
patientService1 ?
)? @
{ 	
_patientService 
= 
patientService ,
;, -
} 	
[ 	
HttpGet	 
( 
$str !
)! "
]" #
public 
async 
Task 
< 
IActionResult '
>' (%
CheckUsernameAvailability) B
(B C
[C D
	FromQueryD M
]M N
stringO U
usernameV ^
)^ _
{ 	
try 
{ 
var 
( 
isAvailable  
,  !
message" )
)) *
=+ ,
await- 2
_patientService3 B
.B C*
CheckUsernameAvailabilityAsyncC a
(a b
usernameb j
)j k
;k l
return 
Ok 
( 
new 
{ 
Username  (
=) *
username+ 3
,3 4
IsAvailable5 @
=A B
isAvailableC N
,N O
MessageP W
=X Y
messageZ a
}b c
)c d
;d e
} 
catch 
( 
ServiceException #
ex$ &
)& '
{ 
return   

BadRequest   !
(  ! "
ex  " $
.  $ %
Message  % ,
)  , -
;  - .
}!! 
catch"" 
("" 
	Exception"" 
ex"" 
)""  
{## 
return$$ 

StatusCode$$ !
($$! "
$num$$" %
,$$% &
$str$$' `
)$$` a
;$$a b
}%% 
}&& 	
[(( 	
HttpGet((	 
((( 
$str(( "
)((" #
]((# $
public)) 
async)) 
Task)) 
<)) 
IActionResult)) '
>))' (
GetPersonalInfo))) 8
())8 9
)))9 :
{** 	
try++ 
{,, 
var-- 
userId-- 
=-- 
int--  
.--  !
Parse--! &
(--& '
User--' +
.--+ ,
FindFirstValue--, :
(--: ;

ClaimTypes--; E
.--E F
NameIdentifier--F T
)--T U
)--U V
;--V W
var.. 
personalInfo..  
=..! "
await..# (
_patientService..) 8
...8 9 
GetPersonalInfoAsync..9 M
(..M N
userId..N T
)..T U
;..U V
if00 
(00 
personalInfo00  
==00! #
null00$ (
)00( )
return11 
NotFound11 #
(11# $
$str11$ 5
)115 6
;116 7
return33 
Ok33 
(33 
personalInfo33 &
)33& '
;33' (
}44 
catch55 
(55 
	Exception55 
ex55 
)55  
{66 
return77 

StatusCode77 !
(77! "
$num77" %
,77% &
$str77' a
)77a b
;77b c
}88 
}99 	
[<< 	
HttpPut<<	 
(<< 
$str<< %
)<<% &
]<<& '
public== 
async== 
Task== 
<== 
IActionResult== '
>==' (
UpdatePersonalInfo==) ;
(==; <
[==< =
FromBody=== E
]==E F!
UpdatePersonalInfoDto==G \
	updateDto==] f
)==f g
{>> 	
try?? 
{@@ 
ifAA 
(AA 
!AA 

ModelStateAA 
.AA  
IsValidAA  '
)AA' (
returnBB 

BadRequestBB %
(BB% &
$strBB& A
)BBA B
;BBB C
intDD 
?DD 
userIdDD 
=DD 
GetUserIdFromTokenDD 0
(DD0 1
)DD1 2
;DD2 3
ifEE 
(EE 
userIdEE 
==EE 
nullEE "
)EE" #
returnFF 
UnauthorizedFF '
(FF' (
$strFF( E
)FFE F
;FFF G
varHH 
(HH 
	isSuccessHH 
,HH 
messageHH  '
)HH' (
=HH) *
awaitHH+ 0
_patientServiceHH1 @
.HH@ A#
UpdatePersonalInfoAsyncHHA X
(HHX Y
userIdHHY _
.HH_ `
ValueHH` e
,HHe f
	updateDtoHHg p
)HHp q
;HHq r
ifJJ 
(JJ 
!JJ 
	isSuccessJJ 
)JJ 
returnKK 

BadRequestKK %
(KK% &
messageKK& -
)KK- .
;KK. /
returnMM 
OkMM 
(MM 
messageMM !
)MM! "
;MM" #
}NN 
catchOO 
(OO 
ServiceExceptionOO #
exOO$ &
)OO& '
{PP 
returnQQ 

BadRequestQQ !
(QQ! "
exQQ" $
.QQ$ %
MessageQQ% ,
)QQ, -
;QQ- .
}RR 
catchSS 
(SS 
	ExceptionSS 
exSS 
)SS  
{TT 
returnUU 

StatusCodeUU !
(UU! "
$numUU" %
,UU% &
$strUU' _
)UU_ `
;UU` a
}VV 
}WW 	
[ZZ 	
HttpGetZZ	 
(ZZ 
$strZZ  
)ZZ  !
]ZZ! "
public[[ 
async[[ 
Task[[ 
<[[ 
IActionResult[[ '
>[[' (
SearchDoctors[[) 6
([[6 7
[[[7 8
	FromQuery[[8 A
][[A B
string[[C I
?[[I J
specialization[[K Y
=[[Z [
null[[\ `
)[[` a
{\\ 	
try]] 
{^^ 
var__ 
doctors__ 
=__ 
await__ #
_patientService__$ 3
.__3 4
SearchDoctors__4 A
(__A B
specialization__B P
)__P Q
;__Q R
ifaa 
(aa 
doctorsaa 
==aa 
nullaa #
||aa$ &
!aa' (
doctorsaa( /
.aa/ 0
Anyaa0 3
(aa3 4
)aa4 5
)aa5 6
returnbb 
NotFoundbb #
(bb# $
$strbb$ X
)bbX Y
;bbY Z
returndd 
Okdd 
(dd 
doctorsdd !
)dd! "
;dd" #
}ee 
catchff 
(ff 
	Exceptionff 
exff 
)ff  
{gg 
returnhh 

StatusCodehh !
(hh! "
$numhh" %
,hh% &
$strhh' W
)hhW X
;hhX Y
}ii 
}jj 	
[ll 	
HttpGetll	 
(ll 
$strll ,
)ll, -
]ll- .
publicmm 
asyncmm 
Taskmm 
<mm 
IActionResultmm '
>mm' (
GetDoctorSchedulemm) :
(mm: ;
intmm; >
doctorIdmm? G
)mmG H
{nn 	
tryoo 
{pp 
varqq 
scheduleqq 
=qq 
awaitqq $
_patientServiceqq% 4
.qq4 5"
GetDoctorScheduleAsyncqq5 K
(qqK L
doctorIdqqL T
)qqT U
;qqU V
ifss 
(ss 
scheduless 
==ss 
nullss  $
||ss% '
scheduless( 0
.ss0 1
Countss1 6
==ss7 9
$numss: ;
)ss; <
returntt 
NotFoundtt #
(tt# $
$strtt$ Q
)ttQ R
;ttR S
returnvv 
Okvv 
(vv 
schedulevv "
)vv" #
;vv# $
}ww 
catchxx 
(xx 
	Exceptionxx 
exxx 
)xx  
{yy 
returnzz 

StatusCodezz !
(zz! "
$numzz" %
,zz% &
$strzz' b
)zzb c
;zzc d
}{{ 
}|| 	
[~~ 	
HttpPost~~	 
(~~ 
$str~~ '
)~~' (
]~~( )
public 
async 
Task 
< 
IActionResult '
>' (
ScheduleAppointment) <
(< =!
AppointmentBookingDto= R

bookingDtoS ]
)] ^
{
ÄÄ 	
try
ÅÅ 
{
ÇÇ 
var
ÉÉ 
userId
ÉÉ 
=
ÉÉ 
int
ÉÉ  
.
ÉÉ  !
Parse
ÉÉ! &
(
ÉÉ& '
User
ÉÉ' +
.
ÉÉ+ ,
FindFirstValue
ÉÉ, :
(
ÉÉ: ;

ClaimTypes
ÉÉ; E
.
ÉÉE F
NameIdentifier
ÉÉF T
)
ÉÉT U
)
ÉÉU V
;
ÉÉV W
var
ÑÑ 
(
ÑÑ 
appointment
ÑÑ  
,
ÑÑ  !
message
ÑÑ" )
)
ÑÑ) *
=
ÑÑ+ ,
await
ÑÑ- 2
_patientService
ÑÑ3 B
.
ÑÑB C!
ScheduleAppointment
ÑÑC V
(
ÑÑV W
userId
ÑÑW ]
,
ÑÑ] ^

bookingDto
ÑÑ_ i
)
ÑÑi j
;
ÑÑj k
if
ÜÜ 
(
ÜÜ 
appointment
ÜÜ 
==
ÜÜ  "
null
ÜÜ# '
)
ÜÜ' (
return
áá 

BadRequest
áá %
(
áá% &
message
áá& -
)
áá- .
;
áá. /
return
ââ 
Ok
ââ 
(
ââ 
new
ââ 
{
ââ 
appointment
ââ  +
,
ââ+ ,
message
ââ- 4
}
ââ5 6
)
ââ6 7
;
ââ7 8
}
ää 
catch
ãã 
(
ãã 
ServiceException
ãã #
ex
ãã$ &
)
ãã& '
{
åå 
return
çç 

BadRequest
çç !
(
çç! "
ex
çç" $
.
çç$ %
Message
çç% ,
)
çç, -
;
çç- .
}
éé 
catch
èè 
(
èè 
	Exception
èè 
ex
èè 
)
èè  
{
êê 
return
ëë 

StatusCode
ëë !
(
ëë! "
$num
ëë" %
,
ëë% &
$str
ëë' \
)
ëë\ ]
;
ëë] ^
}
íí 
}
ìì 	
[
óó 	
HttpPut
óó	 
(
óó 
$str
óó 8
)
óó8 9
]
óó9 :
public
òò 
async
òò 
Task
òò 
<
òò 
IActionResult
òò '
>
òò' (#
RescheduleAppointment
òò) >
(
òò> ?
int
òò? B
appointmentId
òòC P
,
òòP Q
[
òòR S
FromBody
òòS [
]
òò[ \&
AppointmentRescheduleDto
òò] u
rescheduleDtoòòv É
)òòÉ Ñ
{
ôô 	
try
öö 
{
õõ 
var
úú 
userId
úú 
=
úú  
GetUserIdFromToken
úú /
(
úú/ 0
)
úú0 1
;
úú1 2
if
ùù 
(
ùù 
userId
ùù 
==
ùù 
null
ùù "
)
ùù" #
return
ûû 
Unauthorized
ûû '
(
ûû' (
$str
ûû( A
)
ûûA B
;
ûûB C
var
†† 
(
†† 
appointment
††  
,
††  !
message
††" )
)
††) *
=
††+ ,
await
††- 2
_patientService
††3 B
.
††B C#
RescheduleAppointment
††C X
(
††X Y
userId
††Y _
.
††_ `
Value
††` e
,
††e f
appointmentId
††g t
,
††t u
rescheduleDto††v É
)††É Ñ
;††Ñ Ö
if
¢¢ 
(
¢¢ 
appointment
¢¢ 
==
¢¢  "
null
¢¢# '
)
¢¢' (
return
££ 

BadRequest
££ %
(
££% &
message
££& -
)
££- .
;
££. /
return
•• 
Ok
•• 
(
•• 
new
•• 
{
•• 
appointment
••  +
,
••+ ,
message
••- 4
}
••5 6
)
••6 7
;
••7 8
}
¶¶ 
catch
ßß 
(
ßß 
ServiceException
ßß #
ex
ßß$ &
)
ßß& '
{
®® 
return
©© 

BadRequest
©© !
(
©©! "
ex
©©" $
.
©©$ %
Message
©©% ,
)
©©, -
;
©©- .
}
™™ 
catch
´´ 
(
´´ 
	Exception
´´ 
ex
´´ 
)
´´  
{
¨¨ 
return
≠≠ 

StatusCode
≠≠ !
(
≠≠! "
$num
≠≠" %
,
≠≠% &
$str
≠≠' ^
)
≠≠^ _
;
≠≠_ `
}
ÆÆ 
}
ØØ 	
[
¥¥ 	
HttpGet
¥¥	 
(
¥¥ 
$str
¥¥ $
)
¥¥$ %
]
¥¥% &
public
µµ 
async
µµ 
Task
µµ 
<
µµ 
IActionResult
µµ '
>
µµ' (
GetMedicalHistory
µµ) :
(
µµ: ;
)
µµ; <
{
∂∂ 	
try
∑∑ 
{
∏∏ 
var
ππ 
userId
ππ 
=
ππ  
GetUserIdFromToken
ππ /
(
ππ/ 0
)
ππ0 1
;
ππ1 2
if
∫∫ 
(
∫∫ 
userId
∫∫ 
==
∫∫ 
null
∫∫ "
)
∫∫" #
return
ªª 
Unauthorized
ªª '
(
ªª' (
$str
ªª( E
)
ªªE F
;
ªªF G
var
ΩΩ 
medicalHistory
ΩΩ "
=
ΩΩ# $
await
ΩΩ% *
_patientService
ΩΩ+ :
.
ΩΩ: ;
GetMedicalHistory
ΩΩ; L
(
ΩΩL M
userId
ΩΩM S
.
ΩΩS T
Value
ΩΩT Y
)
ΩΩY Z
;
ΩΩZ [
if
øø 
(
øø 
medicalHistory
øø "
==
øø# %
null
øø& *
||
øø+ -
!
øø. /
medicalHistory
øø/ =
.
øø= >
Any
øø> A
(
øøA B
)
øøB C
)
øøC D
return
¿¿ 
NotFound
¿¿ #
(
¿¿# $
$str
¿¿$ ?
)
¿¿? @
;
¿¿@ A
return
¬¬ 
Ok
¬¬ 
(
¬¬ 
medicalHistory
¬¬ (
)
¬¬( )
;
¬¬) *
}
√√ 
catch
ƒƒ 
(
ƒƒ 
	Exception
ƒƒ 
ex
ƒƒ 
)
ƒƒ  
{
≈≈ 
return
∆∆ 

StatusCode
∆∆ !
(
∆∆! "
$num
∆∆" %
,
∆∆% &
$str
∆∆' \
)
∆∆\ ]
;
∆∆] ^
}
«« 
}
»» 	
[
ÀÀ 	
HttpGet
ÀÀ	 
(
ÀÀ 
$str
ÀÀ !
)
ÀÀ! "
]
ÀÀ" #
public
ÃÃ 
async
ÃÃ 
Task
ÃÃ 
<
ÃÃ 
IActionResult
ÃÃ '
>
ÃÃ' (
GetTestDetails
ÃÃ) 7
(
ÃÃ7 8
)
ÃÃ8 9
{
ÕÕ 	
try
ŒŒ 
{
œœ 
var
–– 
userId
–– 
=
––  
GetUserIdFromToken
–– /
(
––/ 0
)
––0 1
;
––1 2
if
—— 
(
—— 
userId
—— 
==
—— 
null
—— "
)
——" #
return
““ 
Unauthorized
““ '
(
““' (
$str
““( E
)
““E F
;
““F G
var
‘‘ 
testDetails
‘‘ 
=
‘‘  !
await
‘‘" '
_patientService
‘‘( 7
.
‘‘7 8
GetTestDetails
‘‘8 F
(
‘‘F G
userId
‘‘G M
.
‘‘M N
Value
‘‘N S
)
‘‘S T
;
‘‘T U
if
÷÷ 
(
÷÷ 
testDetails
÷÷ 
==
÷÷  "
null
÷÷# '
||
÷÷( *
!
÷÷+ ,
testDetails
÷÷, 7
.
÷÷7 8
Any
÷÷8 ;
(
÷÷; <
)
÷÷< =
)
÷÷= >
return
◊◊ 
NotFound
◊◊ #
(
◊◊# $
$str
◊◊$ <
)
◊◊< =
;
◊◊= >
return
ŸŸ 
Ok
ŸŸ 
(
ŸŸ 
testDetails
ŸŸ %
)
ŸŸ% &
;
ŸŸ& '
}
⁄⁄ 
catch
€€ 
(
€€ 
ServiceException
€€ #
ex
€€$ &
)
€€& '
{
‹‹ 
return
›› 

BadRequest
›› !
(
››! "
ex
››" $
.
››$ %
Message
››% ,
)
››, -
;
››- .
}
ﬁﬁ 
catch
ﬂﬂ 
(
ﬂﬂ 
	Exception
ﬂﬂ 
ex
ﬂﬂ 
)
ﬂﬂ  
{
‡‡ 
return
·· 

StatusCode
·· !
(
··! "
$num
··" %
,
··% &
$str
··' Y
)
··Y Z
;
··Z [
}
‚‚ 
}
„„ 	
[
ÊÊ 	
HttpGet
ÊÊ	 
(
ÊÊ 
$str
ÊÊ )
)
ÊÊ) *
]
ÊÊ* +
public
ÁÁ 
async
ÁÁ 
Task
ÁÁ 
<
ÁÁ 
IActionResult
ÁÁ '
>
ÁÁ' ($
GetPrescriptionDetails
ÁÁ) ?
(
ÁÁ? @
)
ÁÁ@ A
{
ËË 	
try
ÈÈ 
{
ÍÍ 
var
ÎÎ 
userId
ÎÎ 
=
ÎÎ  
GetUserIdFromToken
ÎÎ /
(
ÎÎ/ 0
)
ÎÎ0 1
;
ÎÎ1 2
if
ÏÏ 
(
ÏÏ 
userId
ÏÏ 
==
ÏÏ 
null
ÏÏ "
)
ÏÏ" #
return
ÌÌ 
Unauthorized
ÌÌ '
(
ÌÌ' (
$str
ÌÌ( E
)
ÌÌE F
;
ÌÌF G
var
ÔÔ !
prescriptionDetails
ÔÔ '
=
ÔÔ( )
await
ÔÔ* /
_patientService
ÔÔ0 ?
.
ÔÔ? @$
GetPrescriptionDetails
ÔÔ@ V
(
ÔÔV W
userId
ÔÔW ]
.
ÔÔ] ^
Value
ÔÔ^ c
)
ÔÔc d
;
ÔÔd e
if
ÒÒ 
(
ÒÒ !
prescriptionDetails
ÒÒ '
==
ÒÒ( *
null
ÒÒ+ /
||
ÒÒ0 2
!
ÒÒ3 4!
prescriptionDetails
ÒÒ4 G
.
ÒÒG H
Any
ÒÒH K
(
ÒÒK L
)
ÒÒL M
)
ÒÒM N
return
ÚÚ 
NotFound
ÚÚ #
(
ÚÚ# $
$str
ÚÚ$ D
)
ÚÚD E
;
ÚÚE F
return
ÙÙ 
Ok
ÙÙ 
(
ÙÙ !
prescriptionDetails
ÙÙ -
)
ÙÙ- .
;
ÙÙ. /
}
ıı 
catch
ˆˆ 
(
ˆˆ 
ServiceException
ˆˆ #
ex
ˆˆ$ &
)
ˆˆ& '
{
˜˜ 
return
¯¯ 

BadRequest
¯¯ !
(
¯¯! "
ex
¯¯" $
.
¯¯$ %
Message
¯¯% ,
)
¯¯, -
;
¯¯- .
}
˘˘ 
catch
˙˙ 
(
˙˙ 
	Exception
˙˙ 
ex
˙˙ 
)
˙˙  
{
˚˚ 
return
¸¸ 

StatusCode
¸¸ !
(
¸¸! "
$num
¸¸" %
,
¸¸% &
$str
¸¸' a
)
¸¸a b
;
¸¸b c
}
˝˝ 
}
˛˛ 	
[
ÄÄ 	
HttpGet
ÄÄ	 
(
ÄÄ 
$str
ÄÄ $
)
ÄÄ$ %
]
ÄÄ% &
public
ÅÅ 
async
ÅÅ 
Task
ÅÅ 
<
ÅÅ 
IActionResult
ÅÅ '
>
ÅÅ' (
GetBillingDetails
ÅÅ) :
(
ÅÅ: ;
)
ÅÅ; <
{
ÇÇ 	
try
ÉÉ 
{
ÑÑ 
var
ÖÖ 
userId
ÖÖ 
=
ÖÖ  
GetUserIdFromToken
ÖÖ /
(
ÖÖ/ 0
)
ÖÖ0 1
;
ÖÖ1 2
if
ÜÜ 
(
ÜÜ 
userId
ÜÜ 
==
ÜÜ 
null
ÜÜ "
)
ÜÜ" #
return
áá 
Unauthorized
áá '
(
áá' (
$str
áá( E
)
ááE F
;
ááF G
var
ââ 
billingDetails
ââ "
=
ââ# $
await
ââ% *
_patientService
ââ+ :
.
ââ: ;
GetBillingDetails
ââ; L
(
ââL M
userId
ââM S
.
ââS T
Value
ââT Y
)
ââY Z
;
ââZ [
return
ää 
Ok
ää 
(
ää 
billingDetails
ää (
)
ää( )
;
ää) *
}
ãã 
catch
åå 
(
åå 
	Exception
åå 
ex
åå 
)
åå  
{
çç 
return
éé 

StatusCode
éé !
(
éé! "
$num
éé" %
,
éé% &
$str
éé' \
)
éé\ ]
;
éé] ^
}
èè 
}
êê 	
[
ëë 	
HttpGet
ëë	 
(
ëë 
$str
ëë "
)
ëë" #
]
ëë# $
public
íí 
async
íí 
Task
íí 
<
íí 
IActionResult
íí '
>
íí' (
GetAppointments
íí) 8
(
íí8 9
)
íí9 :
{
ìì 	
try
îî 
{
ïï 
var
ññ 
userId
ññ 
=
ññ 
int
ññ  
.
ññ  !
Parse
ññ! &
(
ññ& '
User
ññ' +
.
ññ+ ,
FindFirstValue
ññ, :
(
ññ: ;

ClaimTypes
ññ; E
.
ññE F
NameIdentifier
ññF T
)
ññT U
)
ññU V
;
ññV W
var
óó 
appointments
óó  
=
óó! "
await
óó# (
_patientService
óó) 8
.
óó8 9
GetAppointments
óó9 H
(
óóH I
userId
óóI O
)
óóO P
;
óóP Q
if
ôô 
(
ôô 
appointments
ôô  
==
ôô! #
null
ôô$ (
||
ôô) +
!
ôô, -
appointments
ôô- 9
.
ôô9 :
Any
ôô: =
(
ôô= >
)
ôô> ?
)
ôô? @
return
öö 
NotFound
öö #
(
öö# $
$str
öö$ <
)
öö< =
;
öö= >
return
úú 
Ok
úú 
(
úú 
appointments
úú &
)
úú& '
;
úú' (
}
ùù 
catch
ûû 
(
ûû 
ServiceException
ûû #
ex
ûû$ &
)
ûû& '
{
üü 
return
†† 

BadRequest
†† !
(
††! "
ex
††" $
.
††$ %
Message
††% ,
)
††, -
;
††- .
}
°° 
catch
¢¢ 
(
¢¢ 
	Exception
¢¢ 
ex
¢¢ 
)
¢¢  
{
££ 
return
§§ 

StatusCode
§§ !
(
§§! "
$num
§§" %
,
§§% &
$str
§§' Y
)
§§Y Z
;
§§Z [
}
•• 
}
¶¶ 	
[
ßß 	
HttpPost
ßß	 
(
ßß 
$str
ßß 5
)
ßß5 6
]
ßß6 7
public
®® 
async
®® 
Task
®® 
<
®® 
IActionResult
®® '
>
®®' (
CancelAppointment
®®) :
(
®®: ;
int
®®; >
appointmentId
®®? L
)
®®L M
{
©© 	
try
™™ 
{
´´ 
var
¨¨ 
userId
¨¨ 
=
¨¨ 
int
¨¨  
.
¨¨  !
Parse
¨¨! &
(
¨¨& '
User
¨¨' +
.
¨¨+ ,
FindFirstValue
¨¨, :
(
¨¨: ;

ClaimTypes
¨¨; E
.
¨¨E F
NameIdentifier
¨¨F T
)
¨¨T U
)
¨¨U V
;
¨¨V W
var
≠≠ 
result
≠≠ 
=
≠≠ 
await
≠≠ "
_patientService
≠≠# 2
.
≠≠2 3
CancelAppointment
≠≠3 D
(
≠≠D E
userId
≠≠E K
,
≠≠K L
appointmentId
≠≠M Z
)
≠≠Z [
;
≠≠[ \
if
ØØ 
(
ØØ 
!
ØØ 
result
ØØ 
)
ØØ 
return
∞∞ 

BadRequest
∞∞ %
(
∞∞% &
$str
∞∞& I
)
∞∞I J
;
∞∞J K
return
≤≤ 
Ok
≤≤ 
(
≤≤ 
$str
≤≤ >
)
≤≤> ?
;
≤≤? @
}
≥≥ 
catch
¥¥ 
(
¥¥ 
	Exception
¥¥ 
ex
¥¥ 
)
¥¥  
{
µµ 
return
∂∂ 

StatusCode
∂∂ !
(
∂∂! "
$num
∂∂" %
,
∂∂% &
$str
∂∂' [
)
∂∂[ \
;
∂∂\ ]
}
∑∑ 
}
∏∏ 	
[
∫∫ 	
HttpGet
∫∫	 
(
∫∫ 
$str
∫∫ 
)
∫∫  
]
∫∫  !
public
ªª 
async
ªª 
Task
ªª 
<
ªª 
IActionResult
ªª '
>
ªª' (
GetPatientBills
ªª) 8
(
ªª8 9
)
ªª9 :
{
ºº 	
var
ΩΩ 
userId
ΩΩ 
=
ΩΩ  
GetUserIdFromToken
ΩΩ +
(
ΩΩ+ ,
)
ΩΩ, -
;
ΩΩ- .
if
ææ 
(
ææ 
userId
ææ 
==
ææ 
null
ææ 
)
ææ 
return
øø 
Unauthorized
øø #
(
øø# $
$str
øø$ 5
)
øø5 6
;
øø6 7
var
¡¡ 
bills
¡¡ 
=
¡¡ 
await
¡¡ 
_patientService
¡¡ -
.
¡¡- .&
GetBillsByPatientIdAsync
¡¡. F
(
¡¡F G
userId
¡¡G M
.
¡¡M N
Value
¡¡N S
)
¡¡S T
;
¡¡T U
return
¬¬ 
Ok
¬¬ 
(
¬¬ 
bills
¬¬ 
)
¬¬ 
;
¬¬ 
}
√√ 	
private
«« 
int
«« 
?
««  
GetUserIdFromToken
«« '
(
««' (
)
««( )
{
»» 	
var
…… 
userIdClaim
…… 
=
…… 
User
…… "
.
……" #
	FindFirst
……# ,
(
……, -

ClaimTypes
……- 7
.
……7 8
NameIdentifier
……8 F
)
……F G
;
……G H
return
   
userIdClaim
   
!=
   !
null
  " &
&&
  ' )
int
  * -
.
  - .
TryParse
  . 6
(
  6 7
userIdClaim
  7 B
.
  B C
Value
  C H
,
  H I
out
  J M
var
  N Q
userId
  R X
)
  X Y
?
  Z [
userId
  \ b
:
  c d
(
  e f
int
  f i
?
  i j
)
  j k
null
  k o
;
  o p
}
ÀÀ 	
}
ÃÃ 
}ÕÕ ∂.
aC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Controllers\UserController.cs
	namespace		 	
AmazeCareAPI		
 
.		 
Controllers		 "
{

 
[ 
Route 

(
 
$str 
) 
] 
[ 
ApiController 
] 
public 

class 
UserController 
:  !
ControllerBase" 0
{ 
private 
readonly 
IUserService %
_userService& 2
;2 3
public 
UserController 
( 
IUserService *
userService+ 6
)6 7
{ 	
_userService 
= 
userService &
;& '
} 	
[ 	
HttpGet	 
( 
$str !
)! "
]" #
public 
async 
Task 
< 
IActionResult '
>' (%
CheckUsernameAvailability) B
(B C
[C D
	FromQueryD M
]M N
stringO U
usernameV ^
)^ _
{ 	
try 
{ 
var 
( 
isAvailable  
,  !
message" )
)) *
=+ ,
await- 2
_userService3 ?
.? @*
CheckUsernameAvailabilityAsync@ ^
(^ _
username_ g
)g h
;h i
return 
Ok 
( 
new 
{ 
Username  (
=) *
username+ 3
,3 4
IsAvailable5 @
=A B
isAvailableC N
,N O
MessageP W
=X Y
messageZ a
}b c
)c d
;d e
} 
catch 
( 
ServiceException #
ex$ &
)& '
{ 
return   

BadRequest   !
(  ! "
ex  " $
.  $ %
Message  % ,
)  , -
;  - .
}!! 
catch"" 
("" 
	Exception"" 
ex"" 
)""  
{## 
return$$ 

StatusCode$$ !
($$! "
$num$$" %
,$$% &
$str$$' `
)$$` a
;$$a b
}%% 
}&& 	
[(( 	
HttpPost((	 
((( 
$str(( 
)(( 
](( 
public)) 
async)) 
Task)) 
<)) 
IActionResult)) '
>))' (
RegisterPatient))) 8
())8 9
[))9 :
FromBody)): B
]))B C"
PatientRegistrationDto))D Z
registrationDto))[ j
)))j k
{** 	
if++ 
(++ 
!++ 

ModelState++ 
.++ 
IsValid++ #
)++# $
return,, 

BadRequest,, !
(,,! "
$str,," J
),,J K
;,,K L
try.. 
{// 
var00 
(00 
isAvailable00  
,00  !
message00" )
)00) *
=00+ ,
await00- 2
_userService003 ?
.00? @*
CheckUsernameAvailabilityAsync00@ ^
(00^ _
registrationDto00_ n
.00n o
Username00o w
)00w x
;00x y
if11 
(11 
!11 
isAvailable11  
)11  !
return22 

BadRequest22 %
(22% &
message22& -
)22- .
;22. /
var44 
user44 
=44 
new44 
User44 #
{55 
Username66 
=66 
registrationDto66 .
.66. /
Username66/ 7
,667 8
PasswordHash77  
=77! "
BCrypt77# )
.77) *
Net77* -
.77- .
BCrypt77. 4
.774 5
HashPassword775 A
(77A B
registrationDto77B Q
.77Q R
Password77R Z
)77Z [
,77[ \
RoleID88 
=88 
$num88 
}99 
;99 
var;; 
patient;; 
=;; 
await;; #
_userService;;$ 0
.;;0 1
RegisterPatient;;1 @
(;;@ A
user;;A E
,;;E F
registrationDto;;G V
.;;V W
FullName;;W _
,;;_ `
registrationDto;;a p
.;;p q
Email;;q v
,;;v w
registrationDto<< #
.<<# $
DateOfBirth<<$ /
,<</ 0
registrationDto<<1 @
.<<@ A
Gender<<A G
,<<G H
registrationDto<<I X
.<<X Y
ContactNumber<<Y f
,<<f g
registrationDto== #
.==# $
Address==$ +
,==+ ,
registrationDto==- <
.==< =
MedicalHistory=== K
)==K L
;==L M
return?? 
CreatedAtAction?? &
(??& '
nameof??' -
(??- .
RegisterPatient??. =
)??= >
,??> ?
new??@ C
{??D E
id??F H
=??I J
patient??K R
.??R S
	PatientID??S \
}??] ^
,??^ _
patient??` g
)??g h
;??h i
}@@ 
catchAA 
(AA 
ServiceExceptionAA #
exAA$ &
)AA& '
{BB 
returnCC 

BadRequestCC !
(CC! "
exCC" $
.CC$ %
MessageCC% ,
)CC, -
;CC- .
}DD 
catchEE 
(EE 
	ExceptionEE 
exEE 
)EE  
{FF 
returnGG 

StatusCodeGG !
(GG! "
$numGG" %
,GG% &
$strGG' Y
)GGY Z
;GGZ [
}HH 
}II 	
}KK 
}LL ¯%
\C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Data\AmazeCareContext.cs
	namespace 	
AmazeCareAPI
 
. 
Data 
{ 
public 

class 
AmazeCareContext !
:" #
	DbContext$ -
{		 
public

 
DbSet

 
<

 
User

 
>

 
Users

  
{

! "
get

# &
;

& '
set

( +
;

+ ,
}

- .
public 
DbSet 
< 
UserRole 
> 
	UserRoles (
{) *
get+ .
;. /
set0 3
;3 4
}5 6
public 
DbSet 
< 
Patient 
> 
Patients &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
public 
DbSet 
< 
Doctor 
> 
Doctors $
{% &
get' *
;* +
set, /
;/ 0
}1 2
public 
DbSet 
< 
DoctorSchedule #
># $
DoctorSchedule% 3
{4 5
get6 9
;9 :
set; >
;> ?
}@ A
public 
DbSet 
< 
Administrator "
>" #
Administrators$ 2
{3 4
get5 8
;8 9
set: =
;= >
}? @
public 
DbSet 
< 
Specialization #
># $
Specializations% 4
{5 6
get7 :
;: ;
set< ?
;? @
}A B
public 
DbSet 
<  
DoctorSpecialization )
>) *!
DoctorSpecializations+ @
{A B
getC F
;F G
setH K
;K L
}M N
public 
DbSet 
< 
Appointment  
>  !
Appointments" .
{/ 0
get1 4
;4 5
set6 9
;9 :
}; <
public 
DbSet 
< 
MedicalRecord "
>" #
MedicalRecords$ 2
{3 4
get5 8
;8 9
set: =
;= >
}? @
public 
DbSet 
< 
Prescription !
>! "
Prescriptions# 0
{1 2
get3 6
;6 7
set8 ;
;; <
}= >
public 
DbSet 
< 
MedicalRecordTest &
>& '
MedicalRecordTests( :
{; <
get= @
;@ A
setB E
;E F
}G H
public 
DbSet 
< "
PrescriptionMedication +
>+ ,#
PrescriptionMedications- D
{E F
getG J
;J K
setL O
;O P
}Q R
public 
DbSet 
< 
Test 
> 
Tests  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
DbSet 
< 

Medication 
>  
Medications! ,
{- .
get/ 2
;2 3
set4 7
;7 8
}9 :
public 
DbSet 
< 
Billing 
> 
Billing %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
public 
AmazeCareContext 
(  
DbContextOptions  0
<0 1
AmazeCareContext1 A
>A B
optionsC J
)J K
:   
base   
(   
options   
)   
{   
}   
	protected"" 
override"" 
void"" 
OnModelCreating""  /
(""/ 0
ModelBuilder""0 <
modelBuilder""= I
)""I J
{## 	
base$$ 
.$$ 
OnModelCreating$$  
($$  !
modelBuilder$$! -
)$$- .
;$$. /
modelBuilder'' 
.'' 
Entity'' 
<''   
DoctorSpecialization''  4
>''4 5
(''5 6
)''6 7
.(( 
HasKey(( 
((( 
ds(( 
=>(( 
new(( !
{((" #
ds(($ &
.((& '
DoctorID((' /
,((/ 0
ds((1 3
.((3 4
SpecializationID((4 D
}((E F
)((F G
;((G H
}++ 	
},, 
}.. †
`C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\AdminRegistrationDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class  
AdminRegistrationDto %
{ 
public 
string 
Username 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
Password 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
FullName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
Email 
{ 
get !
;! "
set# &
;& '
}( )
}		 
}

 è
aC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\AppointmentBookingDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class !
AppointmentBookingDto &
{ 
public 
int 
DoctorID 
{ 
get !
;! "
set# &
;& '
}( )
public 
DateTime 
AppointmentDate '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
public 
string 
Symptoms 
{  
get! $
;$ %
set& )
;) *
}+ ,
}		 
} „
dC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\AppointmentRescheduleDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class $
AppointmentRescheduleDto )
{ 
public 
DateTime 
NewAppointmentDate *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
} 
} È	
dC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\AppointmentWithDoctorDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class $
AppointmentWithDoctorDto )
{ 
public 
int 
AppointmentID  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
int 
	PatientID 
{ 
get "
;" #
set$ '
;' (
}) *
public		 
int		 
DoctorID		 
{		 
get		 !
;		! "
set		# &
;		& '
}		( )
public

 
string

 

DoctorName

  
{

! "
get

# &
;

& '
set

( +
;

+ ,
}

- .
public 
DateTime 
AppointmentDate '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
public 
string 
Status 
{ 
get "
;" #
set$ '
;' (
}) *
} 
} ë
eC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\AppointmentWithPatientDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class %
AppointmentWithPatientDto *
{ 
public 
int 
AppointmentID  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
int 
	PatientID 
{ 
get "
;" #
set$ '
;' (
}) *
public 
DateTime 
AppointmentDate '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
public 
string 
Status 
{ 
get "
;" #
set$ '
;' (
}) *
public		 
string		 
Symptoms		 
{		  
get		! $
;		$ %
set		& )
;		) *
}		+ ,
public 
string 
PatientName !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
string 
MedicalHistory $
{% &
get' *
;* +
set, /
;/ 0
}1 2
} 
} ‚
]C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\BillingDetailsDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class 
BillingDetailsDto "
{ 
public 
int 
	BillingID 
{ 
get "
;" #
set$ '
;' (
}) *
public 
int 
	PatientID 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
PatientName !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
int 
DoctorID 
{ 
get !
;! "
set# &
;& '
}( )
public		 
string		 

DoctorName		  
{		! "
get		# &
;		& '
set		( +
;		+ ,
}		- .
public

 
decimal

 
ConsultationFee

 &
{

' (
get

) ,
;

, -
set

. 1
;

1 2
}

3 4
public 
decimal 
TotalTestsPrice &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
public 
decimal !
TotalMedicationsPrice ,
{- .
get/ 2
;2 3
set4 7
;7 8
}9 :
public 
decimal 

GrandTotal !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
string 
Status 
{ 
get "
;" #
set$ '
;' (
}) *
} 
} ‰	
VC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\BillingDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class 

BillingDto 
{ 
public 
int 
	BillingID 
{ 
get "
;" #
set$ '
;' (
}) *
public 
decimal 
ConsultationFee &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
public 
decimal 
TotalTestsPrice &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
public 
decimal !
TotalMedicationsPrice ,
{- .
get/ 2
;2 3
set4 7
;7 8
}9 :
public		 
decimal		 

GrandTotal		 !
{		" #
get		$ '
;		' (
set		) ,
;		, -
}		. /
public

 
string

 
Status

 
{

 
get

 "
;

" #
set

$ '
;

' (
}

) *
} 
} ¢
bC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\CreateMedicalRecordDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class "
CreateMedicalRecordDto '
{ 
public 
string 
Symptoms 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
PhysicalExamination )
{* +
get, /
;/ 0
set1 4
;4 5
}6 7
public		 
string		 
TreatmentPlan		 #
{		$ %
get		& )
;		) *
set		+ .
;		. /
}		0 1
public

 
DateTime

 
?

 
FollowUpDate

 %
{

& '
get

( +
;

+ ,
set

- 0
;

0 1
}

2 3
public 
List 
< 
int 
> 
TestIDs  
{! "
get# &
;& '
set( +
;+ ,
}- .
=/ 0
new1 4
List5 9
<9 :
int: =
>= >
(> ?
)? @
;@ A
public 
List 
< !
CreatePrescriptionDto )
>) *
Prescriptions+ 8
{9 :
get; >
;> ?
set@ C
;C D
}E F
=G H
newI L
ListM Q
<Q R!
CreatePrescriptionDtoR g
>g h
(h i
)i j
;j k
} 
} ¢
aC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\CreatePrescriptionDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class !
CreatePrescriptionDto &
{ 
public 
int 
MedicationID 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 
Dosage 
{ 
get "
;" #
set$ '
;' (
}) *
public 
int 
DurationDays 
{  !
get" %
;% &
set' *
;* +
}, -
public 
int 
Quantity 
{ 
get !
;! "
set# &
;& '
}( )
}		 
}

 È
]C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\CreateScheduleDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class 
CreateScheduleDto "
{ 
public 
DateTime 
	StartDate !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
DateTime 
EndDate 
{  !
get" %
;% &
set' *
;* +
}, -
} 
} Ä
eC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\CreateUpdateMedicationDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class %
CreateUpdateMedicationDto *
{ 
public 
string 
MedicationName $
{% &
get' *
;* +
set, /
;/ 0
}1 2
public 
decimal 
PricePerUnit #
{$ %
get& )
;) *
set+ .
;. /
}0 1
} 
} Î
_C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\CreateUpdateTestDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class 
CreateUpdateTestDto $
{ 
public 
string 
TestName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
decimal 
	TestPrice  
{! "
get# &
;& '
set( +
;+ ,
}- .
} 
} Ó
cC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\DoctorBillingDetailsDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class #
DoctorBillingDetailsDto (
{ 
public 
int 
	BillingID 
{ 
get "
;" #
set$ '
;' (
}) *
public 
int 
DoctorID 
{ 
get !
;! "
set# &
;& '
}( )
public 
string 

DoctorName  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
int 
	PatientID 
{ 
get "
;" #
set$ '
;' (
}) *
public		 
string		 
PatientName		 !
{		" #
get		$ '
;		' (
set		) ,
;		, -
}		. /
public

 
decimal

 
ConsultationFee

 &
{

' (
get

) ,
;

, -
set

. 1
;

1 2
}

3 4
public 
decimal 
TotalTestsPrice &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
public 
decimal !
TotalMedicationsPrice ,
{- .
get/ 2
;2 3
set4 7
;7 8
}9 :
public 
decimal 

GrandTotal !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
string 
Status 
{ 
get "
;" #
set$ '
;' (
}) *
} 
} º
UC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\DoctorDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class 
	DoctorDto 
{ 
public 
int 
? 
DoctorID 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
FullName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
Email 
{ 
get !
;! "
set# &
;& '
}( )
public 
int 
? 
ExperienceYears #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public		 
string		 
Qualification		 #
{		$ %
get		& )
;		) *
set		+ .
;		. /
}		0 1
public

 
string

 
Designation

 !
{

" #
get

$ '
;

' (
set

) ,
;

, -
}

. /
public 
List 
< 
string 
> 
Specializations +
{, -
get. 1
;1 2
set3 6
;6 7
}8 9
} 
} „
aC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\DoctorRegistrationDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class !
DoctorRegistrationDto &
{ 
public 
string 
Username 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
Password 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
FullName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
Email 
{ 
get !
;! "
set# &
;& '
}( )
public		 
int		 
?		 
ExperienceYears		 #
{		$ %
get		& )
;		) *
set		+ .
;		. /
}		0 1
public

 
string

 
Qualification

 #
{

$ %
get

& )
;

) *
set

+ .
;

. /
}

0 1
public 
string 
Designation !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
List 
< 
int 
> 
SpecializationIds *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
} 
} ü

[C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\DoctorUpdateDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class 
DoctorUpdateDto  
{ 
public 
string 
FullName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
Email 
{ 
get !
;! "
set# &
;& '
}( )
public 
int 
? 
ExperienceYears #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
string 
Qualification #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public		 
string		 
Designation		 !
{		" #
get		$ '
;		' (
set		) ,
;		, -
}		. /
public

 
List

 
<

 
int

 
>

 
SpecializationIds

 *
{

+ ,
get

- 0
;

0 1
set

2 5
;

5 6
}

7 8
} 
} €
XC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\LoginRequest.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class 
LoginRequest 
{ 
public 
string 
Username 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
Password 
{  
get! $
;$ %
set& )
;) *
}+ ,
} 
} Ö
YC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\MedicationDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 
class 
MedicationDto "
{ 	
public 
int 
MedicationID #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
string 
MedicationName (
{) *
get+ .
;. /
set0 3
;3 4
}5 6
public 
decimal 
PricePerUnit '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
}		 	
} 
dC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\PatientBillingDetailsDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class $
PatientBillingDetailsDto )
{ 
public 
int 
	BillingID 
{ 
get "
;" #
set$ '
;' (
}) *
public 
int 
	PatientID 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
PatientName !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
int 
DoctorID 
{ 
get "
;" #
set$ '
;' (
}) *
public		 
string		 

DoctorName		  
{		! "
get		# &
;		& '
set		( +
;		+ ,
}		- .
public

 
decimal

 
ConsultationFee

 &
{

' (
get

) ,
;

, -
set

. 1
;

1 2
}

3 4
public 
decimal 
TotalTestsPrice &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
public 
decimal !
TotalMedicationsPrice ,
{- .
get/ 2
;2 3
set4 7
;7 8
}9 :
public 
decimal 

GrandTotal !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
string 
Status 
{ 
get "
;" #
set$ '
;' (
}) *
} 
} Ì

VC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\PatientDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class 

PatientDto 
{ 
public 
int 
	PatientID 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
FullName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
Email 
{ 
get !
;! "
set# &
;& '
}( )
public 
DateTime 
DateOfBirth #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public		 
string		 
ContactNumber		 #
{		$ %
get		& )
;		) *
set		+ .
;		. /
}		0 1
public

 
string

 
Address

 
{

 
get

  #
;

# $
set

% (
;

( )
}

* +
public 
string 
MedicalHistory $
{% &
get' *
;* +
set, /
;/ 0
}1 2
} 
} ä
cC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\PatientMedicalRecordDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class #
PatientMedicalRecordDto (
{ 
public 
int 
? 
MedicalRecordID #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
DateTime 
AppointmentDate '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
public 
string 

DoctorName  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
string 
Symptoms 
{  
get! $
;$ %
set& )
;) *
}+ ,
public		 
string		 
PhysicalExamination		 )
{		* +
get		, /
;		/ 0
set		1 4
;		4 5
}		6 7
public

 
string

 
TreatmentPlan

 #
{

$ %
get

& )
;

) *
set

+ .
;

. /
}

0 1
public 
DateTime 
? 
FollowUpDate %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
public 
List 
< 
TestDto 
> 
Tests "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
List 
< 
PrescriptionDto #
># $
Prescriptions% 2
{3 4
get5 8
;8 9
set: =
;= >
}? @
public 

BillingDto 
BillingDetails (
{) *
get+ .
;. /
set0 3
;3 4
}5 6
} 
} «
bC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\PatientPersonalInfoDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class "
PatientPersonalInfoDto '
{ 
public 
int 
UserId 
{ 
get 
;  
set! $
;$ %
}& '
public 
string 
Username 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
FullName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
Email 
{ 
get !
;! "
set# &
;& '
}( )
public		 
DateTime		 
?		 
DateOfBirth		 $
{		% &
get		' *
;		* +
set		, /
;		/ 0
}		1 2
public

 
string

 
Gender

 
{

 
get

 "
;

" #
set

$ '
;

' (
}

) *
public 
string 
ContactNumber #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
string 
Address 
{ 
get  #
;# $
set% (
;( )
}* +
public 
string 
MedicalHistory $
{% &
get' *
;* +
set, /
;/ 0
}1 2
} 
} Ò	
hC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\PatientPrescriptionDetailDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class (
PatientPrescriptionDetailDto -
{ 
public 
int 
AppointmentId  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
string 

DoctorName  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
string 
MedicationName $
{% &
get' *
;* +
set, /
;/ 0
}1 2
public 
string 
Dosage 
{ 
get "
;" #
set$ '
;' (
}) *
public		 
int		 
DurationDays		 
{		  !
get		" %
;		% &
set		' *
;		* +
}		, -
public

 
int

 
Quantity

 
{

 
get

 !
;

! "
set

# &
;

& '
}

( )
} 
} Ω
bC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\PatientRegistrationDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class "
PatientRegistrationDto '
{ 
public 
string 
Username 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
Password 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
FullName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
Email 
{ 
get !
;! "
set# &
;& '
}( )
public		 
DateTime		 
DateOfBirth		 #
{		$ %
get		& )
;		) *
set		+ .
;		. /
}		0 1
public

 
string

 
Gender

 
{

 
get

 "
;

" #
set

$ '
;

' (
}

) *
public 
string 
ContactNumber #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
string 
Address 
{ 
get  #
;# $
set% (
;( )
}* +
public 
string 
MedicalHistory $
{% &
get' *
;* +
set, /
;/ 0
}1 2
} 
} ¿
`C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\PatientTestDetailDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class  
PatientTestDetailDto %
{ 
public 
int 
AppointmentId  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
string 

DoctorName  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
int 
TestId 
{ 
get 
;  
set! $
;$ %
}& '
public 
string 
TestName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public		 
decimal		 
	TestPrice		  
{		! "
get		# &
;		& '
set		( +
;		+ ,
}		- .
}

 
} Ÿ	
aC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\PrescriptionCreateDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class !
PrescriptionCreateDto &
{ 
[ 	
Required	 
] 
public 
int 
RecordID 
{ 
get !
;! "
set# &
;& '
}( )
[

 	
Required

	 
]

 
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
MedicationName $
{% &
get' *
;* +
set, /
;/ 0
}1 2
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
Dosage 
{ 
get "
;" #
set$ '
;' (
}) *
public 
int 
DurationDays 
{  !
get" %
;% &
set' *
;* +
}, -
} 
} ◊	
[C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\PrescriptionDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class 
PrescriptionDto  
{ 
public 
int 
MedicationID 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 
MedicationName $
{% &
get' *
;* +
set, /
;/ 0
}1 2
public 
string 
Dosage 
{ 
get "
;" #
set$ '
;' (
}) *
public 
int 
DurationDays 
{  !
get" %
;% &
set' *
;* +
}, -
public		 
int		 
Quantity		 
{		 
get		 !
;		! "
set		# &
;		& '
}		( )
public 
decimal 

TotalPrice !
{" #
get$ '
;' (
set) ,
;, -
}. /
} 
} ´
WC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\ScheduleDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class 
ScheduleDto 
{ 
public 
int 

ScheduleID 
{ 
get  #
;# $
set% (
;( )
}* +
public 
int 
DoctorID 
{ 
get !
;! "
set# &
;& '
}( )
public 
DateTime 
	StartDate !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
DateTime 
EndDate 
{  !
get" %
;% &
set' *
;* +
}, -
public		 
string		 
Status		 
{		 
get		 "
;		" #
set		$ '
;		' (
}		) *
}

 
} ›	
aC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\ScheduleWithDoctorDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class !
ScheduleWithDoctorDto &
{ 
public 
int 

ScheduleID 
{ 
get  #
;# $
set% (
;( )
}* +
public 
int 
DoctorID 
{ 
get !
;! "
set# &
;& '
}( )
public 
string 

DoctorName  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
DateTime 
	StartDate !
{" #
get$ '
;' (
set) ,
;, -
}. /
public		 
DateTime		 
EndDate		 
{		  !
get		" %
;		% &
set		' *
;		* +
}		, -
public

 
string

 
Status

 
{

 
get

 "
;

" #
set

$ '
;

' (
}

) *
} 
} Ù
]C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\SpecializationDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class 
SpecializationDto "
{ 
public 
int 
SpecializationID #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
string 
SpecializationName (
{) *
get+ .
;. /
set0 3
;3 4
}5 6
} 
} Í
SC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\TestDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class 
TestDto 
{ 
public 
int 
TestID 
{ 
get 
;  
set! $
;$ %
}& '
public 
string 
TestName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
decimal 
	TestPrice  
{! "
get# &
;& '
set( +
;+ ,
}- .
} 
}		 ˘
bC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\UpdateMedicalRecordDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class "
UpdateMedicalRecordDto '
{ 
public 
string 
? 
Symptoms 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 
? 
PhysicalExamination *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
public 
string 
? 
TreatmentPlan $
{% &
get' *
;* +
set, /
;/ 0
}1 2
public 
DateTime 
? 
FollowUpDate %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
}		 
} Õ
aC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\UpdatePersonalInfoDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class !
UpdatePersonalInfoDto &
{ 
public 
string 
Username 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
? 
NewPassword "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
string 
FullName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
Email 
{ 
get !
;! "
set# &
;& '
}( )
public		 
DateTime		 
DateOfBirth		 #
{		$ %
get		& )
;		) *
set		+ .
;		. /
}		0 1
public

 
string

 
Gender

 
{

 
get

 "
;

" #
set

$ '
;

' (
}

) *
public 
string 
ContactNumber #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
string 
Address 
{ 
get  #
;# $
set% (
;( )
}* +
public 
string 
MedicalHistory $
{% &
get' *
;* +
set, /
;/ 0
}1 2
} 
} É
]C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\UpdateScheduleDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class 
UpdateScheduleDto "
{ 
public 
DateTime 
	StartDate !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
DateTime 
EndDate 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 
Status 
{ 
get "
;" #
set$ '
;' (
}) *
} 
}		 Ê
_C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Dtos\UserRegistrationDto.cs
	namespace 	
AmazeCareAPI
 
. 
Dtos 
{ 
public 

class 
UserRegistrationDto $
{ 
[ 	
Required	 
] 
[ 	
	MaxLength	 
( 
$num 
) 
] 
public		 
string		 
Username		 
{		  
get		! $
;		$ %
set		& )
;		) *
}		+ ,
[ 	
Required	 
] 
[ 	
	MinLength	 
( 
$num 
) 
] 
public 
string 
Password 
{  
get! $
;$ %
set& )
;) *
}+ ,
[ 	
Required	 
] 
public 
int 
RoleID 
{ 
get 
;  
set! $
;$ %
}& '
} 
} Ï
nC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Exceptions\AppointmentNotFoundException.cs
	namespace 	
AmazeCareAPI
 
. 

Exceptions !
{ 
public 

class (
AppointmentNotFoundException -
:- .
	Exception/ 8
{ 
public (
AppointmentNotFoundException +
(+ ,
string, 2
message3 :
); <
:= >
base? C
(C D
messageD K
)K L
{M N
}O P
} 
} ‡
jC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Exceptions\BillingNotFoundException.cs
	namespace 	
AmazeCareAPI
 
. 

Exceptions !
{ 
public 

class $
BillingNotFoundException )
:* +
	Exception, 5
{ 
public $
BillingNotFoundException '
(' (
string( .
message/ 6
)6 7
:8 9
base: >
(> ?
message? F
)F G
{H I
}J K
} 
} ›
iC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Exceptions\DoctorNotFoundException.cs
	namespace 	
AmazeCareAPI
 
. 

Exceptions !
{ 
public 

class #
DoctorNotFoundException (
:) *
	Exception+ 4
{ 
public #
DoctorNotFoundException &
(& '
string' -
message. 5
)5 6
:7 8
base9 =
(= >
message> E
)E F
{G H
}I J
} 
} À
cC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Exceptions\NotFoundException.cs
	namespace 	
AmazeCareAPI
 
. 

Exceptions !
{ 
public 

class 
NotFoundException "
:# $
	Exception% .
{ 
public 
NotFoundException  
(  !
string! '
message( /
)/ 0
:1 2
base3 7
(7 8
message8 ?
)? @
{A B
}C D
} 
} ‡
jC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Exceptions\PatientNotFoundException.cs
	namespace 	
AmazeCareAPI
 
. 

Exceptions !
{ 
public 

class $
PatientNotFoundException )
:* +
	Exception, 5
{ 
public $
PatientNotFoundException '
(' (
string( .
message/ 6
)6 7
:8 9
base: >
(> ?
message? F
)F G
{H I
}J K
} 
} µ
bC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Exceptions\ServiceException.cs
	namespace 	
AmazeCareAPI
 
. 

Exceptions !
{ 
public 

class 
ServiceException !
:" #
	Exception$ -
{ 
public 
ServiceException 
(  
string  &
message' .
,. /
	Exception0 9
innerException: H
)H I
:J K
baseL P
(P Q
messageQ X
,X Y
innerExceptionZ h
)h i
{j k
}l m
} 
} ◊
gC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Exceptions\UserNotFoundException.cs
	namespace 	
AmazeCareAPI
 
. 

Exceptions !
{ 
public 

class !
UserNotFoundException &
:' (
	Exception) 2
{ 
public !
UserNotFoundException $
($ %
string% +
message, 3
)3 4
:5 6
base7 ;
(; <
message< C
)C D
{E F
}G H
} 
} ˙	
[C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\Administrator.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class 
Administrator 
{ 
[ 	
Key	 
] 
public 
int 
AdminID 
{ 
get  
;  !
set" %
;% &
}' (
public

 
int

 
?

 
UserID

 
{

 
get

  
;

  !
set

" %
;

% &
}

' (
[ 	
Required	 
] 
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
FullName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
Email 
{ 
get !
;! "
set# &
;& '
}( )
public 
User 
User 
{ 
get 
; 
set  #
;# $
}% &
} 
} Ü
YC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\Appointment.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class 
Appointment 
{ 
[		 	
Key			 
]		 
public

 
int

 
AppointmentID

  
{

! "
get

# &
;

& '
set

( +
;

+ ,
}

- .
public 
int 
	PatientID 
{ 
get "
;" #
set$ '
;' (
}) *
public 
int 
DoctorID 
{ 
get !
;! "
set# &
;& '
}( )
public 
DateTime 
AppointmentDate '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
[ 	
Required	 
] 
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
Status 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
Symptoms 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
Patient 
Patient 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
Doctor 
Doctor 
{ 
get "
;" #
set$ '
;' (
}) *
public 
MedicalRecord 
? 
MedicalRecord +
{, -
get. 1
;1 2
set3 6
;6 7
}8 9
} 
}   ˇ
UC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\Billing.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class 
Billing 
{ 
[ 	
Key	 
] 
public		 
int		 
	BillingID		 
{		 
get		 "
;		" #
set		$ '
;		' (
}		) *
[ 	

ForeignKey	 
( 
$str 
) 
] 
public 
int 
	PatientID 
{ 
get "
;" #
set$ '
;' (
}) *
[ 	

ForeignKey	 
( 
$str 
) 
] 
public 
int 
DoctorID 
{ 
get !
;! "
set# &
;& '
}( )
[ 	

ForeignKey	 
( 
$str #
)# $
]$ %
public 
int 
MedicalRecordID "
{# $
get% (
;( )
set* -
;- .
}/ 0
[ 	
Column	 
( 
TypeName 
= 
$str +
)+ ,
], -
public 
decimal 
ConsultationFee &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
[ 	
Column	 
( 
TypeName 
= 
$str +
)+ ,
], -
public 
decimal 
TotalTestsPrice &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
[ 	
Column	 
( 
TypeName 
= 
$str +
)+ ,
], -
public 
decimal !
TotalMedicationsPrice ,
{- .
get/ 2
;2 3
set4 7
;7 8
}9 :
[ 	
Column	 
( 
TypeName 
= 
$str +
)+ ,
], -
public   
decimal   

GrandTotal   !
{  " #
get  $ '
;  ' (
set  * -
;  - .
}  / 0
["" 	
	MaxLength""	 
("" 
$num"" 
)"" 
]"" 
public## 
string## 
Status## 
{## 
get## "
;##" #
set##$ '
;##' (
}##) *
=##+ ,
$str##- 6
;##6 7
public%% 
Patient%% 
Patient%% 
{%%  
get%%! $
;%%$ %
set%%& )
;%%) *
}%%+ ,
public&& 
Doctor&& 
Doctor&& 
{&& 
get&& "
;&&" #
set&&$ '
;&&' (
}&&) *
public'' 
MedicalRecord'' 
MedicalRecord'' *
{''+ ,
get''- 0
;''0 1
set''2 5
;''5 6
}''7 8
public(( 
Prescription(( 
Prescription(( (
{(() *
get((+ .
;((. /
set((0 3
;((3 4
}((5 6
public++ 
void++ 
CalculateGrandTotal++ '
(++' (
)++( )
{,, 	

GrandTotal-- 
=-- 
ConsultationFee-- (
+--) *
TotalTestsPrice--+ :
+--; <!
TotalMedicationsPrice--= R
;--R S
}.. 	
}// 
}00 …
TC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\Doctor.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class 
Doctor 
{ 
[		 	
Key			 
]		 
public

 
int

 
DoctorID

 
{

 
get

 !
;

! "
set

# &
;

& '
}

( )
public 
int 
? 
UserID 
{ 
get  
;  !
set" %
;% &
}' (
[ 	
Required	 
] 
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
FullName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
Email 
{ 
get !
;! "
set# &
;& '
}( )
public 
int 
? 
ExperienceYears #
{$ %
get& )
;) *
set+ .
;. /
}0 1
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
Qualification #
{$ %
get& )
;) *
set+ .
;. /
}0 1
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
Designation !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
User 
User 
{ 
get 
; 
set  #
;# $
}% &
public 
ICollection 
<  
DoctorSpecialization /
>/ 0!
DoctorSpecializations1 F
{G H
getI L
;L M
setN Q
;Q R
}S T
public 
ICollection 
< 
Billing "
>" #
Billings$ ,
{- .
get/ 2
;2 3
set4 7
;7 8
}9 :
public!! 
ICollection!! 
<!! 
DoctorSchedule!! )
>!!) *
DoctorSchedule!!+ 9
{!!: ;
get!!< ?
;!!? @
set!!A D
;!!D E
}!!F G
}## 
}%% Æ

\C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\DoctorSchedule.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class 
DoctorSchedule 
{ 
[ 	
Key	 
] 
public 
int 

ScheduleID 
{ 
get  #
;# $
set% (
;( )
}* +
public		 
int		 
DoctorID		 
{		 
get		 !
;		! "
set		# &
;		& '
}		( )
public

 
DateTime

 
	StartDate

 !
{

" #
get

$ '
;

' (
set

) ,
;

, -
}

. /
public 
DateTime 
EndDate 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 
Status 
{ 
get "
;" #
set$ '
;' (
}) *
=+ ,
$str- 8
;8 9
public 
Doctor 
Doctor 
{ 
get "
;" #
set$ '
;' (
}) *
} 
} õ
bC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\DoctorSpecialization.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class  
DoctorSpecialization %
{ 
public		 
int		 
DoctorID		 
{		 
get		 !
;		! "
set		# &
;		& '
}		( )
public 
int 
SpecializationID #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
Specialization 
Specialization ,
{- .
get/ 2
;2 3
set4 7
;7 8
}9 :
} 
} –

VC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\JwtToken.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class 
JwtToken 
{ 
[		 	
Key			 
]		 
public

 
int

 
TokenID

 
{

 
get

  
;

  !
set

" %
;

% &
}

' (
public 
int 
UserID 
{ 
get 
;  
set! $
;$ %
}& '
[ 	
Required	 
] 
public 
string 
Token 
{ 
get !
;! "
set# &
;& '
}( )
public 
DateTime 
ExpirationDate &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
public 
bool 
	IsRevoked 
{ 
get  #
;# $
set% (
;( )
}* +
=, -
false. 3
;3 4
public 
User 
User 
{ 
get 
; 
set  #
;# $
}% &
} 
} ™"
[C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\MedicalRecord.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class 
MedicalRecord 
{		 
[

 	
Key

	 
]

 
public 
int 
RecordID 
{ 
get !
;! "
set# &
;& '
}( )
[ 	

ForeignKey	 
( 
$str !
)! "
]" #
public 
int 
AppointmentID  
{! "
get# &
;& '
set( +
;+ ,
}- .
[ 	

ForeignKey	 
( 
$str 
) 
] 
public 
int 
DoctorID 
{ 
get !
;! "
set# &
;& '
}( )
[ 	

ForeignKey	 
( 
$str 
) 
] 
public 
int 
	PatientID 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
Symptoms 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
PhysicalExamination )
{* +
get, /
;/ 0
set1 4
;4 5
}6 7
public 
string 
TreatmentPlan #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
DateTime 
? 
FollowUpDate %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
[ 	
Column	 
( 
TypeName 
= 
$str +
)+ ,
], -
public 
decimal 

TotalPrice !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
Appointment 
Appointment &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
public 
Doctor 
Doctor 
{ 
get "
;" #
set$ '
;' (
}) *
public   
Patient   
Patient   
{    
get  ! $
;  $ %
set  & )
;  ) *
}  + ,
public!! 
ICollection!! 
<!! 
MedicalRecordTest!! ,
>!!, -
MedicalRecordTests!!. @
{!!A B
get!!C F
;!!F G
set!!H K
;!!K L
}!!M N
[%% 	

ForeignKey%%	 
(%% 
$str%% 
)%% 
]%% 
public&& 
int&& 
?&& 
	BillingID&& 
{&& 
get&&  #
;&&# $
set&&% (
;&&( )
}&&* +
public'' 
Billing'' 
Billing'' 
{''  
get''! $
;''$ %
set''& )
;'') *
}''+ ,
public)) 
ICollection)) 
<)) 
Prescription)) '
>))' (
Prescriptions))) 6
{))7 8
get))9 <
;))< =
set))> A
;))A B
}))C D
=))E F
new))G J
List))K O
<))O P
Prescription))P \
>))\ ]
())] ^
)))^ _
;))_ `
public-- 

void-- 
CalculateTotalPrice-- #
(--# $
)--$ %
{.. 	

TotalPrice// 
=// 
$num// 
;// 
if00 
(00 
MedicalRecordTests00 "
!=00# %
null00& *
)00* +
{11 
foreach22 
(22 
var22 

recordTest22 '
in22( *
MedicalRecordTests22+ =
)22= >
{33 

TotalPrice44 
+=44 !

recordTest44" ,
.44, -
Test44- 1
.441 2
	TestPrice442 ;
;44; <
}55 
}66 
}77 	
}88 
}99 ∑

_C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\MedicalRecordTest.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class 
MedicalRecordTest "
{ 
[ 	
Key	 
] 
public		 
int		 
RecordTestID		 
{		  !
get		" %
;		% &
set		' *
;		* +
}		, -
[ 	

ForeignKey	 
( 
$str #
)# $
]$ %
public 
int 
RecordID 
{ 
get !
;! "
set# &
;& '
}( )
[ 	

ForeignKey	 
( 
$str 
) 
] 
public 
int 
TestID 
{ 
get 
;  
set! $
;$ %
}& '
public 
Test 
Test 
{ 
get 
; 
set  #
;# $
}% &
public 
MedicalRecord 
MedicalRecord *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
} 
} ƒ

XC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\Medication.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class 

Medication 
{ 
[ 	
Key	 
] 
public		 
int		 
MedicationID		 
{		  !
get		" %
;		% &
set		' *
;		* +
}		, -
[ 	
Required	 
] 
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
MedicationName $
{% &
get' *
;* +
set, /
;/ 0
}1 2
[ 	
Column	 
( 
TypeName 
= 
$str +
)+ ,
], -
public 
decimal 
PricePerUnit #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
ICollection 
< "
PrescriptionMedication 1
>1 2#
PrescriptionMedications3 J
{K L
getM P
;P Q
setR U
;U V
}W X
} 
} å
UC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\Patient.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class 
Patient 
{ 
[		 	
Key			 
]		 
public

 
int

 
	PatientID

 
{

 
get

 "
;

" #
set

$ '
;

' (
}

) *
public 
int 
? 
UserID 
{ 
get  
;  !
set" %
;% &
}' (
[ 	
Required	 
] 
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
FullName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
DateTime 
DateOfBirth #
{$ %
get& )
;) *
set+ .
;. /
}0 1
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
Gender 
{ 
get "
;" #
set$ '
;' (
}) *
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
ContactNumber #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
string 
Email 
{ 
get !
;! "
set# &
;& '
}( )
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
Address 
{ 
get  #
;# $
set% (
;( )
}* +
public   
string   
MedicalHistory   $
{  % &
get  ' *
;  * +
set  , /
;  / 0
}  1 2
public"" 
User"" 
User"" 
{"" 
get"" 
;"" 
set""  #
;""# $
}""% &
public$$ 
ICollection$$ 
<$$ 
Billing$$ "
>$$" #
Billings$$$ ,
{$$- .
get$$/ 2
;$$2 3
set$$4 7
;$$7 8
}$$9 :
}%% 
}'' ä
ZC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\Prescription.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class 
Prescription 
{ 
[		 	
Key			 
]		 
public

 
int

 
PrescriptionID

 !
{

" #
get

$ '
;

' (
set

) ,
;

, -
}

. /
[ 	

ForeignKey	 
( 
$str #
)# $
]$ %
public 
int 
RecordID 
{ 
get !
;! "
set# &
;& '
}( )
public 
int 
MedicationID 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 
MedicationName $
{% &
get' *
;* +
set, /
;/ 0
}1 2
public 
string 
Dosage 
{ 
get "
;" #
set$ '
;' (
}) *
public 
int 
DurationDays 
{  !
get" %
;% &
set' *
;* +
}, -
public 
int 
Quantity 
{ 
get !
;! "
set# &
;& '
}( )
[ 	
Column	 
( 
TypeName 
= 
$str +
)+ ,
], -
public 
decimal 

TotalPrice !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
MedicalRecord 
MedicalRecord *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
public 
ICollection 
< "
PrescriptionMedication 1
>1 2#
PrescriptionMedications3 J
{K L
getM P
;P Q
setR U
;U V
}W X
[ 	

ForeignKey	 
( 
$str 
) 
] 
public 
int 
? 
	BillingID 
{ 
get  #
;# $
set% (
;( )
}* +
public 
Billing 
Billing 
{  
get! $
;$ %
set& )
;) *
}+ ,
public"" 
void"" 
CalculateTotalPrice"" '
(""' (
)""( )
{## 	

TotalPrice$$ 
=$$ 
$num$$ 
;$$ 
if%% 
(%% #
PrescriptionMedications%% '
!=%%( *
null%%+ /
)%%/ 0
{&& 
foreach'' 
('' 
var'' "
prescriptionMedication'' 3
in''4 6#
PrescriptionMedications''7 N
)''N O
{(( 

TotalPrice)) 
+=)) !"
prescriptionMedication))" 8
.))8 9
Quantity))9 A
*))B C"
prescriptionMedication))D Z
.))Z [

Medication))[ e
.))e f
PricePerUnit))f r
;))r s
}** 
}++ 
},, 	
}-- 
}.. ¸
dC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\PrescriptionMedication.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class "
PrescriptionMedication '
{ 
[ 	
Key	 
] 
public		 
int		 $
PrescriptionMedicationID		 +
{		, -
get		. 1
;		1 2
set		3 6
;		6 7
}		8 9
[ 	

ForeignKey	 
( 
$str "
)" #
]# $
public 
int 
PrescriptionID !
{" #
get$ '
;' (
set) ,
;, -
}. /
[ 	

ForeignKey	 
( 
$str  
)  !
]! "
public 
int 
MedicationID 
{  !
get" %
;% &
set' *
;* +
}, -
public 
int 
Quantity 
{ 
get !
;! "
set# &
;& '
}( )
public 
Prescription 
Prescription (
{) *
get+ .
;. /
set0 3
;3 4
}5 6
public 

Medication 

Medication $
{% &
get' *
;* +
set, /
;/ 0
}1 2
} 
} ®
\C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\Specialization.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class 
Specialization 
{ 
[ 	
Key	 
] 
public 
int 
SpecializationID #
{$ %
get& )
;) *
set+ .
;. /
}0 1
[

 	
Required

	 
]

 
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
SpecializationName (
{) *
get+ .
;. /
set0 3
;3 4
}5 6
public 
ICollection 
<  
DoctorSpecialization /
>/ 0!
DoctorSpecializations1 F
{G H
getI L
;L M
setN Q
;Q R
}S T
} 
} ü

RC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\Test.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class 
Test 
{ 
[ 	
Key	 
] 
public		 
int		 
TestID		 
{		 
get		 
;		  
set		! $
;		$ %
}		& '
[ 	
Required	 
] 
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
TestName 
{  
get! $
;$ %
set& )
;) *
}+ ,
[ 	
Column	 
( 
TypeName 
= 
$str +
)+ ,
], -
public 
decimal 
	TestPrice  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
ICollection 
< 
MedicalRecordTest ,
>, -
MedicalRecordTests. @
{A B
getC F
;F G
setH K
;K L
}M N
} 
} ó

RC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\User.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public		 

class		 
User		 
{

 
[ 	
Key	 
] 
public 
int 
UserID 
{ 
get 
;  
set! $
;$ %
}& '
[ 	
Required	 
] 
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
Username 
{  
get! $
;$ %
set& )
;) *
}+ ,
[ 	
Required	 
] 
public 
string 
PasswordHash "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
int 
RoleID 
{ 
get 
;  
set! $
;$ %
}& '
public 
UserRole 
Role 
{ 
get "
;" #
set$ '
;' (
}) *
} 
} ö
VC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Models\UserRole.cs
	namespace 	
AmazeCareAPI
 
. 
Models 
{ 
public 

class 
UserRole 
{ 
[ 	
Key	 
] 
public		 
int		 
RoleID		 
{		 
get		 
;		  
set		! $
;		$ %
}		& '
[ 	
Required	 
] 
[ 	
	MaxLength	 
( 
$num 
) 
] 
public 
string 
RoleName 
{  
get! $
;$ %
set& )
;) *
}+ ,
} 
} Üa
NC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Program.cs
var 
builder 
= 
WebApplication 
. 
CreateBuilder *
(* +
args+ /
)/ 0
;0 1
builder 
. 
Services 
. 
AddDbContext 
< 
AmazeCareContext .
>. /
(/ 0
options0 7
=>8 :
options 
. 
UseSqlServer 
( 
builder  
.  !
Configuration! .
.. /
GetConnectionString/ B
(B C
$strC P
)P Q
)Q R
)R S
;S T
builder 
. 
Services 
. 
	AddScoped 
< 
IPatientRepository -
,- .
PatientRepository/ @
>@ A
(A B
)B C
;C D
builder 
. 
Services 
. 
	AddScoped 
< 
IDoctorRepository ,
,, -
DoctorRepository. >
>> ?
(? @
)@ A
;A B
builder 
. 
Services 
. 
	AddScoped 
< 
IAdminRepository +
,+ ,
AdminRepository- <
>< =
(= >
)> ?
;? @
builder 
. 
Services 
. 
	AddScoped 
< 
IUserRepository *
,* +
UserRepository, :
>: ;
(; <
)< =
;= >
builder 
. 
Services 
. 
	AddScoped 
< 
IPatientService *
,* +
PatientService, :
>: ;
(; <
)< =
;= >
builder 
. 
Services 
. 
	AddScoped 
< 
IDoctorService )
,* +
DoctorService, 9
>9 :
(: ;
); <
;< =
builder 
. 
Services 
. 
	AddScoped 
< !
AuthenticationService 0
>0 1
(1 2
)2 3
;3 4
builder 
. 
Services 
. 
	AddScoped 
< 
IUserService '
,' (
UserService( 3
>3 4
(4 5
)5 6
;6 7
builder 
. 
Services 
. 
	AddScoped 
< 
IAdminService (
,( )
AdminService) 5
>5 6
(6 7
)7 8
;8 9
builder"" 
."" 
Services"" 
."" 
AddAuthentication"" "
(""" #
options""# *
=>""+ -
{## 
options$$ 
.$$ %
DefaultAuthenticateScheme$$ %
=$$& '
JwtBearerDefaults$$( 9
.$$9 : 
AuthenticationScheme$$: N
;$$N O
options%% 
.%% "
DefaultChallengeScheme%% "
=%%# $
JwtBearerDefaults%%% 6
.%%6 7 
AuthenticationScheme%%7 K
;%%K L
}&& 
)&& 
.'' 
AddJwtBearer'' 
('' 
options'' 
=>'' 
{(( 
options)) 
.))  
RequireHttpsMetadata))  
=))! "
false))# (
;))( )
options** 
.** 
	SaveToken** 
=** 
true** 
;** 
options++ 
.++ %
TokenValidationParameters++ %
=++& '
new++( +%
TokenValidationParameters++, E
{,, 
ValidateIssuer-- 
=-- 
true-- 
,-- 
ValidateAudience.. 
=.. 
true.. 
,..  
ValidateLifetime// 
=// 
true// 
,//  $
ValidateIssuerSigningKey00  
=00! "
true00# '
,00' (
ValidIssuer11 
=11 
builder11 
.11 
Configuration11 +
[11+ ,
$str11, 8
]118 9
,119 :
ValidAudience22 
=22 
builder22 
.22  
Configuration22  -
[22- .
$str22. <
]22< =
,22= >
IssuerSigningKey33 
=33 
new33  
SymmetricSecurityKey33 3
(333 4
Encoding334 <
.33< =
UTF833= A
.33A B
GetBytes33B J
(33J K
builder33K R
.33R S
Configuration33S `
[33` a
$str33a j
]33j k
)33k l
)33l m
}44 
;44 
}55 
)55 
;55 
builder77 
.77 
Services77 
.77 
AddSwaggerGen77 
(77 
c77  
=>77! #
{88 
c99 
.99 

SwaggerDoc99 
(99 
$str99 
,99 
new99 
	Microsoft99 $
.99$ %
OpenApi99% ,
.99, -
Models99- 3
.993 4
OpenApiInfo994 ?
{99@ A
Title99B G
=99H I
$str99J X
,99X Y
Version99Z a
=99b c
$str99d h
}99i j
)99j k
;99k l
c;; 
.;; !
AddSecurityDefinition;; 
(;; 
$str;; $
,;;$ %
new;;& )
	Microsoft;;* 3
.;;3 4
OpenApi;;4 ;
.;;; <
Models;;< B
.;;B C!
OpenApiSecurityScheme;;C X
{<< 
Description== 
=== 
$str== 2
,==2 3
Name>> 
=>> 
$str>> 
,>> 
In?? 

=?? 
	Microsoft?? 
.?? 
OpenApi?? 
.?? 
Models?? %
.??% &
ParameterLocation??& 7
.??7 8
Header??8 >
,??> ?
Type@@ 
=@@ 
	Microsoft@@ 
.@@ 
OpenApi@@  
.@@  !
Models@@! '
.@@' (
SecuritySchemeType@@( :
.@@: ;
Http@@; ?
,@@? @
BearerFormatAA 
=AA 
$strAA 
,AA 
SchemeBB 
=BB 
$strBB 
}CC 
)CC 
;CC 
cEE 
.EE "
AddSecurityRequirementEE 
(EE 
newEE  
	MicrosoftEE! *
.EE* +
OpenApiEE+ 2
.EE2 3
ModelsEE3 9
.EE9 :&
OpenApiSecurityRequirementEE: T
{FF 
{GG 	
newHH 
	MicrosoftHH 
.HH 
OpenApiHH !
.HH! "
ModelsHH" (
.HH( )!
OpenApiSecuritySchemeHH) >
{II 
	ReferenceJJ 
=JJ 
newJJ 
	MicrosoftJJ  )
.JJ) *
OpenApiJJ* 1
.JJ1 2
ModelsJJ2 8
.JJ8 9
OpenApiReferenceJJ9 I
{KK 
TypeLL 
=LL 
	MicrosoftLL $
.LL$ %
OpenApiLL% ,
.LL, -
ModelsLL- 3
.LL3 4
ReferenceTypeLL4 A
.LLA B
SecuritySchemeLLB P
,LLP Q
IdMM 
=MM 
$strMM !
}NN 
}OO 
,OO 
ArrayPP 
.PP 
EmptyPP 
<PP 
stringPP 
>PP 
(PP  
)PP  !
}QQ 	
}RR 
)RR 
;RR 
}SS 
)SS 
;SS 
builderUU 
.UU 
ServicesUU 
.UU 
AddCorsUU 
(UU 
optionsUU  
=>UU! #
{VV 
optionsWW 
.WW 
	AddPolicyWW 
(WW 
$strWW %
,WW% &
builderXX 
=>XX 
{YY 	
builderZZ 
.ZZ 
WithOriginsZZ 
(ZZ  
$strZZ  7
)ZZ7 8
.[[ 
AllowAnyMethod[[ "
([[" #
)[[# $
.\\ 
AllowAnyHeader\\ "
(\\" #
)\\# $
.]] 
AllowCredentials]] $
(]]$ %
)]]% &
.^^ 
SetIsOriginAllowed^^ &
(^^& '
origin^^' -
=>^^. 0
true^^1 5
)^^5 6
.__ 
WithExposedHeaders__ &
(__& '
$str__' 5
,__5 6
$str__7 F
)__F G
;__G H
}`` 	
)``	 

;``
 
}aa 
)aa 
;aa 
buildercc 
.cc 
Servicescc 
.cc 

AddLoggingcc 
(cc 
optionscc #
=>cc$ &
{dd 
optionsee 
.ee 

AddConsoleee 
(ee 
)ee 
;ee 
optionsff 
.ff 
AddDebugff 
(ff 
)ff 
;ff 
}gg 
)gg 
;gg 
builderhh 
.hh 
Logginghh 
.hh 
ClearProvidershh 
(hh 
)hh  
;hh  !
builderii 
.ii 
Loggingii 
.ii 

AddConsoleii 
(ii 
)ii 
;ii 
builderjj 
.jj 
Loggingjj 
.jj 
AddDebugjj 
(jj 
)jj 
;jj 
builderll 
.ll 
Servicesll 
.ll 
AddAuthorizationll !
(ll! "
)ll" #
;ll# $
buildermm 
.mm 
Servicesmm 
.mm 
AddControllersmm 
(mm  
)mm  !
.nn 
AddJsonOptionsnn 
(nn 
optionsnn 
=>nn 
{oo 
optionspp 
.pp !
JsonSerializerOptionspp %
.pp% &
ReferenceHandlerpp& 6
=pp7 8
Systempp9 ?
.pp? @
Textpp@ D
.ppD E
JsonppE I
.ppI J
SerializationppJ W
.ppW X
ReferenceHandlerppX h
.pph i
IgnoreCyclesppi u
;ppu v
optionsqq 
.qq !
JsonSerializerOptionsqq %
.qq% &

Convertersqq& 0
.qq0 1
Addqq1 4
(qq4 5
newqq5 8#
JsonStringEnumConverterqq9 P
(qqP Q
)qqQ R
)qqR S
;qqS T
}rr 
)rr 
;rr 
buildertt 
.tt 
Servicestt 
.tt #
AddEndpointsApiExplorertt (
(tt( )
)tt) *
;tt* +
builderuu 
.uu 
Servicesuu 
.uu 
AddSwaggerGenuu 
(uu 
)uu  
;uu  !
varww 
appww 
=ww 	
builderww
 
.ww 
Buildww 
(ww 
)ww 
;ww 
ifyy 
(yy 
appyy 
.yy 
Environmentyy 
.yy 
IsDevelopmentyy !
(yy! "
)yy" #
)yy# $
{zz 
app{{ 
.{{ 

UseSwagger{{ 
({{ 
){{ 
;{{ 
app|| 
.|| 
UseSwaggerUI|| 
(|| 
)|| 
;|| 
}}} 
app 
. 

UseRouting 
( 
) 
; 
appÄÄ 
.
ÄÄ 
UseCors
ÄÄ 
(
ÄÄ 
$str
ÄÄ 
)
ÄÄ 
;
ÄÄ 
appÅÅ 
.
ÅÅ !
UseHttpsRedirection
ÅÅ 
(
ÅÅ 
)
ÅÅ 
;
ÅÅ 
appÉÉ 
.
ÉÉ 
UseAuthentication
ÉÉ 
(
ÉÉ 
)
ÉÉ 
;
ÉÉ 
appÑÑ 
.
ÑÑ 
UseAuthorization
ÑÑ 
(
ÑÑ 
)
ÑÑ 
;
ÑÑ 
appáá 
.
áá 
MapControllers
áá 
(
áá 
)
áá 
;
áá 
appââ 
.
ââ 
Run
ââ 
(
ââ 
)
ââ 	
;
ââ	 
˚¿
cC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Repositories\AdminRepository.cs
	namespace 	
AmazeCareAPI
 
. 
Repositories #
{ 
public 

class 
AdminRepository  
:! "
IAdminRepository# 3
{ 
private 
readonly 
AmazeCareContext )
_context* 2
;2 3
public 
AdminRepository 
( 
AmazeCareContext /
context0 7
)7 8
{ 	
_context 
= 
context 
; 
} 	
public 
async 
Task 
< 
bool 
> $
IsUsernameAvailableAsync  8
(8 9
string9 ?
username@ H
)H I
{ 	
return 
! 
await 
_context "
." #
Users# (
.( )
AnyAsync) 1
(1 2
u2 3
=>4 6
u7 8
.8 9
Username9 A
==B D
usernameE M
)M N
;N O
} 	
public 
async 
Task 
< 
User 
> 
CreateUserAsync  /
(/ 0
User0 4
user5 9
)9 :
{ 	
_context 
. 
Users 
. 
Add 
( 
user #
)# $
;$ %
await 
_context 
. 
SaveChangesAsync +
(+ ,
), -
;- .
return 
user 
; 
}   	
public"" 
async"" 
Task"" 
<"" 
Administrator"" '
>""' (
CreateAdminAsync"") 9
(""9 :
Administrator"": G
admin""H M
)""M N
{## 	
_context$$ 
.$$ 
Administrators$$ #
.$$# $
Add$$$ '
($$' (
admin$$( -
)$$- .
;$$. /
await%% 
_context%% 
.%% 
SaveChangesAsync%% +
(%%+ ,
)%%, -
;%%- .
return&& 
admin&& 
;&& 
}'' 	
public)) 
async)) 
Task)) 
<)) 
Doctor))  
>))  !
CreateDoctorAsync))" 3
())3 4
Doctor))4 :
doctor)); A
,))A B
IEnumerable))C N
<))N O
int))O R
>))R S
specializationIds))T e
)))e f
{** 	
_context++ 
.++ 
Doctors++ 
.++ 
Add++  
(++  !
doctor++! '
)++' (
;++( )
await,, 
_context,, 
.,, 
SaveChangesAsync,, +
(,,+ ,
),,, -
;,,- .
if.. 
(.. 
specializationIds.. !
!=.." $
null..% )
)..) *
{// 
var00 !
doctorSpecializations00 )
=00* +
specializationIds00, =
.00= >
Select00> D
(00D E
id00E G
=>00H J
new00K N 
DoctorSpecialization00O c
{11 
DoctorID22 
=22 
doctor22 %
.22% &
DoctorID22& .
,22. /
SpecializationID33 $
=33% &
id33' )
}44 
)44 
;44 
_context55 
.55 !
DoctorSpecializations55 .
.55. /
AddRange55/ 7
(557 8!
doctorSpecializations558 M
)55M N
;55N O
await66 
_context66 
.66 
SaveChangesAsync66 /
(66/ 0
)660 1
;661 2
}77 
return99 
doctor99 
;99 
}:: 	
public<< 
async<< 
Task<< 
<<< 
Doctor<<  
><<  !
GetDoctorByIdAsync<<" 4
(<<4 5
int<<5 8
doctorId<<9 A
)<<A B
{== 	
return>> 
await>> 
_context>> !
.>>! "
Doctors>>" )
.?? 
Include?? 
(?? 
d?? 
=>?? 
d?? 
.??  !
DoctorSpecializations??  5
)??5 6
.@@ 
ThenInclude@@ 
(@@ 
ds@@ 
=>@@  "
ds@@# %
.@@% &
Specialization@@& 4
)@@4 5
.AA 
FirstOrDefaultAsyncAA $
(AA$ %
dAA% &
=>AA' )
dAA* +
.AA+ ,
DoctorIDAA, 4
==AA5 7
doctorIdAA8 @
)AA@ A
;AAA B
}BB 	
publicDD 
asyncDD 
TaskDD 
<DD 
boolDD 
>DD 
UpdateDoctorAsyncDD  1
(DD1 2
DoctorDD2 8
doctorDD9 ?
,DD? @
IEnumerableDDA L
<DDL M
intDDM P
>DDP Q
specializationIdsDDR c
)DDc d
{EE 	
varFF 
existingDoctorFF 
=FF  
awaitFF! &
_contextFF' /
.FF/ 0
DoctorsFF0 7
.GG 
IncludeGG 
(GG 
dGG 
=>GG 
dGG 
.GG  !
DoctorSpecializationsGG  5
)GG5 6
.HH 
FirstOrDefaultAsyncHH $
(HH$ %
dHH% &
=>HH' )
dHH* +
.HH+ ,
DoctorIDHH, 4
==HH5 7
doctorHH8 >
.HH> ?
DoctorIDHH? G
)HHG H
;HHH I
ifJJ 
(JJ 
existingDoctorJJ 
==JJ !
nullJJ" &
)JJ& '
returnJJ( .
falseJJ/ 4
;JJ4 5
existingDoctorMM 
.MM 
FullNameMM #
=MM$ %
doctorMM& ,
.MM, -
FullNameMM- 5
;MM5 6
existingDoctorNN 
.NN 
EmailNN  
=NN! "
doctorNN# )
.NN) *
EmailNN* /
;NN/ 0
existingDoctorOO 
.OO 
ExperienceYearsOO *
=OO+ ,
doctorOO- 3
.OO3 4
ExperienceYearsOO4 C
;OOC D
existingDoctorPP 
.PP 
QualificationPP (
=PP) *
doctorPP+ 1
.PP1 2
QualificationPP2 ?
;PP? @
existingDoctorQQ 
.QQ 
DesignationQQ &
=QQ' (
doctorQQ) /
.QQ/ 0
DesignationQQ0 ;
;QQ; <
varTT #
existingSpecializationsTT '
=TT( )
_contextTT* 2
.TT2 3!
DoctorSpecializationsTT3 H
.UU 
WhereUU 
(UU 
dsUU 
=>UU 
dsUU 
.UU  
DoctorIDUU  (
==UU) +
doctorUU, 2
.UU2 3
DoctorIDUU3 ;
)UU; <
;UU< =
_contextVV 
.VV !
DoctorSpecializationsVV *
.VV* +
RemoveRangeVV+ 6
(VV6 7#
existingSpecializationsVV7 N
)VVN O
;VVO P
ifXX 
(XX 
specializationIdsXX !
!=XX" $
nullXX% )
)XX) *
{YY 
varZZ 
newSpecializationsZZ &
=ZZ' (
specializationIdsZZ) :
.ZZ: ;
SelectZZ; A
(ZZA B
idZZB D
=>ZZE G
newZZH K 
DoctorSpecializationZZL `
{[[ 
DoctorID\\ 
=\\ 
doctor\\ %
.\\% &
DoctorID\\& .
,\\. /
SpecializationID]] $
=]]% &
id]]' )
}^^ 
)^^ 
;^^ 
_context__ 
.__ !
DoctorSpecializations__ .
.__. /
AddRange__/ 7
(__7 8
newSpecializations__8 J
)__J K
;__K L
}`` 
awaitbb 
_contextbb 
.bb 
SaveChangesAsyncbb +
(bb+ ,
)bb, -
;bb- .
returncc 
truecc 
;cc 
}dd 	
publicff 
asyncff 
Taskff 
<ff 
boolff 
>ff 
DeleteDoctorAsyncff  1
(ff1 2
intff2 5
userIdff6 <
,ff< =
intff> A
doctorIdffB J
)ffJ K
{gg 	
varhh 
doctorhh 
=hh 
awaithh 
_contexthh '
.hh' (
Doctorshh( /
.hh/ 0
FirstOrDefaultAsynchh0 C
(hhC D
dhhD E
=>hhF H
dhhI J
.hhJ K
DoctorIDhhK S
==hhT V
doctorIdhhW _
&&hh` b
dhhc d
.hhd e
UserIDhhe k
==hhl n
userIdhho u
)hhu v
;hhv w
ifii 
(ii 
doctorii 
==ii 
nullii 
)ii 
returnii  &
falseii' ,
;ii, -
doctorkk 
.kk 
UserIDkk 
=kk 
nullkk  
;kk  !
doctorll 
.ll 
Designationll 
=ll  
$strll! +
;ll+ ,
_contextmm 
.mm 
Doctorsmm 
.mm 
Updatemm #
(mm# $
doctormm$ *
)mm* +
;mm+ ,
varoo 
appointmentsoo 
=oo 
awaitoo $
_contextoo% -
.oo- .
Appointmentsoo. :
.pp 
Wherepp 
(pp 
app 
=>pp 
app 
.pp 
DoctorIDpp &
==pp' )
doctorIdpp* 2
&&pp3 5
app6 7
.pp7 8
Statuspp8 >
==pp? A
$strppB M
)ppM N
.qq 
ToListAsyncqq 
(qq 
)qq 
;qq 
foreachss 
(ss 
varss 
appointmentss $
inss% '
appointmentsss( 4
)ss4 5
{tt 
appointmentuu 
.uu 
Statusuu "
=uu# $
$struu% /
;uu/ 0
}vv 
_contextxx 
.xx 
Appointmentsxx !
.xx! "
UpdateRangexx" -
(xx- .
appointmentsxx. :
)xx: ;
;xx; <
varyy 
useryy 
=yy 
awaityy 
_contextyy %
.yy% &
Usersyy& +
.yy+ ,
	FindAsyncyy, 5
(yy5 6
userIdyy6 <
)yy< =
;yy= >
if{{ 
({{ 
user{{ 
!={{ 
null{{ 
){{ 
{|| 
_context}} 
.}} 
Users}} 
.}} 
Remove}} %
(}}% &
user}}& *
)}}* +
;}}+ ,
}~~ 
await
ÄÄ 
_context
ÄÄ 
.
ÄÄ 
SaveChangesAsync
ÄÄ +
(
ÄÄ+ ,
)
ÄÄ, -
;
ÄÄ- .
return
ÅÅ 
true
ÅÅ 
;
ÅÅ 
}
ÇÇ 	
public
ÜÜ 
async
ÜÜ 
Task
ÜÜ 
<
ÜÜ 
bool
ÜÜ 
>
ÜÜ  
UpdatePatientAsync
ÜÜ  2
(
ÜÜ2 3
Patient
ÜÜ3 :
patient
ÜÜ; B
)
ÜÜB C
{
áá 	
var
àà 
existingPatient
àà 
=
àà  !
await
àà" '
_context
àà( 0
.
àà0 1
Patients
àà1 9
.
àà9 :!
FirstOrDefaultAsync
àà: M
(
ààM N
p
ààN O
=>
ààP R
p
ààS T
.
ààT U
	PatientID
ààU ^
==
àà_ a
patient
ààb i
.
àài j
	PatientID
ààj s
)
ààs t
;
ààt u
if
ââ 
(
ââ 
existingPatient
ââ 
==
ââ  "
null
ââ# '
)
ââ' (
return
ââ) /
false
ââ0 5
;
ââ5 6
existingPatient
ãã 
.
ãã 
FullName
ãã $
=
ãã% &
patient
ãã' .
.
ãã. /
FullName
ãã/ 7
;
ãã7 8
existingPatient
åå 
.
åå 
Email
åå !
=
åå" #
patient
åå$ +
.
åå+ ,
Email
åå, 1
;
åå1 2
existingPatient
çç 
.
çç 
DateOfBirth
çç '
=
çç( )
patient
çç* 1
.
çç1 2
DateOfBirth
çç2 =
;
çç= >
existingPatient
éé 
.
éé 
ContactNumber
éé )
=
éé* +
patient
éé, 3
.
éé3 4
ContactNumber
éé4 A
;
ééA B
existingPatient
èè 
.
èè 
Address
èè #
=
èè$ %
patient
èè& -
.
èè- .
Address
èè. 5
;
èè5 6
existingPatient
êê 
.
êê 
MedicalHistory
êê *
=
êê+ ,
patient
êê- 4
.
êê4 5
MedicalHistory
êê5 C
;
êêC D
await
íí 
_context
íí 
.
íí 
SaveChangesAsync
íí +
(
íí+ ,
)
íí, -
;
íí- .
return
ìì 
true
ìì 
;
ìì 
}
îî 	
public
ññ 
async
ññ 
Task
ññ 
<
ññ 
bool
ññ 
>
ññ  
DeletePatientAsync
ññ  2
(
ññ2 3
int
ññ3 6
userId
ññ7 =
,
ññ= >
int
ññ? B
	patientId
ññC L
)
ññL M
{
óó 	
var
òò 
patient
òò 
=
òò 
await
òò 
_context
òò  (
.
òò( )
Patients
òò) 1
.
òò1 2!
FirstOrDefaultAsync
òò2 E
(
òòE F
p
òòF G
=>
òòH J
p
òòK L
.
òòL M
	PatientID
òòM V
==
òòW Y
	patientId
òòZ c
&&
òòd f
p
òòg h
.
òòh i
UserID
òòi o
==
òòp r
userId
òòs y
)
òòy z
;
òòz {
if
ôô 
(
ôô 
patient
ôô 
==
ôô 
null
ôô 
)
ôô  
return
ôô! '
false
ôô( -
;
ôô- .
patient
õõ 
.
õõ 
UserID
õõ 
=
õõ 
null
õõ !
;
õõ! "
_context
úú 
.
úú 
Patients
úú 
.
úú 
Update
úú $
(
úú$ %
patient
úú% ,
)
úú, -
;
úú- .
var
ûû 
appointments
ûû 
=
ûû 
await
ûû $
_context
ûû% -
.
ûû- .
Appointments
ûû. :
.
üü 
Where
üü 
(
üü 
a
üü 
=>
üü 
a
üü 
.
üü 
	PatientID
üü '
==
üü( *
	patientId
üü+ 4
&&
üü5 7
a
üü8 9
.
üü9 :
Status
üü: @
==
üüA C
$str
üüD O
)
üüO P
.
†† 
ToListAsync
†† 
(
†† 
)
†† 
;
†† 
foreach
¢¢ 
(
¢¢ 
var
¢¢ 
appointment
¢¢ $
in
¢¢% '
appointments
¢¢( 4
)
¢¢4 5
{
££ 
appointment
§§ 
.
§§ 
Status
§§ "
=
§§# $
$str
§§% /
;
§§/ 0
}
•• 
_context
ßß 
.
ßß 
Appointments
ßß !
.
ßß! "
UpdateRange
ßß" -
(
ßß- .
appointments
ßß. :
)
ßß: ;
;
ßß; <
var
©© 
user
©© 
=
©© 
await
©© 
_context
©© %
.
©©% &
Users
©©& +
.
©©+ ,
	FindAsync
©©, 5
(
©©5 6
userId
©©6 <
)
©©< =
;
©©= >
if
™™ 
(
™™ 
user
™™ 
!=
™™ 
null
™™ 
)
™™ 
{
´´ 
_context
¨¨ 
.
¨¨ 
Users
¨¨ 
.
¨¨ 
Remove
¨¨ %
(
¨¨% &
user
¨¨& *
)
¨¨* +
;
¨¨+ ,
}
≠≠ 
await
ØØ 
_context
ØØ 
.
ØØ 
SaveChangesAsync
ØØ +
(
ØØ+ ,
)
ØØ, -
;
ØØ- .
return
∞∞ 
true
∞∞ 
;
∞∞ 
}
±± 	
public
≥≥ 
async
≥≥ 
Task
≥≥ 
<
≥≥ 
Appointment
≥≥ %
?
≥≥% &
>
≥≥& '(
RescheduleAppointmentAsync
≥≥( B
(
≥≥B C
Appointment
≥≥C N
appointment
≥≥O Z
,
≥≥Z [
DateTime
≥≥\ d
newDate
≥≥e l
)
≥≥l m
{
¥¥ 	
appointment
µµ 
.
µµ 
AppointmentDate
µµ '
=
µµ( )
newDate
µµ* 1
;
µµ1 2
_context
∂∂ 
.
∂∂ 
Appointments
∂∂ !
.
∂∂! "
Update
∂∂" (
(
∂∂( )
appointment
∂∂) 4
)
∂∂4 5
;
∂∂5 6
await
∑∑ 
_context
∑∑ 
.
∑∑ 
SaveChangesAsync
∑∑ +
(
∑∑+ ,
)
∑∑, -
;
∑∑- .
return
∏∏ 
appointment
∏∏ 
;
∏∏ 
}
ππ 	
public
ΩΩ 
async
ΩΩ 
Task
ΩΩ 
<
ΩΩ 
bool
ΩΩ 
>
ΩΩ '
UpdateDoctorScheduleAsync
ΩΩ  9
(
ΩΩ9 :
int
ΩΩ: =
doctorId
ΩΩ> F
,
ΩΩF G
int
ΩΩH K

scheduleId
ΩΩL V
,
ΩΩV W
DateTime
ΩΩX `
newStartDate
ΩΩa m
,
ΩΩm n
DateTime
ΩΩo w

newEndDateΩΩx Ç
)ΩΩÇ É
{
ææ 	
var
øø 
schedule
øø 
=
øø 
await
øø  
_context
øø! )
.
øø) *
DoctorSchedule
øø* 8
.
¿¿ !
FirstOrDefaultAsync
¿¿ $
(
¿¿$ %
h
¿¿% &
=>
¿¿' )
h
¿¿* +
.
¿¿+ ,

ScheduleID
¿¿, 6
==
¿¿7 9

scheduleId
¿¿: D
&&
¿¿E G
h
¿¿H I
.
¿¿I J
DoctorID
¿¿J R
==
¿¿S U
doctorId
¿¿V ^
)
¿¿^ _
;
¿¿_ `
if
¬¬ 
(
¬¬ 
schedule
¬¬ 
==
¬¬ 
null
¬¬  
)
¬¬  !
return
¬¬" (
false
¬¬) .
;
¬¬. /
schedule
ƒƒ 
.
ƒƒ 
	StartDate
ƒƒ 
=
ƒƒ  
newStartDate
ƒƒ! -
;
ƒƒ- .
schedule
≈≈ 
.
≈≈ 
EndDate
≈≈ 
=
≈≈ 

newEndDate
≈≈ )
;
≈≈) *
await
«« 
_context
«« 
.
«« 
SaveChangesAsync
«« +
(
««+ ,
)
««, -
;
««- .
return
»» 
true
»» 
;
»» 
}
…… 	
public
ÀÀ 
async
ÀÀ 
Task
ÀÀ 
<
ÀÀ 
bool
ÀÀ 
>
ÀÀ '
CancelDoctorScheduleAsync
ÀÀ  9
(
ÀÀ9 :
int
ÀÀ: =
doctorId
ÀÀ> F
,
ÀÀF G
int
ÀÀH K

scheduleId
ÀÀL V
)
ÀÀV W
{
ÃÃ 	
var
ÕÕ 
schedule
ÕÕ 
=
ÕÕ 
await
ÕÕ  
_context
ÕÕ! )
.
ÕÕ) *
DoctorSchedule
ÕÕ* 8
.
ŒŒ !
FirstOrDefaultAsync
ŒŒ $
(
ŒŒ$ %
h
ŒŒ% &
=>
ŒŒ' )
h
ŒŒ* +
.
ŒŒ+ ,

ScheduleID
ŒŒ, 6
==
ŒŒ7 9

scheduleId
ŒŒ: D
&&
ŒŒE G
h
ŒŒH I
.
ŒŒI J
DoctorID
ŒŒJ R
==
ŒŒS U
doctorId
ŒŒV ^
)
ŒŒ^ _
;
ŒŒ_ `
if
–– 
(
–– 
schedule
–– 
==
–– 
null
––  
)
––  !
return
––" (
false
––) .
;
––. /
schedule
““ 
.
““ 
Status
““ 
=
““ 
$str
““ )
;
““) *
await
”” 
_context
”” 
.
”” 
SaveChangesAsync
”” +
(
””+ ,
)
””, -
;
””- .
return
‘‘ 
true
‘‘ 
;
‘‘ 
}
’’ 	
public
◊◊ 
async
◊◊ 
Task
◊◊ 
<
◊◊ 
Doctor
◊◊  
>
◊◊  !/
!GetDoctorWithSpecializationsAsync
◊◊" C
(
◊◊C D
int
◊◊D G
doctorId
◊◊H P
)
◊◊P Q
{
ÿÿ 	
return
ŸŸ 
await
ŸŸ 
_context
ŸŸ !
.
ŸŸ! "
Doctors
ŸŸ" )
.
⁄⁄ 
Include
⁄⁄ 
(
⁄⁄ 
d
⁄⁄ 
=>
⁄⁄ 
d
⁄⁄ 
.
⁄⁄  #
DoctorSpecializations
⁄⁄  5
)
⁄⁄5 6
.
€€ !
FirstOrDefaultAsync
€€ $
(
€€$ %
d
€€% &
=>
€€' )
d
€€* +
.
€€+ ,
DoctorID
€€, 4
==
€€5 7
doctorId
€€8 @
)
€€@ A
;
€€A B
}
‹‹ 	
public
ﬁﬁ 
async
ﬁﬁ 
Task
ﬁﬁ .
 UpdateDoctorSpecializationsAsync
ﬁﬁ :
(
ﬁﬁ: ;
int
ﬁﬁ; >
doctorId
ﬁﬁ? G
,
ﬁﬁG H
IEnumerable
ﬁﬁI T
<
ﬁﬁT U
int
ﬁﬁU X
>
ﬁﬁX Y
specializationIds
ﬁﬁZ k
)
ﬁﬁk l
{
ﬂﬂ 	
var
‡‡ %
existingSpecializations
‡‡ '
=
‡‡( )
_context
‡‡* 2
.
‡‡2 3#
DoctorSpecializations
‡‡3 H
.
‡‡H I
Where
‡‡I N
(
‡‡N O
ds
‡‡O Q
=>
‡‡R T
ds
‡‡U W
.
‡‡W X
DoctorID
‡‡X `
==
‡‡a c
doctorId
‡‡d l
)
‡‡l m
;
‡‡m n
_context
·· 
.
·· #
DoctorSpecializations
·· *
.
··* +
RemoveRange
··+ 6
(
··6 7%
existingSpecializations
··7 N
)
··N O
;
··O P
foreach
„„ 
(
„„ 
var
„„ 
specializationId
„„ )
in
„„* ,
specializationIds
„„- >
)
„„> ?
{
‰‰ 
_context
ÂÂ 
.
ÂÂ #
DoctorSpecializations
ÂÂ .
.
ÂÂ. /
Add
ÂÂ/ 2
(
ÂÂ2 3
new
ÂÂ3 6"
DoctorSpecialization
ÂÂ7 K
{
ÊÊ 
DoctorID
ÁÁ 
=
ÁÁ 
doctorId
ÁÁ '
,
ÁÁ' (
SpecializationID
ËË $
=
ËË% &
specializationId
ËË' 7
}
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}
ÎÎ 	
public
ÌÌ 
async
ÌÌ 
Task
ÌÌ 
<
ÌÌ 
Doctor
ÌÌ  
>
ÌÌ  !)
GetDoctorByIdAndUserIdAsync
ÌÌ" =
(
ÌÌ= >
int
ÌÌ> A
doctorId
ÌÌB J
,
ÌÌJ K
int
ÌÌL O
userId
ÌÌP V
)
ÌÌV W
{
ÓÓ 	
return
ÔÔ 
await
ÔÔ 
_context
ÔÔ !
.
ÔÔ! "
Doctors
ÔÔ" )
.
ÔÔ) *!
FirstOrDefaultAsync
ÔÔ* =
(
ÔÔ= >
d
ÔÔ> ?
=>
ÔÔ@ B
d
ÔÔC D
.
ÔÔD E
DoctorID
ÔÔE M
==
ÔÔN P
doctorId
ÔÔQ Y
&&
ÔÔZ \
d
ÔÔ] ^
.
ÔÔ^ _
UserID
ÔÔ_ e
==
ÔÔf h
userId
ÔÔi o
)
ÔÔo p
;
ÔÔp q
}
 	
public
ÚÚ 
async
ÚÚ 
Task
ÚÚ 
<
ÚÚ 
List
ÚÚ 
<
ÚÚ 
Appointment
ÚÚ *
>
ÚÚ* +
>
ÚÚ+ ,+
GetScheduledAppointmentsAsync
ÚÚ- J
(
ÚÚJ K
int
ÚÚK N
doctorId
ÚÚO W
)
ÚÚW X
{
ÛÛ 	
return
ÙÙ 
await
ÙÙ 
_context
ÙÙ !
.
ÙÙ! "
Appointments
ÙÙ" .
.
ıı 
Where
ıı 
(
ıı 
a
ıı 
=>
ıı 
a
ıı 
.
ıı 
DoctorID
ıı &
==
ıı' )
doctorId
ıı* 2
&&
ıı3 5
a
ıı6 7
.
ıı7 8
Status
ıı8 >
==
ıı? A
$str
ııB M
)
ııM N
.
ˆˆ 
ToListAsync
ˆˆ 
(
ˆˆ 
)
ˆˆ 
;
ˆˆ 
}
˜˜ 	
public
˘˘ 
async
˘˘ 
Task
˘˘ 
DeleteUserAsync
˘˘ )
(
˘˘) *
int
˘˘* -
userId
˘˘. 4
)
˘˘4 5
{
˙˙ 	
var
˚˚ 
user
˚˚ 
=
˚˚ 
await
˚˚ 
_context
˚˚ %
.
˚˚% &
Users
˚˚& +
.
˚˚+ ,
	FindAsync
˚˚, 5
(
˚˚5 6
userId
˚˚6 <
)
˚˚< =
;
˚˚= >
if
¸¸ 
(
¸¸ 
user
¸¸ 
!=
¸¸ 
null
¸¸ 
)
¸¸ 
{
˝˝ 
_context
˛˛ 
.
˛˛ 
Users
˛˛ 
.
˛˛ 
Remove
˛˛ %
(
˛˛% &
user
˛˛& *
)
˛˛* +
;
˛˛+ ,
}
ˇˇ 
}
ÄÄ 	
public
ÇÇ 
async
ÇÇ 
Task
ÇÇ 
<
ÇÇ 
Patient
ÇÇ !
>
ÇÇ! "!
GetPatientByIdAsync
ÇÇ# 6
(
ÇÇ6 7
int
ÇÇ7 :
	patientId
ÇÇ; D
)
ÇÇD E
{
ÉÉ 	
return
ÑÑ 
await
ÑÑ 
_context
ÑÑ !
.
ÑÑ! "
Patients
ÑÑ" *
.
ÑÑ* +!
FirstOrDefaultAsync
ÑÑ+ >
(
ÑÑ> ?
p
ÑÑ? @
=>
ÑÑA C
p
ÑÑD E
.
ÑÑE F
	PatientID
ÑÑF O
==
ÑÑP R
	patientId
ÑÑS \
)
ÑÑ\ ]
;
ÑÑ] ^
}
ÖÖ 	
public
ÜÜ 
async
ÜÜ 
Task
ÜÜ 
<
ÜÜ 
Patient
ÜÜ !
>
ÜÜ! "*
GetPatientByIdAndUserIdAsync
ÜÜ# ?
(
ÜÜ? @
int
ÜÜ@ C
	patientId
ÜÜD M
,
ÜÜM N
int
ÜÜO R
userId
ÜÜS Y
)
ÜÜY Z
{
áá 	
return
àà 
await
àà 
_context
àà !
.
àà! "
Patients
àà" *
.
àà* +!
FirstOrDefaultAsync
àà+ >
(
àà> ?
p
àà? @
=>
ààA C
p
ààD E
.
ààE F
	PatientID
ààF O
==
ààP R
	patientId
ààS \
&&
àà] _
p
àà` a
.
ààa b
UserID
ààb h
==
àài k
userId
ààl r
)
ààr s
;
ààs t
}
ââ 	
public
ãã 
async
ãã 
Task
ãã 
<
ãã 
List
ãã 
<
ãã 
Appointment
ãã *
>
ãã* +
>
ãã+ ,6
(GetScheduledAppointmentsByPatientIdAsync
ãã- U
(
ããU V
int
ããV Y
	patientId
ããZ c
)
ããc d
{
åå 	
return
çç 
await
çç 
_context
çç !
.
çç! "
Appointments
çç" .
.
éé 
Where
éé 
(
éé 
a
éé 
=>
éé 
a
éé 
.
éé 
	PatientID
éé '
==
éé( *
	patientId
éé+ 4
&&
éé5 7
a
éé8 9
.
éé9 :
Status
éé: @
==
ééA C
$str
ééD O
)
ééO P
.
èè 
ToListAsync
èè 
(
èè 
)
èè 
;
èè 
}
êê 	
public
ëë 
async
ëë 
Task
ëë 
<
ëë 
Appointment
ëë %
>
ëë% &%
GetAppointmentByIdAsync
ëë' >
(
ëë> ?
int
ëë? B
appointmentId
ëëC P
)
ëëP Q
{
íí 	
return
ìì 
await
ìì 
_context
ìì !
.
ìì! "
Appointments
ìì" .
.
îî 
Include
îî 
(
îî 
a
îî 
=>
îî 
a
îî 
.
îî  
Patient
îî  '
)
îî' (
.
ïï 
Include
ïï 
(
ïï 
a
ïï 
=>
ïï 
a
ïï 
.
ïï  
Doctor
ïï  &
)
ïï& '
.
ññ !
FirstOrDefaultAsync
ññ $
(
ññ$ %
a
ññ% &
=>
ññ' )
a
ññ* +
.
ññ+ ,
AppointmentID
ññ, 9
==
ññ: <
appointmentId
ññ= J
)
ññJ K
;
ññK L
}
óó 	
public
ôô 
async
ôô 
Task
ôô 
<
ôô 
Appointment
ôô %
>
ôô% &/
!GetAppointmentWithDoctorByIdAsync
ôô' H
(
ôôH I
int
ôôI L
appointmentId
ôôM Z
)
ôôZ [
{
öö 	
return
õõ 
await
õõ 
_context
õõ !
.
õõ! "
Appointments
õõ" .
.
úú 
Include
úú 
(
úú 
a
úú 
=>
úú 
a
úú 
.
úú  
Doctor
úú  &
)
úú& '
.
ùù !
FirstOrDefaultAsync
ùù $
(
ùù$ %
a
ùù% &
=>
ùù' )
a
ùù* +
.
ùù+ ,
AppointmentID
ùù, 9
==
ùù: <
appointmentId
ùù= J
)
ùùJ K
;
ùùK L
}
ûû 	
public
†† 
async
†† 
Task
†† 
<
†† 
bool
†† 
>
†† %
IsDoctorOnScheduleAsync
††  7
(
††7 8
int
††8 ;
doctorId
††< D
,
††D E
DateTime
††F N
appointmentDate
††O ^
)
††^ _
{
°° 	
return
¢¢ 
await
¢¢ 
_context
¢¢ !
.
¢¢! "
DoctorSchedule
¢¢" 0
.
££ 
AnyAsync
££ 
(
££ 
h
££ 
=>
££ 
h
££  
.
££  !
DoctorID
££! )
==
££* ,
doctorId
££- 5
&&
££6 8
h
££9 :
.
££: ;
Status
££; A
==
££B D
$str
££E P
&&
££Q S
appointmentDate
££T c
>=
££d f
h
££g h
.
££h i
	StartDate
££i r
&&
££s u
appointmentDate££v Ö
<=££Ü à
h££â ä
.££ä ã
EndDate££ã í
)££í ì
;££ì î
}
§§ 	
public
•• 
async
•• 
Task
•• 
<
•• 
DoctorSchedule
•• (
>
••( )-
GetScheduleByIdAndDoctorIdAsync
••* I
(
••I J
int
••J M

scheduleId
••N X
,
••X Y
int
••Z ]
doctorId
••^ f
)
••f g
{
¶¶ 	
return
ßß 
await
ßß 
_context
ßß !
.
ßß! "
DoctorSchedule
ßß" 0
.
®® !
FirstOrDefaultAsync
®® $
(
®®$ %
h
®®% &
=>
®®' )
h
®®* +
.
®®+ ,

ScheduleID
®®, 6
==
®®7 9

scheduleId
®®: D
&&
®®E G
h
®®H I
.
®®I J
DoctorID
®®J R
==
®®S U
doctorId
®®V ^
)
®®^ _
;
®®_ `
}
©© 	
public
´´ 
async
´´ 
Task
´´ 
<
´´ 
IEnumerable
´´ %
<
´´% &
Specialization
´´& 4
>
´´4 5
>
´´5 6(
GetAllSpecializationsAsync
´´7 Q
(
´´Q R
)
´´R S
{
¨¨ 	
return
≠≠ 
await
≠≠ 
_context
≠≠ !
.
≠≠! "
Specializations
≠≠" 1
.
ÆÆ 
Include
ÆÆ 
(
ÆÆ 
s
ÆÆ 
=>
ÆÆ 
s
ÆÆ 
.
ÆÆ  #
DoctorSpecializations
ÆÆ  5
)
ÆÆ5 6
.
ØØ 
ToListAsync
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
}
∞∞ 	
public
≤≤ 
async
≤≤ 
Task
≤≤ 
<
≤≤ 
IEnumerable
≤≤ %
<
≤≤% &
DoctorSchedule
≤≤& 4
>
≤≤4 5
>
≤≤5 60
"GetSchedulesWithDoctorDetailsAsync
≤≤7 Y
(
≤≤Y Z
int
≤≤Z ]
doctorId
≤≤^ f
)
≤≤f g
{
≥≥ 	
return
¥¥ 
await
¥¥ 
_context
¥¥ !
.
¥¥! "
DoctorSchedule
¥¥" 0
.
µµ 
Include
µµ 
(
µµ 
ds
µµ 
=>
µµ 
ds
µµ !
.
µµ! "
Doctor
µµ" (
)
µµ( )
.
∂∂ 
Where
∂∂ 
(
∂∂ 
ds
∂∂ 
=>
∂∂ 
ds
∂∂ 
.
∂∂  
DoctorID
∂∂  (
==
∂∂) +
doctorId
∂∂, 4
)
∂∂4 5
.
∑∑ 
ToListAsync
∑∑ 
(
∑∑ 
)
∑∑ 
;
∑∑ 
}
∏∏ 	
public
∫∫ 
async
∫∫ 
Task
∫∫ 
<
∫∫ 
DoctorSchedule
∫∫ (
?
∫∫( )
>
∫∫) *"
GetScheduleByIdAsync
∫∫+ ?
(
∫∫? @
int
∫∫@ C

scheduleId
∫∫D N
)
∫∫N O
{
ªª 	
return
ºº 
await
ºº 
_context
ºº !
.
ºº! "
DoctorSchedule
ºº" 0
.
ΩΩ 
Include
ΩΩ 
(
ΩΩ 
ds
ΩΩ 
=>
ΩΩ 
ds
ΩΩ !
.
ΩΩ! "
Doctor
ΩΩ" (
)
ΩΩ( )
.
ææ !
FirstOrDefaultAsync
ææ $
(
ææ$ %
ds
ææ% '
=>
ææ( *
ds
ææ+ -
.
ææ- .

ScheduleID
ææ. 8
==
ææ9 ;

scheduleId
ææ< F
)
ææF G
;
ææG H
}
øø 	
public
¡¡ 
async
¡¡ 
Task
¡¡ !
UpdateScheduleAsync
¡¡ -
(
¡¡- .
DoctorSchedule
¡¡. <
schedule
¡¡= E
)
¡¡E F
{
¬¬ 	
_context
√√ 
.
√√ 
DoctorSchedule
√√ #
.
√√# $
Update
√√$ *
(
√√* +
schedule
√√+ 3
)
√√3 4
;
√√4 5
await
ƒƒ 
_context
ƒƒ 
.
ƒƒ 
SaveChangesAsync
ƒƒ +
(
ƒƒ+ ,
)
ƒƒ, -
;
ƒƒ- .
}
≈≈ 	
public
«« 
async
«« 
Task
«« 
<
«« 
IEnumerable
«« %
<
««% &
Billing
««& -
>
««- .
>
««. /-
GetBillingDetailsWithNamesAsync
««0 O
(
««O P
)
««P Q
{
»» 	
return
…… 
await
…… 
_context
…… !
.
……! "
Billing
……" )
.
   
Include
   
(
   
b
   
=>
   
b
   
.
    
Doctor
    &
)
  & '
.
ÀÀ 
Include
ÀÀ 
(
ÀÀ 
b
ÀÀ 
=>
ÀÀ 
b
ÀÀ 
.
ÀÀ  
Patient
ÀÀ  '
)
ÀÀ' (
.
ÃÃ 
ToListAsync
ÃÃ 
(
ÃÃ 
)
ÃÃ 
;
ÃÃ 
}
ÕÕ 	
public
œœ 
async
œœ 
Task
œœ 
<
œœ 
Billing
œœ !
?
œœ! "
>
œœ" #!
GetBillingByIdAsync
œœ$ 7
(
œœ7 8
int
œœ8 ;
	billingId
œœ< E
)
œœE F
{
–– 	
return
—— 
await
—— 
_context
—— !
.
——! "
Billing
——" )
.
““ 
Include
““ 
(
““ 
b
““ 
=>
““ 
b
““ 
.
““  
Doctor
““  &
)
““& '
.
”” 
Include
”” 
(
”” 
b
”” 
=>
”” 
b
”” 
.
””  
Patient
””  '
)
””' (
.
‘‘ !
FirstOrDefaultAsync
‘‘ $
(
‘‘$ %
b
‘‘% &
=>
‘‘' )
b
‘‘* +
.
‘‘+ ,
	BillingID
‘‘, 5
==
‘‘6 8
	billingId
‘‘9 B
)
‘‘B C
;
‘‘C D
}
’’ 	
public
◊◊ 
async
◊◊ 
Task
◊◊  
UpdateBillingAsync
◊◊ ,
(
◊◊, -
Billing
◊◊- 4
billing
◊◊5 <
)
◊◊< =
{
ÿÿ 	
_context
ŸŸ 
.
ŸŸ 
Billing
ŸŸ 
.
ŸŸ 
Update
ŸŸ #
(
ŸŸ# $
billing
ŸŸ$ +
)
ŸŸ+ ,
;
ŸŸ, -
await
⁄⁄ 
_context
⁄⁄ 
.
⁄⁄ 
SaveChangesAsync
⁄⁄ +
(
⁄⁄+ ,
)
⁄⁄, -
;
⁄⁄- .
}
€€ 	
public
ﬁﬁ 
async
ﬁﬁ 
Task
ﬁﬁ 
<
ﬁﬁ 
IEnumerable
ﬁﬁ %
<
ﬁﬁ% &
Test
ﬁﬁ& *
>
ﬁﬁ* +
>
ﬁﬁ+ ,
GetAllTestsAsync
ﬁﬁ- =
(
ﬁﬁ= >
)
ﬁﬁ> ?
{
ﬂﬂ 	
return
‡‡ 
await
‡‡ 
_context
‡‡ !
.
‡‡! "
Tests
‡‡" '
.
‡‡' (
ToListAsync
‡‡( 3
(
‡‡3 4
)
‡‡4 5
;
‡‡5 6
}
·· 	
public
‚‚ 
async
‚‚ 
Task
‚‚ 
AddTestAsync
‚‚ &
(
‚‚& '
Test
‚‚' +
test
‚‚, 0
)
‚‚0 1
{
„„ 	
await
‰‰ 
_context
‰‰ 
.
‰‰ 
Tests
‰‰  
.
‰‰  !
AddAsync
‰‰! )
(
‰‰) *
test
‰‰* .
)
‰‰. /
;
‰‰/ 0
await
ÂÂ 
_context
ÂÂ 
.
ÂÂ 
SaveChangesAsync
ÂÂ +
(
ÂÂ+ ,
)
ÂÂ, -
;
ÂÂ- .
}
ÊÊ 	
public
ÁÁ 
async
ÁÁ 
Task
ÁÁ 
UpdateTestAsync
ÁÁ )
(
ÁÁ) *
Test
ÁÁ* .
test
ÁÁ/ 3
)
ÁÁ3 4
{
ËË 	
_context
ÈÈ 
.
ÈÈ 
Tests
ÈÈ 
.
ÈÈ 
Update
ÈÈ !
(
ÈÈ! "
test
ÈÈ" &
)
ÈÈ& '
;
ÈÈ' (
await
ÍÍ 
_context
ÍÍ 
.
ÍÍ 
SaveChangesAsync
ÍÍ +
(
ÍÍ+ ,
)
ÍÍ, -
;
ÍÍ- .
}
ÎÎ 	
public
ÏÏ 
async
ÏÏ 
Task
ÏÏ 
<
ÏÏ 
Test
ÏÏ 
?
ÏÏ 
>
ÏÏ  
GetTestByIdAsync
ÏÏ! 1
(
ÏÏ1 2
int
ÏÏ2 5
testId
ÏÏ6 <
)
ÏÏ< =
{
ÌÌ 	
return
ÓÓ 
await
ÓÓ 
_context
ÓÓ !
.
ÓÓ! "
Tests
ÓÓ" '
.
ÓÓ' (!
FirstOrDefaultAsync
ÓÓ( ;
(
ÓÓ; <
t
ÓÓ< =
=>
ÓÓ> @
t
ÓÓA B
.
ÓÓB C
TestID
ÓÓC I
==
ÓÓJ L
testId
ÓÓM S
)
ÓÓS T
;
ÓÓT U
}
ÔÔ 	
public
ÒÒ 
async
ÒÒ 
Task
ÒÒ 
<
ÒÒ 
IEnumerable
ÒÒ %
<
ÒÒ% &

Medication
ÒÒ& 0
>
ÒÒ0 1
>
ÒÒ1 2$
GetAllMedicationsAsync
ÒÒ3 I
(
ÒÒI J
)
ÒÒJ K
{
ÚÚ 	
return
ÛÛ 
await
ÛÛ 
_context
ÛÛ !
.
ÛÛ! "
Medications
ÛÛ" -
.
ÛÛ- .
ToListAsync
ÛÛ. 9
(
ÛÛ9 :
)
ÛÛ: ;
;
ÛÛ; <
}
ÙÙ 	
public
ıı 
async
ıı 
Task
ıı  
AddMedicationAsync
ıı ,
(
ıı, -

Medication
ıı- 7

medication
ıı8 B
)
ııB C
{
ˆˆ 	
await
˜˜ 
_context
˜˜ 
.
˜˜ 
Medications
˜˜ &
.
˜˜& '
AddAsync
˜˜' /
(
˜˜/ 0

medication
˜˜0 :
)
˜˜: ;
;
˜˜; <
await
¯¯ 
_context
¯¯ 
.
¯¯ 
SaveChangesAsync
¯¯ +
(
¯¯+ ,
)
¯¯, -
;
¯¯- .
}
˘˘ 	
public
˙˙ 
async
˙˙ 
Task
˙˙ #
UpdateMedicationAsync
˙˙ /
(
˙˙/ 0

Medication
˙˙0 :

medication
˙˙; E
)
˙˙E F
{
˚˚ 	
_context
¸¸ 
.
¸¸ 
Medications
¸¸  
.
¸¸  !
Update
¸¸! '
(
¸¸' (

medication
¸¸( 2
)
¸¸2 3
;
¸¸3 4
await
˝˝ 
_context
˝˝ 
.
˝˝ 
SaveChangesAsync
˝˝ +
(
˝˝+ ,
)
˝˝, -
;
˝˝- .
}
˛˛ 	
public
ˇˇ 
async
ˇˇ 
Task
ˇˇ 
<
ˇˇ 

Medication
ˇˇ $
?
ˇˇ$ %
>
ˇˇ% &$
GetMedicationByIdAsync
ˇˇ' =
(
ˇˇ= >
int
ˇˇ> A
medicationId
ˇˇB N
)
ˇˇN O
{
ÄÄ 	
return
ÅÅ 
await
ÅÅ 
_context
ÅÅ !
.
ÅÅ! "
Medications
ÅÅ" -
.
ÅÅ- .!
FirstOrDefaultAsync
ÅÅ. A
(
ÅÅA B
m
ÅÅB C
=>
ÅÅD F
m
ÅÅG H
.
ÅÅH I
MedicationID
ÅÅI U
==
ÅÅV X
medicationId
ÅÅY e
)
ÅÅe f
;
ÅÅf g
}
ÇÇ 	
public
ÖÖ 
async
ÖÖ 
Task
ÖÖ 
	SaveAsync
ÖÖ #
(
ÖÖ# $
)
ÖÖ$ %
{
ÜÜ 	
await
áá 
_context
áá 
.
áá 
SaveChangesAsync
áá +
(
áá+ ,
)
áá, -
;
áá- .
}
àà 	
}
ââ 
}ää †∂
dC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Repositories\DoctorRepository.cs
	namespace

 	
AmazeCareAPI


 
.

 
Repositories

 #
{ 
public 

class 
DoctorRepository !
:" #
IDoctorRepository$ 5
{ 
private 
readonly 
AmazeCareContext )
_context* 2
;2 3
public 
DoctorRepository 
(  
AmazeCareContext  0
context1 8
)8 9
{ 	
_context 
= 
context 
; 
} 	
public 
async 
Task 
< 
int 
? 
> $
GetDoctorIdByUserIdAsync  8
(8 9
int9 <
userId= C
)C D
{ 	
var 
doctor 
= 
await 
_context '
.' (
Doctors( /
./ 0
FirstOrDefaultAsync0 C
(C D
dD E
=>F H
dI J
.J K
UserIDK Q
==R T
userIdU [
)[ \
;\ ]
return 
doctor 
? 
. 
DoctorID #
;# $
} 	
public 
async 
Task 
< 
List 
< %
AppointmentWithPatientDto 8
>8 9
>9 :(
GetAppointmentsByStatusAsync; W
(W X
intX [
doctorId\ d
,d e
stringf l
statusm s
)s t
{ 	
return 
await 
_context !
.! "
Appointments" .
. 
Where 
( 
a 
=> 
a 
. 
DoctorID &
==' )
doctorId* 2
&&3 5
a6 7
.7 8
Status8 >
==? A
statusB H
)H I
. 
Include 
( 
a 
=> 
a 
.  
Patient  '
)' (
. 
Select 
( 
a 
=> 
new  %
AppointmentWithPatientDto! :
{ 
AppointmentID   !
=  " #
a  $ %
.  % &
AppointmentID  & 3
,  3 4
	PatientID!! 
=!! 
a!!  !
.!!! "
	PatientID!!" +
,!!+ ,
AppointmentDate"" #
=""$ %
a""& '
.""' (
AppointmentDate""( 7
,""7 8
Status## 
=## 
a## 
.## 
Status## %
,##% &
Symptoms$$ 
=$$ 
a$$  
.$$  !
Symptoms$$! )
,$$) *
PatientName%% 
=%%  !
a%%" #
.%%# $
Patient%%$ +
.%%+ ,
FullName%%, 4
,%%4 5
MedicalHistory&& "
=&&# $
a&&% &
.&&& '
Patient&&' .
.&&. /
MedicalHistory&&/ =
}'' 
)'' 
.(( 
ToListAsync(( 
((( 
)(( 
;(( 
})) 	
public** 
async** 
Task** 
<** 
Appointment** %
?**% &
>**& '(
GetRequestedAppointmentAsync**( D
(**D E
int**E H
doctorId**I Q
,**Q R
int**S V
appointmentId**W d
)**d e
{++ 	
return,, 
await,, 
_context,, !
.,,! "
Appointments,," .
.-- 
FirstOrDefaultAsync-- $
(--$ %
a--% &
=>--' )
a.. 
... 
AppointmentID.. #
==..$ &
appointmentId..' 4
&&..5 7
a// 
.// 
DoctorID// 
==// !
doctorId//" *
&&//+ -
a00 
.00 
Status00 
==00 
$str00  +
)00+ ,
;00, -
}11 	
public33 
async33 
Task33 
<33 
Appointment33 %
>33% &(
GetScheduledAppointmentAsync33' C
(33C D
int33D G
doctorId33H P
,33P Q
int33R U
appointmentId33V c
)33c d
{44 	
return55 
await55 
_context55 !
.55! "
Appointments55" .
.66 
FirstOrDefaultAsync66 $
(66$ %
a66% &
=>66' )
a66* +
.66+ ,
AppointmentID66, 9
==66: <
appointmentId66= J
&&66K M
a66N O
.66O P
DoctorID66P X
==66Y [
doctorId66\ d
&&66e g
a66h i
.66i j
Status66j p
==66q s
$str66t 
)	66 Ä
;
66Ä Å
}77 	
public99 
async99 
Task99 
<99 
MedicalRecord99 '
>99' (!
GetMedicalRecordAsync99) >
(99> ?
int99? B
doctorId99C K
,99K L
int99M P
recordId99Q Y
,99Y Z
int99[ ^
	patientId99_ h
)99h i
{:: 	
return;; 
await;; 
_context;; !
.;;! "
MedicalRecords;;" 0
.<< 
FirstOrDefaultAsync<< $
(<<$ %
r<<% &
=><<' )
r<<* +
.<<+ ,
RecordID<<, 4
==<<5 7
recordId<<8 @
&&<<A C
r<<D E
.<<E F
DoctorID<<F N
==<<O Q
doctorId<<R Z
&&<<[ ]
r<<^ _
.<<_ `
	PatientID<<` i
==<<j l
	patientId<<m v
)<<v w
;<<w x
}== 	
public?? 
async?? 
Task?? $
UpdateMedicalRecordAsync?? 2
(??2 3
MedicalRecord??3 @
medicalRecord??A N
)??N O
{@@ 	
_contextAA 
.AA 
MedicalRecordsAA #
.AA# $
UpdateAA$ *
(AA* +
medicalRecordAA+ 8
)AA8 9
;AA9 :
awaitBB 
_contextBB 
.BB 
SaveChangesAsyncBB +
(BB+ ,
)BB, -
;BB- .
}CC 	
publicEE 
asyncEE 
TaskEE !
AddMedicalRecordAsyncEE /
(EE/ 0
MedicalRecordEE0 =
medicalRecordEE> K
)EEK L
{FF 	
_contextGG 
.GG 
MedicalRecordsGG #
.GG# $
AddGG$ '
(GG' (
medicalRecordGG( 5
)GG5 6
;GG6 7
awaitHH 
_contextHH 
.HH 
SaveChangesAsyncHH +
(HH+ ,
)HH, -
;HH- .
}II 	
publicKK 
asyncKK 
TaskKK 
<KK 
ListKK 
<KK 
TestKK #
>KK# $
>KK$ %
GetTestsByIdsAsyncKK& 8
(KK8 9
IEnumerableKK9 D
<KKD E
intKKE H
>KKH I
testIdsKKJ Q
)KKQ R
{LL 	
returnMM 
awaitMM 
_contextMM !
.MM! "
TestsMM" '
.MM' (
WhereMM( -
(MM- .
tMM. /
=>MM0 2
testIdsMM3 :
.MM: ;
ContainsMM; C
(MMC D
tMMD E
.MME F
TestIDMMF L
)MML M
)MMM N
.MMN O
ToListAsyncMMO Z
(MMZ [
)MM[ \
;MM\ ]
}NN 	
publicPP 
asyncPP 
TaskPP &
AddMedicalRecordTestsAsyncPP 4
(PP4 5
IEnumerablePP5 @
<PP@ A
MedicalRecordTestPPA R
>PPR S
medicalRecordTestsPPT f
)PPf g
{QQ 	
_contextRR 
.RR 
MedicalRecordTestsRR '
.RR' (
AddRangeRR( 0
(RR0 1
medicalRecordTestsRR1 C
)RRC D
;RRD E
awaitSS 
_contextSS 
.SS 
SaveChangesAsyncSS +
(SS+ ,
)SS, -
;SS- .
}TT 	
publicVV 
asyncVV 
TaskVV !
AddPrescriptionsAsyncVV /
(VV/ 0
IEnumerableVV0 ;
<VV; <
PrescriptionVV< H
>VVH I
prescriptionsVVJ W
)VVW X
{WW 	
_contextXX 
.XX 
PrescriptionsXX "
.XX" #
AddRangeXX# +
(XX+ ,
prescriptionsXX, 9
)XX9 :
;XX: ;
awaitYY 
_contextYY 
.YY 
SaveChangesAsyncYY +
(YY+ ,
)YY, -
;YY- .
}ZZ 	
public\\ 
async\\ 
Task\\ .
"UpdateMedicalRecordTotalPriceAsync\\ <
(\\< =
MedicalRecord\\= J
medicalRecord\\K X
)\\X Y
{]] 	
_context^^ 
.^^ 
MedicalRecords^^ #
.^^# $
Update^^$ *
(^^* +
medicalRecord^^+ 8
)^^8 9
;^^9 :
await__ 
_context__ 
.__ 
SaveChangesAsync__ +
(__+ ,
)__, -
;__- .
}`` 	
publicbb 
asyncbb 
Taskbb 
AddBillingAsyncbb )
(bb) *
Billingbb* 1
billingbb2 9
)bb9 :
{cc 	
_contextdd 
.dd 
Billingdd 
.dd 
Adddd  
(dd  !
billingdd! (
)dd( )
;dd) *
awaitee 
_contextee 
.ee 
SaveChangesAsyncee +
(ee+ ,
)ee, -
;ee- .
}ff 	
publichh 
asynchh 
Taskhh -
!UpdatePrescriptionBillingIdsAsynchh ;
(hh; <
IEnumerablehh< G
<hhG H
PrescriptionhhH T
>hhT U
prescriptionshhV c
)hhc d
{ii 	
foreachjj 
(jj 
varjj 
prescriptionjj %
injj& (
prescriptionsjj) 6
)jj6 7
{kk 
_contextll 
.ll 
Prescriptionsll &
.ll& '
Updatell' -
(ll- .
prescriptionll. :
)ll: ;
;ll; <
}mm 
awaitoo 
_contextoo 
.oo 
SaveChangesAsyncoo +
(oo+ ,
)oo, -
;oo- .
}pp 	
publicrr 
asyncrr 
Taskrr 
<rr 
Listrr 
<rr 
Appointmentrr *
>rr* +
>rr+ ,<
0GetAppointmentsWithMedicalRecordsAndDetailsAsyncrr- ]
(rr] ^
intrr^ a
	patientIdrrb k
)rrk l
{ss 	
returntt 
awaittt 
_contexttt !
.tt! "
Appointmentstt" .
.uu 
Whereuu 
(uu 
auu 
=>uu 
auu 
.uu 
	PatientIDuu '
==uu( *
	patientIduu+ 4
&&uu5 7
auu8 9
.uu9 :
MedicalRecorduu: G
!=uuH J
nulluuK O
)uuO P
.vv 
Includevv 
(vv 
avv 
=>vv 
avv 
.vv  
Doctorvv  &
)vv& '
.ww 
Includeww 
(ww 
aww 
=>ww 
aww 
.ww  
MedicalRecordww  -
)ww- .
.xx 
ThenIncludexx  
(xx  !
mxx! "
=>xx# %
mxx& '
.xx' (
MedicalRecordTestsxx( :
)xx: ;
.yy 
ThenIncludeyy $
(yy$ %
mtyy% '
=>yy( *
mtyy+ -
.yy- .
Testyy. 2
)yy2 3
.zz 
Includezz 
(zz 
azz 
=>zz 
azz 
.zz  
MedicalRecordzz  -
)zz- .
.{{ 
ThenInclude{{  
({{  !
m{{! "
=>{{# %
m{{& '
.{{' (
Prescriptions{{( 5
){{5 6
.|| 
Include|| 
(|| 
a|| 
=>|| 
a|| 
.||  
MedicalRecord||  -
)||- .
.}} 
ThenInclude}}  
(}}  !
m}}! "
=>}}# %
m}}& '
.}}' (
Billing}}( /
)}}/ 0
.~~ 
ToListAsync~~ 
(~~ 
)~~ 
;~~ 
} 	
public
ÅÅ 
async
ÅÅ 
Task
ÅÅ 
<
ÅÅ 

Medication
ÅÅ $
>
ÅÅ$ %$
GetMedicationByIdAsync
ÅÅ& <
(
ÅÅ< =
int
ÅÅ= @
medicationId
ÅÅA M
)
ÅÅM N
{
ÇÇ 	
return
ÉÉ 
await
ÉÉ 
_context
ÉÉ !
.
ÉÉ! "
Medications
ÉÉ" -
.
ÉÉ- .
	FindAsync
ÉÉ. 7
(
ÉÉ7 8
medicationId
ÉÉ8 D
)
ÉÉD E
;
ÉÉE F
}
ÑÑ 	
public
ÜÜ 
async
ÜÜ 
Task
ÜÜ 
<
ÜÜ 
Billing
ÜÜ !
>
ÜÜ! ",
GetBillingByIdAndDoctorIdAsync
ÜÜ# A
(
ÜÜA B
int
ÜÜB E
	billingId
ÜÜF O
,
ÜÜO P
int
ÜÜQ T
doctorId
ÜÜU ]
)
ÜÜ] ^
{
áá 	
return
àà 
await
àà 
_context
àà !
.
àà! "
Billing
àà" )
.
ââ !
FirstOrDefaultAsync
ââ $
(
ââ$ %
b
ââ% &
=>
ââ' )
b
ââ* +
.
ââ+ ,
	BillingID
ââ, 5
==
ââ6 8
	billingId
ââ9 B
&&
ââC E
b
ââF G
.
ââG H
DoctorID
ââH P
==
ââQ S
doctorId
ââT \
)
ââ\ ]
;
ââ] ^
}
ää 	
public
åå 
async
åå 
Task
åå  
UpdateBillingAsync
åå ,
(
åå, -
Billing
åå- 4
billing
åå5 <
)
åå< =
{
çç 	
_context
éé 
.
éé 
Billing
éé 
.
éé 
Update
éé #
(
éé# $
billing
éé$ +
)
éé+ ,
;
éé, -
await
èè 
_context
èè 
.
èè 
SaveChangesAsync
èè +
(
èè+ ,
)
èè, -
;
èè- .
}
êê 	
public
íí 
async
íí 
Task
íí 
<
íí 
List
íí 
<
íí 
TestDto
íí &
>
íí& '
>
íí' (
GetAllTestsAsync
íí) 9
(
íí9 :
)
íí: ;
{
ìì 	
return
îî 
await
îî 
_context
îî !
.
îî! "
Tests
îî" '
.
ïï 
Select
ïï 
(
ïï 
t
ïï 
=>
ïï 
new
ïï  
TestDto
ïï! (
{
ññ 
TestID
óó 
=
óó 
t
óó 
.
óó 
TestID
óó %
,
óó% &
TestName
òò 
=
òò 
t
òò  
.
òò  !
TestName
òò! )
,
òò) *
	TestPrice
ôô 
=
ôô 
t
ôô  !
.
ôô! "
	TestPrice
ôô" +
}
öö 
)
öö 
.
õõ 
ToListAsync
õõ 
(
õõ 
)
õõ 
;
õõ 
}
úú 	
public
ûû 
async
ûû 
Task
ûû 
<
ûû 
List
ûû 
<
ûû 
MedicationDto
ûû ,
>
ûû, -
>
ûû- .$
GetAllMedicationsAsync
ûû/ E
(
ûûE F
)
ûûF G
{
üü 	
return
†† 
await
†† 
_context
†† !
.
††! "
Medications
††" -
.
°° 
Select
°° 
(
°° 
m
°° 
=>
°° 
new
°°  
MedicationDto
°°! .
{
¢¢ 
MedicationID
££  
=
££! "
m
££# $
.
££$ %
MedicationID
££% 1
,
££1 2
MedicationName
§§ "
=
§§# $
m
§§% &
.
§§& '
MedicationName
§§' 5
,
§§5 6
PricePerUnit
••  
=
••! "
m
••# $
.
••$ %
PricePerUnit
••% 1
}
¶¶ 
)
¶¶ 
.
ßß 
ToListAsync
ßß 
(
ßß 
)
ßß 
;
ßß 
}
®® 	
public
™™ 
async
™™ 
Task
™™ 
AddScheduleAsync
™™ *
(
™™* +
DoctorSchedule
™™+ 9
schedule
™™: B
)
™™B C
{
´´ 	
_context
¨¨ 
.
¨¨ 
DoctorSchedule
¨¨ #
.
¨¨# $
Add
¨¨$ '
(
¨¨' (
schedule
¨¨( 0
)
¨¨0 1
;
¨¨1 2
await
≠≠ 
_context
≠≠ 
.
≠≠ 
SaveChangesAsync
≠≠ +
(
≠≠+ ,
)
≠≠, -
;
≠≠- .
}
ÆÆ 	
public
ØØ 
async
ØØ 
Task
ØØ 
<
ØØ 
DoctorSchedule
ØØ (
>
ØØ( )-
GetScheduleByIdAndDoctorIdAsync
ØØ* I
(
ØØI J
int
ØØJ M

scheduleId
ØØN X
,
ØØX Y
int
ØØZ ]
doctorId
ØØ^ f
)
ØØf g
{
∞∞ 	
return
±± 
await
±± 
_context
±± !
.
±±! "
DoctorSchedule
±±" 0
.
≤≤ !
FirstOrDefaultAsync
≤≤ $
(
≤≤$ %
h
≤≤% &
=>
≤≤' )
h
≤≤* +
.
≤≤+ ,

ScheduleID
≤≤, 6
==
≤≤7 9

scheduleId
≤≤: D
&&
≤≤E G
h
≤≤H I
.
≤≤I J
DoctorID
≤≤J R
==
≤≤S U
doctorId
≤≤V ^
)
≤≤^ _
;
≤≤_ `
}
≥≥ 	
public
µµ 
async
µµ 
Task
µµ !
UpdateScheduleAsync
µµ -
(
µµ- .
DoctorSchedule
µµ. <
schedule
µµ= E
)
µµE F
{
∂∂ 	
_context
∑∑ 
.
∑∑ 
DoctorSchedule
∑∑ #
.
∑∑# $
Update
∑∑$ *
(
∑∑* +
schedule
∑∑+ 3
)
∑∑3 4
;
∑∑4 5
await
∏∏ 
_context
∏∏ 
.
∏∏ 
SaveChangesAsync
∏∏ +
(
∏∏+ ,
)
∏∏, -
;
∏∏- .
}
ππ 	
public
ªª 
async
ªª 
Task
ªª 
<
ªª 
IEnumerable
ªª %
<
ªª% &
ScheduleDto
ªª& 1
>
ªª1 2
>
ªª2 3)
GetSchedulesByDoctorIdAsync
ªª4 O
(
ªªO P
int
ªªP S
doctorId
ªªT \
)
ªª\ ]
{
ºº 	
return
ΩΩ 
await
ΩΩ 
_context
ΩΩ !
.
ΩΩ! "
DoctorSchedule
ΩΩ" 0
.
ææ 
Where
ææ 
(
ææ 
h
ææ 
=>
ææ 
h
ææ 
.
ææ 
DoctorID
ææ &
==
ææ' )
doctorId
ææ* 2
)
ææ2 3
.
øø 
Select
øø 
(
øø 
h
øø 
=>
øø 
new
øø  
ScheduleDto
øø! ,
{
¿¿ 

ScheduleID
¡¡ 
=
¡¡  
h
¡¡! "
.
¡¡" #

ScheduleID
¡¡# -
,
¡¡- .
	StartDate
¬¬ 
=
¬¬ 
h
¬¬  !
.
¬¬! "
	StartDate
¬¬" +
,
¬¬+ ,
EndDate
√√ 
=
√√ 
h
√√ 
.
√√  
EndDate
√√  '
,
√√' (
Status
ƒƒ 
=
ƒƒ 
h
ƒƒ 
.
ƒƒ 
Status
ƒƒ %
}
≈≈ 
)
≈≈ 
.
∆∆ 
ToListAsync
∆∆ 
(
∆∆ 
)
∆∆ 
;
∆∆ 
}
«« 	
public
»» 
async
»» 
Task
»» 
<
»» 
Appointment
»» %
>
»»% &0
"GetAppointmentByIdAndDoctorIdAsync
»»' I
(
»»I J
int
»»J M
appointmentId
»»N [
,
»»[ \
int
»»] `
doctorId
»»a i
)
»»i j
{
…… 	
return
   
await
   
_context
   !
.
  ! "
Appointments
  " .
.
ÀÀ !
FirstOrDefaultAsync
ÀÀ $
(
ÀÀ$ %
a
ÀÀ% &
=>
ÀÀ' )
a
ÀÀ* +
.
ÀÀ+ ,
AppointmentID
ÀÀ, 9
==
ÀÀ: <
appointmentId
ÀÀ= J
&&
ÀÀK M
a
ÀÀN O
.
ÀÀO P
DoctorID
ÀÀP X
==
ÀÀY [
doctorId
ÀÀ\ d
)
ÀÀd e
;
ÀÀe f
}
ÃÃ 	
public
ÕÕ 
async
ÕÕ 
Task
ÕÕ 
<
ÕÕ 
bool
ÕÕ 
>
ÕÕ 
IsOnScheduleAsync
ÕÕ  1
(
ÕÕ1 2
int
ÕÕ2 5
doctorId
ÕÕ6 >
,
ÕÕ> ?
DateTime
ÕÕ@ H
date
ÕÕI M
)
ÕÕM N
{
ŒŒ 	
return
œœ 
await
œœ 
_context
œœ !
.
œœ! "
DoctorSchedule
œœ" 0
.
–– 
AnyAsync
–– 
(
–– 
h
–– 
=>
–– 
h
––  
.
––  !
DoctorID
––! )
==
––* ,
doctorId
––- 5
&&
—— !
h
——" #
.
——# $
Status
——$ *
==
——+ -
$str
——. 9
&&
““ !
date
““" &
>=
““' )
h
““* +
.
““+ ,
	StartDate
““, 5
&&
”” !
date
””" &
<=
””' )
h
””* +
.
””+ ,
EndDate
””, 3
)
””3 4
;
””4 5
}
‘‘ 	
public
÷÷ 
async
÷÷ 
Task
÷÷ $
UpdateAppointmentAsync
÷÷ 0
(
÷÷0 1
Appointment
÷÷1 <
appointment
÷÷= H
)
÷÷H I
{
◊◊ 	
_context
ÿÿ 
.
ÿÿ 
Appointments
ÿÿ !
.
ÿÿ! "
Update
ÿÿ" (
(
ÿÿ( )
appointment
ÿÿ) 4
)
ÿÿ4 5
;
ÿÿ5 6
await
ŸŸ 
_context
ŸŸ 
.
ŸŸ 
SaveChangesAsync
ŸŸ +
(
ŸŸ+ ,
)
ŸŸ, -
;
ŸŸ- .
}
⁄⁄ 	
public
‹‹ 
async
‹‹ 
Task
‹‹ 
<
‹‹ 
IEnumerable
‹‹ %
<
‹‹% &
Billing
‹‹& -
>
‹‹- .
>
‹‹. /%
GetBillsByDoctorIdAsync
‹‹0 G
(
‹‹G H
int
‹‹H K
doctorId
‹‹L T
)
‹‹T U
{
›› 	
return
ﬁﬁ 
await
ﬁﬁ 
_context
ﬁﬁ !
.
ﬁﬁ! "
Billing
ﬁﬁ" )
.
ﬂﬂ 
Include
ﬂﬂ 
(
ﬂﬂ 
b
ﬂﬂ 
=>
ﬂﬂ 
b
ﬂﬂ 
.
ﬂﬂ  
Doctor
ﬂﬂ  &
)
ﬂﬂ& '
.
‡‡ 
Include
‡‡ 
(
‡‡ 
b
‡‡ 
=>
‡‡ 
b
‡‡ 
.
‡‡  
Patient
‡‡  '
)
‡‡' (
.
·· 
Where
·· 
(
·· 
b
·· 
=>
·· 
b
·· 
.
·· 
DoctorID
·· &
==
··' )
doctorId
··* 2
)
··2 3
.
‚‚ 
ToListAsync
‚‚ 
(
‚‚ 
)
‚‚ 
;
‚‚ 
}
„„ 	
}
ÁÁ 
}ËË ŸD
nC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Repositories\Interface\IAdminRepository.cs
	namespace 	
AmazeCareAPI
 
. 
Repositories #
.# $
	Interface$ -
{ 
public 

	interface 
IAdminRepository %
{ 
Task 
< 
bool 
> $
IsUsernameAvailableAsync +
(+ ,
string, 2
username3 ;
); <
;< =
Task		 
<		 
User		 
>		 
CreateUserAsync		 "
(		" #
User		# '
user		( ,
)		, -
;		- .
Task

 
<

 
Administrator

 
>

 
CreateAdminAsync

 ,
(

, -
Administrator

- :
admin

; @
)

@ A
;

A B
Task 
< 
Doctor 
> 
CreateDoctorAsync &
(& '
Doctor' -
doctor. 4
,4 5
IEnumerable6 A
<A B
intB E
>E F
specializationIdsG X
)X Y
;Y Z
Task 
< 
Doctor 
> 
GetDoctorByIdAsync '
(' (
int( +
doctorId, 4
)4 5
;5 6
Task 
< 
bool 
> 
UpdateDoctorAsync $
($ %
Doctor% +
doctor, 2
,2 3
IEnumerable4 ?
<? @
int@ C
>C D
specializationIdsE V
)V W
;W X
Task 
< 
bool 
> 
DeleteDoctorAsync $
($ %
int% (
userId) /
,/ 0
int1 4
doctorId5 =
)= >
;> ?
Task 
< 
Patient 
> 
GetPatientByIdAsync )
() *
int* -
	patientId. 7
)7 8
;8 9
Task 
< 
bool 
> 
UpdatePatientAsync %
(% &
Patient& -
patient. 5
)5 6
;6 7
Task 
< 
bool 
> 
DeletePatientAsync %
(% &
int& )
userId* 0
,0 1
int2 5
	patientId6 ?
)? @
;@ A
Task 
< 
Appointment 
? 
> &
RescheduleAppointmentAsync 5
(5 6
Appointment6 A
appointmentB M
,M N
DateTimeO W
newDateX _
)_ `
;` a
Task 
< 
Appointment 
> #
GetAppointmentByIdAsync 1
(1 2
int2 5
appointmentId6 C
)C D
;D E
Task 
< 
bool 
> %
UpdateDoctorScheduleAsync ,
(, -
int- 0
doctorId1 9
,9 :
int; >

scheduleId? I
,I J
DateTimeK S
newStartDateT `
,` a
DateTimeb j

newEndDatek u
)u v
;v w
Task 
< 
bool 
> %
CancelDoctorScheduleAsync ,
(, -
int- 0
doctorId1 9
,9 :
int; >

scheduleId? I
)I J
;J K
Task 
< 
Doctor 
> -
!GetDoctorWithSpecializationsAsync 6
(6 7
int7 :
doctorId; C
)C D
;D E
Task ,
 UpdateDoctorSpecializationsAsync -
(- .
int. 1
doctorId2 :
,: ;
IEnumerable< G
<G H
intH K
>K L
specializationIdsM ^
)^ _
;_ `
Task 
< 
Doctor 
> '
GetDoctorByIdAndUserIdAsync 0
(0 1
int1 4
doctorId5 =
,= >
int? B
userIdC I
)I J
;J K
Task 
< 
List 
< 
Appointment 
> 
> )
GetScheduledAppointmentsAsync  =
(= >
int> A
doctorIdB J
)J K
;K L
Task 
DeleteUserAsync 
( 
int  
userId! '
)' (
;( )
Task 
< 
Patient 
> (
GetPatientByIdAndUserIdAsync 2
(2 3
int3 6
	patientId7 @
,@ A
intB E
userIdF L
)L M
;M N
Task 
< 
List 
< 
Appointment 
> 
> 4
(GetScheduledAppointmentsByPatientIdAsync  H
(H I
intI L
	patientIdM V
)V W
;W X
Task   
<   
DoctorSchedule   
>   +
GetScheduleByIdAndDoctorIdAsync   <
(  < =
int  = @

scheduleId  A K
,  K L
int  M P
doctorId  Q Y
)  Y Z
;  Z [
Task!! 
<!! 
bool!! 
>!! #
IsDoctorOnScheduleAsync!! *
(!!* +
int!!+ .
doctorId!!/ 7
,!!7 8
DateTime!!9 A
appointmentDate!!B Q
)!!Q R
;!!R S
Task"" 
<"" 
Appointment"" 
>"" -
!GetAppointmentWithDoctorByIdAsync"" ;
(""; <
int""< ?
appointmentId""@ M
)""M N
;""N O
Task$$ 
<$$ 
IEnumerable$$ 
<$$ 
Specialization$$ '
>$$' (
>$$( )&
GetAllSpecializationsAsync$$* D
($$D E
)$$E F
;$$F G
Task%% 
<%% 
IEnumerable%% 
<%% 
DoctorSchedule%% '
>%%' (
>%%( ).
"GetSchedulesWithDoctorDetailsAsync%%* L
(%%L M
int%%M P
doctorId%%Q Y
)%%Y Z
;%%Z [
Task&& 
<&& 
DoctorSchedule&& 
?&& 
>&&  
GetScheduleByIdAsync&& 2
(&&2 3
int&&3 6

scheduleId&&7 A
)&&A B
;&&B C
Task(( 
UpdateScheduleAsync((  
(((  !
DoctorSchedule((! /
schedule((0 8
)((8 9
;((9 :
Task** 
<** 
IEnumerable** 
<** 
Billing**  
>**  !
>**! "+
GetBillingDetailsWithNamesAsync**# B
(**B C
)**C D
;**D E
Task,, 
<,, 
Billing,, 
?,, 
>,, 
GetBillingByIdAsync,, *
(,,* +
int,,+ .
	billingId,,/ 8
),,8 9
;,,9 :
Task.. 
UpdateBillingAsync.. 
(..  
Billing..  '
billing..( /
)../ 0
;..0 1
Task// 
<// 
IEnumerable// 
<// 
Test// 
>// 
>// 
GetAllTestsAsync//  0
(//0 1
)//1 2
;//2 3
Task00 
AddTestAsync00 
(00 
Test00 
test00 #
)00# $
;00$ %
Task11 
UpdateTestAsync11 
(11 
Test11 !
test11" &
)11& '
;11' (
Task33 
<33 
Test33 
?33 
>33 
GetTestByIdAsync33 $
(33$ %
int33% (
testId33) /
)33/ 0
;330 1
Task44 
<44 
IEnumerable44 
<44 

Medication44 #
>44# $
>44$ %"
GetAllMedicationsAsync44& <
(44< =
)44= >
;44> ?
Task55 
AddMedicationAsync55 
(55  

Medication55  *

medication55+ 5
)555 6
;556 7
Task66 !
UpdateMedicationAsync66 "
(66" #

Medication66# -

medication66. 8
)668 9
;669 :
Task77 
<77 

Medication77 
?77 
>77 "
GetMedicationByIdAsync77 0
(770 1
int771 4
medicationId775 A
)77A B
;77B C
Task;; 
	SaveAsync;; 
(;; 
);; 
;;; 
}<< 
}== ∏0
oC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Repositories\Interface\IDoctorRepository.cs
	namespace 	
AmazeCareAPI
 
. 
Repositories #
.# $
	Interface$ -
{ 
public 

	interface 
IDoctorRepository &
{		 
Task

 
<

 
int

 
?

 
>

 $
GetDoctorIdByUserIdAsync

 +
(

+ ,
int

, /
userId

0 6
)

6 7
;

7 8
Task 
< 
List 
< %
AppointmentWithPatientDto +
>+ ,
>, -(
GetAppointmentsByStatusAsync. J
(J K
intK N
doctorIdO W
,W X
stringY _
status` f
)f g
;g h
Task 
< 
Appointment 
> (
GetScheduledAppointmentAsync 6
(6 7
int7 :
doctorId; C
,C D
intE H
appointmentIdI V
)V W
;W X
Task 
< 
Appointment 
? 
> (
GetRequestedAppointmentAsync 7
(7 8
int8 ;
doctorId< D
,D E
intF I
appointmentIdJ W
)W X
;X Y
Task 
< 
MedicalRecord 
> !
GetMedicalRecordAsync 1
(1 2
int2 5
doctorId6 >
,> ?
int@ C
recordIdD L
,L M
intN Q
	patientIdR [
)[ \
;\ ]
Task $
UpdateMedicalRecordAsync %
(% &
MedicalRecord& 3
medicalRecord4 A
)A B
;B C
Task !
AddMedicalRecordAsync "
(" #
MedicalRecord# 0
medicalRecord1 >
)> ?
;? @
Task 
< 
List 
< 
Test 
> 
> 
GetTestsByIdsAsync +
(+ ,
IEnumerable, 7
<7 8
int8 ;
>; <
testIds= D
)D E
;E F
Task &
AddMedicalRecordTestsAsync '
(' (
IEnumerable( 3
<3 4
MedicalRecordTest4 E
>E F
medicalRecordTestsG Y
)Y Z
;Z [
Task !
AddPrescriptionsAsync "
(" #
IEnumerable# .
<. /
Prescription/ ;
>; <
prescriptions= J
)J K
;K L
Task .
"UpdateMedicalRecordTotalPriceAsync /
(/ 0
MedicalRecord0 =
medicalRecord> K
)K L
;L M
Task 
AddBillingAsync 
( 
Billing $
billing% ,
), -
;- .
Task -
!UpdatePrescriptionBillingIdsAsync .
(. /
IEnumerable/ :
<: ;
Prescription; G
>G H
prescriptionsI V
)V W
;W X
Task 
< 
List 
< 
Appointment 
> 
> <
0GetAppointmentsWithMedicalRecordsAndDetailsAsync  P
(P Q
intQ T
	patientIdU ^
)^ _
;_ `
Task 
< 

Medication 
> "
GetMedicationByIdAsync /
(/ 0
int0 3
medicationId4 @
)@ A
;A B
Task 
< 
Billing 
> *
GetBillingByIdAndDoctorIdAsync 4
(4 5
int5 8
	billingId9 B
,B C
intD G
doctorIdH P
)P Q
;Q R
Task 
UpdateBillingAsync 
(  
Billing  '
billing( /
)/ 0
;0 1
Task 
< 
List 
< 
TestDto 
> 
> 
GetAllTestsAsync ,
(, -
)- .
;. /
Task 
< 
List 
< 
MedicationDto 
>  
>  !"
GetAllMedicationsAsync" 8
(8 9
)9 :
;: ;
Task!! 
AddScheduleAsync!! 
(!! 
DoctorSchedule!! ,
schedule!!- 5
)!!5 6
;!!6 7
Task"" 
<"" 
DoctorSchedule"" 
>"" +
GetScheduleByIdAndDoctorIdAsync"" <
(""< =
int""= @

scheduleId""A K
,""K L
int""M P
doctorId""Q Y
)""Y Z
;""Z [
Task## 
UpdateScheduleAsync##  
(##  !
DoctorSchedule##! /
schedule##0 8
)##8 9
;##9 :
Task$$ 
<$$ 
IEnumerable$$ 
<$$ 
ScheduleDto$$ $
>$$$ %
>$$% &'
GetSchedulesByDoctorIdAsync$$' B
($$B C
int$$C F
doctorId$$G O
)$$O P
;$$P Q
Task%% 
<%% 
Appointment%% 
>%% .
"GetAppointmentByIdAndDoctorIdAsync%% <
(%%< =
int%%= @
appointmentId%%A N
,%%N O
int%%P S
doctorId%%T \
)%%\ ]
;%%] ^
Task&& 
<&& 
bool&& 
>&& 
IsOnScheduleAsync&& $
(&&$ %
int&&% (
doctorId&&) 1
,&&1 2
DateTime&&3 ;
date&&< @
)&&@ A
;&&A B
Task'' "
UpdateAppointmentAsync'' #
(''# $
Appointment''$ /
appointment''0 ;
)''; <
;''< =
Task)) 
<)) 
IEnumerable)) 
<)) 
Billing))  
>))  !
>))! "#
GetBillsByDoctorIdAsync))# :
()): ;
int)); >
doctorId))? G
)))G H
;))H I
}** 
}++ º(
pC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Repositories\Interface\IPatientRepository.cs
	namespace 	
AmazeCareAPI
 
. 
Repositories #
.# $
	Interface$ -
{ 
public 

	interface 
IPatientRepository '
{ 
Task 
< 
Patient 
? 
> #
GetPatientByUserIdAsync .
(. /
int/ 2
userId3 9
)9 :
;: ;
Task		 
UpdatePatientAsync		 
(		  
Patient		  '
patient		( /
)		/ 0
;		0 1
Task

 
<

 
IEnumerable

 
<

 
	DoctorDto

 "
>

" #
>

# $
SearchDoctorsAsync

% 7
(

7 8
string

8 >
?

> ?
specialization

@ N
)

N O
;

O P
Task 
AddAppointmentAsync  
(  !
Appointment! ,
appointment- 8
)8 9
;9 :
Task 
< 
Appointment 
? 
> #
GetAppointmentByIdAsync 2
(2 3
int3 6
appointmentId7 D
)D E
;E F
Task "
UpdateAppointmentAsync #
(# $
Appointment$ /
appointment0 ;
); <
;< =
Task 
< 
IEnumerable 
< $
AppointmentWithDoctorDto 1
>1 2
>2 3+
GetAppointmentsByPatientIdAsync4 S
(S T
intT W
	patientIdX a
)a b
;b c
Task 
< 
List 
< #
PatientMedicalRecordDto )
>) *
>* +"
GetMedicalHistoryAsync, B
(B C
intC F
	patientIdG P
)P Q
;Q R
Task 
< 
bool 
> 
IsDoctorOnSchedule %
(% &
int& )
doctorId* 2
,2 3
DateTime4 <
appointmentDate= L
)L M
;M N
Task 
< 
Appointment 
? 
> #
GetAppointmentByIdAsync 2
(2 3
int3 6
	patientId7 @
,@ A
intB E
appointmentIdF S
)S T
;T U
Task 
< 
int 
> 
SaveChangesAsync "
(" #
)# $
;$ %
Task 
< 
int 
> %
GetPatientIdByUserIdAsync +
(+ ,
int, /
userId0 6
)6 7
;7 8
Task 
< 
List 
<  
PatientTestDetailDto &
>& '
>' (*
GetTestDetailsByPatientIdAsync) G
(G H
intH K
	patientIdL U
)U V
;V W
Task 
< 
List 
< (
PatientPrescriptionDetailDto .
>. /
>/ 02
&GetPrescriptionDetailsByPatientIdAsync1 W
(W X
intX [
	patientId\ e
)e f
;f g
Task 
< 
List 
< 

BillingDto 
> 
> -
!GetBillingDetailsByPatientIdAsync @
(@ A
intA D
	patientIdE N
)N O
;O P
Task 
< 
Appointment 
? 
> /
#GetAppointmentByIdAndPatientIdAsync >
(> ?
int? B
appointmentIdC P
,P Q
intR U
	patientIdV _
)_ `
;` a
Task 
< 
bool 
> #
IsDoctorOnScheduleAsync *
(* +
int+ .
doctorId/ 7
,7 8
DateTime9 A
newAppointmentDateB T
)T U
;U V
Task 
< 
User 
? 
> 
GetUserByIdAsync $
($ %
int% (
userId) /
)/ 0
;0 1
Task 
UpdateUserAsync 
( 
User !
user" &
)& '
;' (
Task 
< 
bool 
> $
IsUsernameAvailableAsync +
(+ ,
string, 2
username3 ;
); <
;< =
Task 
< 
List 
< 
DoctorSchedule  
>  !
>! ""
GetDoctorScheduleAsync# 9
(9 :
int: =
doctorId> F
)F G
;G H
Task   
<   
IEnumerable   
<   
Billing    
>    !
>  ! "$
GetBillsByPatientIdAsync  # ;
(  ; <
int  < ?
	patientId  @ I
)  I J
;  J K
}!! 
}"" Õ
mC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Repositories\Interface\IUserRepository.cs
	namespace 	
AmazeCareAPI
 
. 
Repositories #
.# $
	Interface$ -
{ 
public 

	interface 
IUserRepository $
{ 
Task		 
<		 
bool		 
>		 $
IsUsernameAvailableAsync		 +
(		+ ,
string		, 2
username		3 ;
)		; <
;		< =
Task

 
<

 
User

 
>

 
AddUserAsync

 
(

  
User

  $
user

% )
)

) *
;

* +
Task 
< 
Patient 
> 
AddPatientAsync %
(% &
Patient& -
patient. 5
)5 6
;6 7
Task 
< 
User 
>  
GetUserWithRoleAsync '
(' (
string( .
username/ 7
)7 8
;8 9
} 
} ·„
eC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Repositories\PatientRepository.cs
	namespace 	
AmazeCareAPI
 
. 
Repositories #
{ 
public		 

class		 
PatientRepository		 "
:		# $
IPatientRepository		% 7
{

 
private 
readonly 
AmazeCareContext )
_context* 2
;2 3
public 
PatientRepository  
(  !
AmazeCareContext! 1
context2 9
)9 :
{ 	
_context 
= 
context 
; 
} 	
public 
async 
Task 
< 
bool 
> $
IsUsernameAvailableAsync  8
(8 9
string9 ?
username@ H
)H I
{ 	
return 
! 
await 
_context "
." #
Users# (
.( )
AnyAsync) 1
(1 2
u2 3
=>4 6
u7 8
.8 9
Username9 A
==B D
usernameE M
)M N
;N O
} 	
public 
async 
Task 
< 
User 
? 
>  
GetUserByIdAsync! 1
(1 2
int2 5
userId6 <
)< =
{ 	
return 
await 
_context !
.! "
Users" '
.' (
FirstOrDefaultAsync( ;
(; <
u< =
=>> @
uA B
.B C
UserIDC I
==J L
userIdM S
)S T
;T U
} 	
public 
async 
Task 
UpdateUserAsync )
() *
User* .
user/ 3
)3 4
{ 	
_context 
. 
Users 
. 
Update !
(! "
user" &
)& '
;' (
await 
_context 
. 
SaveChangesAsync +
(+ ,
), -
;- .
}   	
public"" 
async"" 
Task"" 
<"" 
int"" 
>"" %
GetPatientIdByUserIdAsync"" 8
(""8 9
int""9 <
userId""= C
)""C D
{## 	
return$$ 
await$$ 
_context$$ !
.$$! "
Patients$$" *
.%% 
Where%% 
(%% 
p%% 
=>%% 
p%% 
.%% 
UserID%% $
==%%% '
userId%%( .
)%%. /
.&& 
Select&& 
(&& 
p&& 
=>&& 
p&& 
.&& 
	PatientID&& (
)&&( )
.'' 
FirstOrDefaultAsync'' $
(''$ %
)''% &
;''& '
}(( 	
public)) 
async)) 
Task)) 
<)) 
Patient)) !
?))! "
>))" ##
GetPatientByUserIdAsync))$ ;
()); <
int))< ?
userId))@ F
)))F G
{** 	
return++ 
await++ 
_context++ !
.++! "
Patients++" *
.++* +
FirstOrDefaultAsync+++ >
(++> ?
p++? @
=>++A C
p++D E
.++E F
UserID++F L
==++M O
userId++P V
)++V W
;++W X
},, 	
public.. 
async.. 
Task.. 
<.. 
int.. 
>.. 
SaveChangesAsync.. /
(../ 0
)..0 1
{// 	
return00 
await00 
_context00 !
.00! "
SaveChangesAsync00" 2
(002 3
)003 4
;004 5
}11 	
public22 
async22 
Task22 
UpdatePatientAsync22 ,
(22, -
Patient22- 4
patient225 <
)22< =
{33 	
_context44 
.44 
Patients44 
.44 
Update44 $
(44$ %
patient44% ,
)44, -
;44- .
await55 
_context55 
.55 
SaveChangesAsync55 +
(55+ ,
)55, -
;55- .
}66 	
public88 
async88 
Task88 
<88 
bool88 
>88 
IsDoctorOnSchedule88  2
(882 3
int883 6
doctorId887 ?
,88? @
DateTime88A I
appointmentDate88J Y
)88Y Z
{99 	
return:: 
await:: 
_context:: !
.::! "
DoctorSchedule::" 0
.::0 1
AnyAsync::1 9
(::9 :
h::: ;
=>::< >
h;; 
.;; 
DoctorID;; 
==;; 
doctorId;; &
&&;;' )
h;;* +
.;;+ ,
Status;;, 2
==;;3 5
$str;;6 A
&&;;B D
appointmentDate<< 
>=<<  "
h<<# $
.<<$ %
	StartDate<<% .
&&<</ 1
appointmentDate<<2 A
<=<<B D
h<<E F
.<<F G
EndDate<<G N
)<<N O
;<<O P
}== 	
public?? 
async?? 
Task?? 
<?? 
List?? 
<?? 
DoctorSchedule?? -
>??- .
>??. /"
GetDoctorScheduleAsync??0 F
(??F G
int??G J
doctorId??K S
)??S T
{@@ 	
returnAA 
awaitAA 
_contextAA !
.AA! "
DoctorScheduleAA" 0
.BB 
WhereBB 
(BB 
hBB 
=>BB 
hBB 
.BB 
DoctorIDBB &
==BB' )
doctorIdBB* 2
&&BB3 5
hBB6 7
.BB7 8
StatusBB8 >
==BB? A
$strBBB M
)BBM N
.CC 
ToListAsyncCC 
(CC 
)CC 
;CC 
}DD 	
publicFF 
asyncFF 
TaskFF 
AddAppointmentAsyncFF -
(FF- .
AppointmentFF. 9
appointmentFF: E
)FFE F
{GG 	
awaitHH 
_contextHH 
.HH 
AppointmentsHH '
.HH' (
AddAsyncHH( 0
(HH0 1
appointmentHH1 <
)HH< =
;HH= >
}II 	
publicKK 
asyncKK 
TaskKK 
<KK 
IEnumerableKK %
<KK% &
	DoctorDtoKK& /
>KK/ 0
>KK0 1
SearchDoctorsAsyncKK2 D
(KKD E
stringKKE K
?KKK L
specializationKKM [
)KK[ \
{LL 	
varMM 
queryMM 
=MM 
_contextMM  
.MM  !
DoctorsMM! (
.MM( )
AsQueryableMM) 4
(MM4 5
)MM5 6
;MM6 7
queryOO 
=OO 
queryOO 
.OO 
WhereOO 
(OO  
dOO  !
=>OO" $
dOO% &
.OO& '
DesignationOO' 2
!=OO3 5
$strOO6 @
)OO@ A
;OOA B
ifQQ 
(QQ 
!QQ 
stringQQ 
.QQ 
IsNullOrEmptyQQ %
(QQ% &
specializationQQ& 4
)QQ4 5
)QQ5 6
{RR 
querySS 
=SS 
querySS 
.TT 
WhereTT 
(TT 
dTT 
=>TT 
dTT  !
.TT! "!
DoctorSpecializationsTT" 7
.UU 
AnyUU 
(UU 
dsUU 
=>UU  "
dsUU# %
.UU% &
SpecializationUU& 4
.UU4 5
SpecializationNameUU5 G
==UUH J
specializationUUK Y
)UUY Z
)UUZ [
;UU[ \
}VV 
returnXX 
awaitXX 
queryXX 
.XX 
SelectXX %
(XX% &
dXX& '
=>XX( *
newXX+ .
	DoctorDtoXX/ 8
{YY 
DoctorIDZZ 
=ZZ 
dZZ 
.ZZ 
DoctorIDZZ %
,ZZ% &
FullName[[ 
=[[ 
d[[ 
.[[ 
FullName[[ %
,[[% &
ExperienceYears\\ 
=\\  !
d\\" #
.\\# $
ExperienceYears\\$ 3
,\\3 4
Qualification]] 
=]] 
d]]  !
.]]! "
Qualification]]" /
,]]/ 0
Designation^^ 
=^^ 
d^^ 
.^^  
Designation^^  +
,^^+ ,
Email__ 
=__ 
d__ 
.__ 
Email__ 
,__  
Specializations`` 
=``  !
d``" #
.``# $!
DoctorSpecializations``$ 9
.aa 
Selectaa 
(aa 
dsaa 
=>aa !
dsaa" $
.aa$ %
Specializationaa% 3
.aa3 4
SpecializationNameaa4 F
)aaF G
.bb 
ToListbb 
(bb 
)bb 
}dd 
)dd 
.dd 
ToListAsyncdd 
(dd 
)dd 
;dd 
}ee 	
publicgg 
asyncgg 
Taskgg 
<gg 
Appointmentgg %
?gg% &
>gg& '#
GetAppointmentByIdAsyncgg( ?
(gg? @
intgg@ C
appointmentIdggD Q
)ggQ R
{hh 	
returnii 
awaitii 
_contextii !
.ii! "
Appointmentsii" .
.ii. /
	FindAsyncii/ 8
(ii8 9
appointmentIdii9 F
)iiF G
;iiG H
}jj 	
publickk 
asynckk 
Taskkk 
<kk 
Appointmentkk %
?kk% &
>kk& '#
GetAppointmentByIdAsynckk( ?
(kk? @
intkk@ C
	patientIdkkD M
,kkM N
intkkO R
appointmentIdkkS `
)kk` a
{ll 	
returnmm 
awaitmm 
_contextmm !
.mm! "
Appointmentsmm" .
.nn 
FirstOrDefaultAsyncnn $
(nn$ %
ann% &
=>nn' )
ann* +
.nn+ ,
	PatientIDnn, 5
==nn6 8
	patientIdnn9 B
&&nnC E
annF G
.nnG H
AppointmentIDnnH U
==nnV X
appointmentIdnnY f
)nnf g
;nng h
}oo 	
publicpp 
asyncpp 
Taskpp "
UpdateAppointmentAsyncpp 0
(pp0 1
Appointmentpp1 <
appointmentpp= H
)ppH I
{qq 	
_contextrr 
.rr 
Appointmentsrr !
.rr! "
Updaterr" (
(rr( )
appointmentrr) 4
)rr4 5
;rr5 6
awaitss 
_contextss 
.ss 
SaveChangesAsyncss +
(ss+ ,
)ss, -
;ss- .
}tt 	
publicxx 
asyncxx 
Taskxx 
<xx 
IEnumerablexx %
<xx% &$
AppointmentWithDoctorDtoxx& >
>xx> ?
>xx? @+
GetAppointmentsByPatientIdAsyncxxA `
(xx` a
intxxa d
	patientIdxxe n
)xxn o
{yy 	
returnzz 
awaitzz 
_contextzz !
.zz! "
Appointmentszz" .
.{{ 
Where{{ 
({{ 
a{{ 
=>{{ 
a{{ 
.{{ 
	PatientID{{ '
=={{( *
	patientId{{+ 4
){{4 5
.|| 
Include|| 
(|| 
a|| 
=>|| 
a|| 
.||  
Doctor||  &
)||& '
.}} 
Select}} 
(}} 
a}} 
=>}} 
new}}  $
AppointmentWithDoctorDto}}! 9
{~~ 
AppointmentID !
=" #
a$ %
.% &
AppointmentID& 3
,3 4
	PatientID
ÄÄ 
=
ÄÄ 
a
ÄÄ  !
.
ÄÄ! "
	PatientID
ÄÄ" +
,
ÄÄ+ ,
DoctorID
ÅÅ 
=
ÅÅ 
a
ÅÅ  
.
ÅÅ  !
DoctorID
ÅÅ! )
,
ÅÅ) *

DoctorName
ÇÇ 
=
ÇÇ  
a
ÇÇ! "
.
ÇÇ" #
Doctor
ÇÇ# )
.
ÇÇ) *
FullName
ÇÇ* 2
,
ÇÇ2 3
AppointmentDate
ÉÉ #
=
ÉÉ$ %
a
ÉÉ& '
.
ÉÉ' (
AppointmentDate
ÉÉ( 7
,
ÉÉ7 8
Status
ÑÑ 
=
ÑÑ 
a
ÑÑ 
.
ÑÑ 
Status
ÑÑ %
,
ÑÑ% &
}
ÖÖ 
)
ÖÖ 
.
ÜÜ 
ToListAsync
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
}
áá 	
public
ää 
async
ää 
Task
ää 
<
ää 
List
ää 
<
ää %
PatientMedicalRecordDto
ää 6
>
ää6 7
>
ää7 8$
GetMedicalHistoryAsync
ää9 O
(
ääO P
int
ääP S
	patientId
ääT ]
)
ää] ^
{
ãã 	
return
åå 
await
åå 
_context
åå !
.
åå! "
Appointments
åå" .
.
çç 
Where
çç 
(
çç 
a
çç 
=>
çç 
a
çç 
.
çç 
	PatientID
çç '
==
çç( *
	patientId
çç+ 4
&&
çç5 7
a
çç8 9
.
çç9 :
MedicalRecord
çç: G
!=
ççH J
null
ççK O
)
ççO P
.
éé 
Include
éé 
(
éé 
a
éé 
=>
éé 
a
éé 
.
éé  
Doctor
éé  &
)
éé& '
.
èè 
Include
èè 
(
èè 
a
èè 
=>
èè 
a
èè 
.
èè  
MedicalRecord
èè  -
)
èè- .
.
êê 
ThenInclude
êê  
(
êê  !
m
êê! "
=>
êê# %
m
êê& '
.
êê' ( 
MedicalRecordTests
êê( :
)
êê: ;
.
ëë 
ThenInclude
ëë $
(
ëë$ %
mt
ëë% '
=>
ëë( *
mt
ëë+ -
.
ëë- .
Test
ëë. 2
)
ëë2 3
.
íí 
Include
íí 
(
íí 
a
íí 
=>
íí 
a
íí 
.
íí  
MedicalRecord
íí  -
)
íí- .
.
ìì 
ThenInclude
ìì  
(
ìì  !
m
ìì! "
=>
ìì# %
m
ìì& '
.
ìì' (
Prescriptions
ìì( 5
)
ìì5 6
.
îî 
Select
îî 
(
îî 
a
îî 
=>
îî 
new
îî  %
PatientMedicalRecordDto
îî! 8
{
ïï 
MedicalRecordID
ññ #
=
ññ$ %
a
ññ& '
.
ññ' (
MedicalRecord
ññ( 5
.
ññ5 6
RecordID
ññ6 >
,
ññ> ?
AppointmentDate
óó #
=
óó$ %
a
óó& '
.
óó' (
AppointmentDate
óó( 7
,
óó7 8

DoctorName
òò 
=
òò  
a
òò! "
.
òò" #
Doctor
òò# )
.
òò) *
FullName
òò* 2
,
òò2 3
Symptoms
ôô 
=
ôô 
a
ôô  
.
ôô  !
MedicalRecord
ôô! .
.
ôô. /
Symptoms
ôô/ 7
,
ôô7 8!
PhysicalExamination
öö '
=
öö( )
a
öö* +
.
öö+ ,
MedicalRecord
öö, 9
.
öö9 :!
PhysicalExamination
öö: M
,
ööM N
TreatmentPlan
õõ !
=
õõ" #
a
õõ$ %
.
õõ% &
MedicalRecord
õõ& 3
.
õõ3 4
TreatmentPlan
õõ4 A
,
õõA B
FollowUpDate
úú  
=
úú! "
a
úú# $
.
úú$ %
MedicalRecord
úú% 2
.
úú2 3
FollowUpDate
úú3 ?
,
úú? @
Tests
ùù 
=
ùù 
a
ùù 
.
ùù 
MedicalRecord
ùù +
.
ùù+ , 
MedicalRecordTests
ùù, >
.
ùù> ?
Select
ùù? E
(
ùùE F
mt
ùùF H
=>
ùùI K
new
ùùL O
TestDto
ùùP W
{
ûû 
TestName
üü  
=
üü! "
mt
üü# %
.
üü% &
Test
üü& *
.
üü* +
TestName
üü+ 3
,
üü3 4
	TestPrice
†† !
=
††" #
mt
††$ &
.
††& '
Test
††' +
.
††+ ,
	TestPrice
††, 5
}
°° 
)
°° 
.
°° 
ToList
°° 
(
°° 
)
°° 
,
°°  
Prescriptions
¢¢ !
=
¢¢" #
a
¢¢$ %
.
¢¢% &
MedicalRecord
¢¢& 3
.
¢¢3 4
Prescriptions
¢¢4 A
.
¢¢A B
Select
¢¢B H
(
¢¢H I
p
¢¢I J
=>
¢¢K M
new
¢¢N Q
PrescriptionDto
¢¢R a
{
££ 
MedicationName
§§ &
=
§§' (
p
§§) *
.
§§* +
MedicationName
§§+ 9
,
§§9 :
Dosage
•• 
=
••  
p
••! "
.
••" #
Dosage
••# )
,
••) *
DurationDays
¶¶ $
=
¶¶% &
p
¶¶' (
.
¶¶( )
DurationDays
¶¶) 5
,
¶¶5 6
Quantity
ßß  
=
ßß! "
p
ßß# $
.
ßß$ %
Quantity
ßß% -
}
®® 
)
®® 
.
®® 
ToList
®® 
(
®® 
)
®® 
,
®®  
BillingDetails
©© "
=
©©# $
_context
©©% -
.
©©- .
Billing
©©. 5
.
™™ 
Where
™™ 
(
™™ 
b
™™  
=>
™™! #
b
™™$ %
.
™™% &
	PatientID
™™& /
==
™™0 2
	patientId
™™3 <
&&
™™= ?
b
™™@ A
.
™™A B
MedicalRecordID
™™B Q
==
™™R T
a
™™U V
.
™™V W
MedicalRecord
™™W d
.
™™d e
RecordID
™™e m
)
™™m n
.
´´ 
Select
´´ 
(
´´  
b
´´  !
=>
´´" $
new
´´% (

BillingDto
´´) 3
{
¨¨ 
	BillingID
≠≠ %
=
≠≠& '
b
≠≠( )
.
≠≠) *
	BillingID
≠≠* 3
,
≠≠3 4
ConsultationFee
ÆÆ +
=
ÆÆ, -
b
ÆÆ. /
.
ÆÆ/ 0
ConsultationFee
ÆÆ0 ?
,
ÆÆ? @
TotalTestsPrice
ØØ +
=
ØØ, -
b
ØØ. /
.
ØØ/ 0
TotalTestsPrice
ØØ0 ?
,
ØØ? @#
TotalMedicationsPrice
∞∞ 1
=
∞∞2 3
b
∞∞4 5
.
∞∞5 6#
TotalMedicationsPrice
∞∞6 K
,
∞∞K L

GrandTotal
±± &
=
±±' (
b
±±) *
.
±±* +

GrandTotal
±±+ 5
,
±±5 6
Status
≤≤ "
=
≤≤# $
b
≤≤% &
.
≤≤& '
Status
≤≤' -
}
≥≥ 
)
≥≥ 
.
≥≥ 
FirstOrDefault
≥≥ )
(
≥≥) *
)
≥≥* +
}
¥¥ 
)
¥¥ 
.
¥¥ 
ToListAsync
¥¥ 
(
¥¥ 
)
¥¥  
;
¥¥  !
}
µµ 	
public
∏∏ 
async
∏∏ 
Task
∏∏ 
<
∏∏ 
List
∏∏ 
<
∏∏ "
PatientTestDetailDto
∏∏ 3
>
∏∏3 4
>
∏∏4 5,
GetTestDetailsByPatientIdAsync
∏∏6 T
(
∏∏T U
int
∏∏U X
	patientId
∏∏Y b
)
∏∏b c
{
ππ 	
return
∫∫ 
await
∫∫ 
_context
∫∫ !
.
∫∫! "
Appointments
∫∫" .
.
ªª 
Where
ªª 
(
ªª 
a
ªª 
=>
ªª 
a
ªª 
.
ªª 
	PatientID
ªª '
==
ªª( *
	patientId
ªª+ 4
)
ªª4 5
.
ºº 
Include
ºº 
(
ºº 
a
ºº 
=>
ºº 
a
ºº 
.
ºº  
Doctor
ºº  &
)
ºº& '
.
ΩΩ 
Include
ΩΩ 
(
ΩΩ 
a
ΩΩ 
=>
ΩΩ 
a
ΩΩ 
.
ΩΩ  
MedicalRecord
ΩΩ  -
)
ΩΩ- .
.
ææ 
ThenInclude
ææ  
(
ææ  !
m
ææ! "
=>
ææ# %
m
ææ& '
.
ææ' ( 
MedicalRecordTests
ææ( :
)
ææ: ;
.
øø 
ThenInclude
øø $
(
øø$ %
mt
øø% '
=>
øø( *
mt
øø+ -
.
øø- .
Test
øø. 2
)
øø2 3
.
¿¿ 

SelectMany
¿¿ 
(
¿¿ 
a
¿¿ 
=>
¿¿  
a
¿¿! "
.
¿¿" #
MedicalRecord
¿¿# 0
.
¿¿0 1 
MedicalRecordTests
¿¿1 C
.
¿¿C D
Select
¿¿D J
(
¿¿J K
mt
¿¿K M
=>
¿¿N P
new
¿¿Q T"
PatientTestDetailDto
¿¿U i
{
¡¡ 
AppointmentId
¬¬ !
=
¬¬" #
a
¬¬$ %
.
¬¬% &
AppointmentID
¬¬& 3
,
¬¬3 4

DoctorName
√√ 
=
√√  
a
√√! "
.
√√" #
Doctor
√√# )
.
√√) *
FullName
√√* 2
,
√√2 3
TestId
ƒƒ 
=
ƒƒ 
mt
ƒƒ 
.
ƒƒ  
Test
ƒƒ  $
.
ƒƒ$ %
TestID
ƒƒ% +
,
ƒƒ+ ,
TestName
≈≈ 
=
≈≈ 
mt
≈≈ !
.
≈≈! "
Test
≈≈" &
.
≈≈& '
TestName
≈≈' /
,
≈≈/ 0
	TestPrice
∆∆ 
=
∆∆ 
mt
∆∆  "
.
∆∆" #
Test
∆∆# '
.
∆∆' (
	TestPrice
∆∆( 1
}
«« 
)
«« 
)
«« 
.
»» 
ToListAsync
»» 
(
»» 
)
»» 
;
»» 
}
…… 	
public
ÀÀ 
async
ÀÀ 
Task
ÀÀ 
<
ÀÀ 
List
ÀÀ 
<
ÀÀ *
PatientPrescriptionDetailDto
ÀÀ ;
>
ÀÀ; <
>
ÀÀ< =4
&GetPrescriptionDetailsByPatientIdAsync
ÀÀ> d
(
ÀÀd e
int
ÀÀe h
	patientId
ÀÀi r
)
ÀÀr s
{
ÃÃ 	
return
ÕÕ 
await
ÕÕ 
_context
ÕÕ !
.
ÕÕ! "
Appointments
ÕÕ" .
.
ŒŒ 
Where
ŒŒ 
(
ŒŒ 
a
ŒŒ 
=>
ŒŒ 
a
ŒŒ 
.
ŒŒ 
	PatientID
ŒŒ '
==
ŒŒ( *
	patientId
ŒŒ+ 4
)
ŒŒ4 5
.
œœ 
Include
œœ 
(
œœ 
a
œœ 
=>
œœ 
a
œœ 
.
œœ  
Doctor
œœ  &
)
œœ& '
.
–– 
Include
–– 
(
–– 
a
–– 
=>
–– 
a
–– 
.
––  
MedicalRecord
––  -
)
––- .
.
—— 
ThenInclude
——  
(
——  !
m
——! "
=>
——# %
m
——& '
.
——' (
Prescriptions
——( 5
)
——5 6
.
““ 

SelectMany
““ 
(
““ 
a
““ 
=>
““  
a
““! "
.
““" #
MedicalRecord
““# 0
.
““0 1
Prescriptions
““1 >
.
““> ?
Select
““? E
(
““E F
p
““F G
=>
““H J
new
““K N*
PatientPrescriptionDetailDto
““O k
{
”” 
AppointmentId
‘‘ !
=
‘‘" #
a
‘‘$ %
.
‘‘% &
AppointmentID
‘‘& 3
,
‘‘3 4

DoctorName
’’ 
=
’’  
a
’’! "
.
’’" #
Doctor
’’# )
.
’’) *
FullName
’’* 2
??
’’3 5
$str
’’6 ;
,
’’; <
MedicationName
÷÷ "
=
÷÷# $
p
÷÷% &
.
÷÷& '
MedicationName
÷÷' 5
??
÷÷6 8
string
÷÷9 ?
.
÷÷? @
Empty
÷÷@ E
,
÷÷E F
Dosage
◊◊ 
=
◊◊ 
p
◊◊ 
.
◊◊ 
Dosage
◊◊ %
??
◊◊& (
string
◊◊) /
.
◊◊/ 0
Empty
◊◊0 5
,
◊◊5 6
DurationDays
ÿÿ  
=
ÿÿ! "
p
ÿÿ# $
.
ÿÿ$ %
DurationDays
ÿÿ% 1
,
ÿÿ1 2
Quantity
ŸŸ 
=
ŸŸ 
p
ŸŸ  
.
ŸŸ  !
Quantity
ŸŸ! )
}
⁄⁄ 
)
⁄⁄ 
)
⁄⁄ 
.
€€ 
ToListAsync
€€ 
(
€€ 
)
€€ 
;
€€ 
}
‹‹ 	
public
ﬁﬁ 
async
ﬁﬁ 
Task
ﬁﬁ 
<
ﬁﬁ 
List
ﬁﬁ 
<
ﬁﬁ 

BillingDto
ﬁﬁ )
>
ﬁﬁ) *
>
ﬁﬁ* +/
!GetBillingDetailsByPatientIdAsync
ﬁﬁ, M
(
ﬁﬁM N
int
ﬁﬁN Q
	patientId
ﬁﬁR [
)
ﬁﬁ[ \
{
ﬂﬂ 	
return
‡‡ 
await
‡‡ 
_context
‡‡ !
.
‡‡! "
Billing
‡‡" )
.
·· 
Where
·· 
(
·· 
b
·· 
=>
·· 
b
·· 
.
·· 
	PatientID
·· '
==
··( *
	patientId
··+ 4
)
··4 5
.
‚‚ 
Select
‚‚ 
(
‚‚ 
b
‚‚ 
=>
‚‚ 
new
‚‚  

BillingDto
‚‚! +
{
„„ 
	BillingID
‰‰ 
=
‰‰ 
b
‰‰  !
.
‰‰! "
	BillingID
‰‰" +
,
‰‰+ ,
ConsultationFee
ÂÂ #
=
ÂÂ$ %
b
ÂÂ& '
.
ÂÂ' (
ConsultationFee
ÂÂ( 7
,
ÂÂ7 8
TotalTestsPrice
ÊÊ #
=
ÊÊ$ %
b
ÊÊ& '
.
ÊÊ' (
TotalTestsPrice
ÊÊ( 7
,
ÊÊ7 8#
TotalMedicationsPrice
ÁÁ )
=
ÁÁ* +
b
ÁÁ, -
.
ÁÁ- .#
TotalMedicationsPrice
ÁÁ. C
,
ÁÁC D

GrandTotal
ËË 
=
ËË  
b
ËË! "
.
ËË" #

GrandTotal
ËË# -
,
ËË- .
Status
ÈÈ 
=
ÈÈ 
b
ÈÈ 
.
ÈÈ 
Status
ÈÈ %
}
ÍÍ 
)
ÍÍ 
.
ÎÎ 
ToListAsync
ÎÎ 
(
ÎÎ 
)
ÎÎ 
;
ÎÎ 
}
ÏÏ 	
public
ÓÓ 
async
ÓÓ 
Task
ÓÓ 
<
ÓÓ 
Appointment
ÓÓ %
?
ÓÓ% &
>
ÓÓ& '1
#GetAppointmentByIdAndPatientIdAsync
ÓÓ( K
(
ÓÓK L
int
ÓÓL O
appointmentId
ÓÓP ]
,
ÓÓ] ^
int
ÓÓ_ b
	patientId
ÓÓc l
)
ÓÓl m
{
ÔÔ 	
return
 
await
 
_context
 !
.
! "
Appointments
" .
.
ÒÒ !
FirstOrDefaultAsync
ÒÒ $
(
ÒÒ$ %
a
ÒÒ% &
=>
ÒÒ' )
a
ÒÒ* +
.
ÒÒ+ ,
AppointmentID
ÒÒ, 9
==
ÒÒ: <
appointmentId
ÒÒ= J
&&
ÒÒK M
a
ÒÒN O
.
ÒÒO P
	PatientID
ÒÒP Y
==
ÒÒZ \
	patientId
ÒÒ] f
)
ÒÒf g
;
ÒÒg h
}
ÚÚ 	
public
ÙÙ 
async
ÙÙ 
Task
ÙÙ 
<
ÙÙ 
bool
ÙÙ 
>
ÙÙ %
IsDoctorOnScheduleAsync
ÙÙ  7
(
ÙÙ7 8
int
ÙÙ8 ;
doctorId
ÙÙ< D
,
ÙÙD E
DateTime
ÙÙF N 
newAppointmentDate
ÙÙO a
)
ÙÙa b
{
ıı 	
return
ˆˆ 
await
ˆˆ 
_context
ˆˆ !
.
ˆˆ! "
DoctorSchedule
ˆˆ" 0
.
˜˜ 
AnyAsync
˜˜ 
(
˜˜ 
h
˜˜ 
=>
˜˜ 
h
˜˜  
.
˜˜  !
DoctorID
˜˜! )
==
˜˜* ,
doctorId
˜˜- 5
&&
¯¯ !
h
¯¯" #
.
¯¯# $
Status
¯¯$ *
==
¯¯+ -
$str
¯¯. 9
&&
˘˘ ! 
newAppointmentDate
˘˘" 4
>=
˘˘5 7
h
˘˘8 9
.
˘˘9 :
	StartDate
˘˘: C
&&
˙˙ ! 
newAppointmentDate
˙˙" 4
<=
˙˙5 7
h
˙˙8 9
.
˙˙9 :
EndDate
˙˙: A
)
˙˙A B
;
˙˙B C
}
˚˚ 	
public
˝˝ 
async
˝˝ 
Task
˝˝ 
<
˝˝ 
IEnumerable
˝˝ %
<
˝˝% &
Billing
˝˝& -
>
˝˝- .
>
˝˝. /&
GetBillsByPatientIdAsync
˝˝0 H
(
˝˝H I
int
˝˝I L
	patientId
˝˝M V
)
˝˝V W
{
˛˛ 	
return
ˇˇ 
await
ˇˇ 
_context
ˇˇ !
.
ˇˇ! "
Billing
ˇˇ" )
.
ÄÄ 
Include
ÄÄ 
(
ÄÄ 
b
ÄÄ 
=>
ÄÄ 
b
ÄÄ 
.
ÄÄ  
Doctor
ÄÄ  &
)
ÄÄ& '
.
ÅÅ 
Include
ÅÅ 
(
ÅÅ 
b
ÅÅ 
=>
ÅÅ 
b
ÅÅ 
.
ÅÅ  
Patient
ÅÅ  '
)
ÅÅ' (
.
ÇÇ 
Where
ÇÇ 
(
ÇÇ 
b
ÇÇ 
=>
ÇÇ 
b
ÇÇ 
.
ÇÇ 
	PatientID
ÇÇ '
==
ÇÇ( *
	patientId
ÇÇ+ 4
)
ÇÇ4 5
.
ÉÉ 
ToListAsync
ÉÉ 
(
ÉÉ 
)
ÉÉ 
;
ÉÉ 
}
ÑÑ 	
}
àà 
}ââ ó
bC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Repositories\UserRepository.cs
	namespace 	
AmazeCareAPI
 
. 
Repositories #
{ 
public		 

class		 
UserRepository		 
:		  !
IUserRepository		" 1
{

 
private 
readonly 
AmazeCareContext )
_context* 2
;2 3
public 
UserRepository 
( 
AmazeCareContext .
context/ 6
)6 7
{ 	
_context 
= 
context 
; 
} 	
public 
async 
Task 
< 
bool 
> $
IsUsernameAvailableAsync  8
(8 9
string9 ?
username@ H
)H I
{ 	
return 
! 
await 
_context "
." #
Users# (
.( )
AnyAsync) 1
(1 2
u2 3
=>4 6
u7 8
.8 9
Username9 A
==B D
usernameE M
)M N
;N O
} 	
public 
async 
Task 
< 
User 
> 
AddUserAsync  ,
(, -
User- 1
user2 6
)6 7
{ 	
_context 
. 
Users 
. 
Add 
( 
user #
)# $
;$ %
await 
_context 
. 
SaveChangesAsync +
(+ ,
), -
;- .
return 
user 
; 
} 	
public 
async 
Task 
< 
Patient !
>! "
AddPatientAsync# 2
(2 3
Patient3 :
patient; B
)B C
{ 	
_context   
.   
Patients   
.   
Add   !
(  ! "
patient  " )
)  ) *
;  * +
await!! 
_context!! 
.!! 
SaveChangesAsync!! +
(!!+ ,
)!!, -
;!!- .
return"" 
patient"" 
;"" 
}## 	
public%% 
async%% 
Task%% 
<%% 
User%% 
>%%  
GetUserWithRoleAsync%%  4
(%%4 5
string%%5 ;
username%%< D
)%%D E
{&& 	
return'' 
await'' 
_context'' !
.''! "
Users''" '
.(( 
Include(( 
((( 
u(( 
=>(( 
u(( 
.((  
Role((  $
)(($ %
.)) 
FirstOrDefaultAsync)) $
())$ %
u))% &
=>))' )
u))* +
.))+ ,
Username)), 4
==))5 7
username))8 @
)))@ A
;))A B
}** 	
},, 
}-- πô
\C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Services\AdminService.cs
	namespace 	
AmazeCareAPI
 
. 
Services 
{		 
public

 

class

 
AdminService

 
:

 
IAdminService

  -
{ 
private 
readonly 
IAdminRepository )
_adminRepository* :
;: ;
public 
AdminService 
( 
IAdminRepository ,
adminRepository- <
)< =
{ 	
_adminRepository 
= 
adminRepository .
;. /
} 	
public 
async 
Task 
< 
( 
bool 
IsAvailable  +
,+ ,
string- 3
Message4 ;
); <
>< =*
CheckUsernameAvailabilityAsync> \
(\ ]
string] c
usernamed l
)l m
{ 	
try 
{ 
bool 
isAvailable  
=! "
await# (
_adminRepository) 9
.9 :$
IsUsernameAvailableAsync: R
(R S
usernameS [
)[ \
;\ ]
string 
message 
=  
isAvailable! ,
?- .
$str/ G
:H I
$strJ f
;f g
return 
( 
isAvailable #
,# $
message% ,
), -
;- .
} 
catch 
( 
	Exception 
ex 
)  
{ 
throw 
new 
	Exception #
(# $
$str$ ]
,] ^
ex_ a
)a b
;b c
} 
} 	
public!! 
async!! 
Task!! 
<!! 
Administrator!! '
>!!' (
RegisterAdmin!!) 6
(!!6 7
string!!7 =
username!!> F
,!!F G
string!!H N
password!!O W
,!!W X
string!!Y _
fullName!!` h
,!!h i
string!!j p
email!!q v
)!!v w
{"" 	
try## 
{$$ 
var%% 
(%% 
isAvailable%%  
,%%  !
message%%" )
)%%) *
=%%+ ,
await%%- 2*
CheckUsernameAvailabilityAsync%%3 Q
(%%Q R
username%%R Z
)%%Z [
;%%[ \
if&& 
(&& 
!&& 
isAvailable&&  
)&&  !
throw&&" '
new&&( +%
InvalidOperationException&&, E
(&&E F
message&&F M
)&&M N
;&&N O
var(( 
user(( 
=(( 
new(( 
User(( #
{)) 
Username** 
=** 
username** '
,**' (
PasswordHash++  
=++! "
BCrypt++# )
.++) *
Net++* -
.++- .
BCrypt++. 4
.++4 5
HashPassword++5 A
(++A B
password++B J
)++J K
,++K L
RoleID,, 
=,, 
$num,, 
}-- 
;-- 
await.. 
_adminRepository.. &
...& '
CreateUserAsync..' 6
(..6 7
user..7 ;
)..; <
;..< =
var00 
admin00 
=00 
new00 
Administrator00  -
{11 
UserID22 
=22 
user22 !
.22! "
UserID22" (
,22( )
FullName33 
=33 
fullName33 '
,33' (
Email44 
=44 
email44 !
}55 
;55 
await66 
_adminRepository66 &
.66& '
CreateAdminAsync66' 7
(667 8
admin668 =
)66= >
;66> ?
return88 
admin88 
;88 
}99 
catch:: 
(:: 
	Exception:: 
ex:: 
)::  
{;; 
throw<< 
new<< 
	Exception<< #
(<<# $
$str<<$ T
,<<T U
ex<<V X
)<<X Y
;<<Y Z
}== 
}>> 	
public@@ 
async@@ 
Task@@ 
<@@ 
IEnumerable@@ %
<@@% &
SpecializationDto@@& 7
>@@7 8
>@@8 9&
GetAllSpecializationsAsync@@: T
(@@T U
)@@U V
{AA 	
tryBB 
{CC 
varDD 
specializationsDD #
=DD$ %
awaitDD& +
_adminRepositoryDD, <
.DD< =&
GetAllSpecializationsAsyncDD= W
(DDW X
)DDX Y
;DDY Z
returnFF 
specializationsFF &
.FF& '
SelectFF' -
(FF- .
sFF. /
=>FF0 2
newFF3 6
SpecializationDtoFF7 H
{GG 
SpecializationIDHH $
=HH% &
sHH' (
.HH( )
SpecializationIDHH) 9
,HH9 :
SpecializationNameII &
=II' (
sII) *
.II* +
SpecializationNameII+ =
}JJ 
)JJ 
.JJ 
ToListJJ 
(JJ 
)JJ 
;JJ 
}KK 
catchLL 
(LL 
	ExceptionLL 
exLL 
)LL  
{MM 
throwNN 
newNN 
	ExceptionNN #
(NN# $
$strNN$ Y
,NNY Z
exNN[ ]
)NN] ^
;NN^ _
}OO 
}PP 	
publicSS 
asyncSS 
TaskSS 
<SS 
DoctorSS  
>SS  !
RegisterDoctorSS" 0
(SS0 1!
DoctorRegistrationDtoSS1 F
	doctorDtoSSG P
)SSP Q
{TT 	
tryUU 
{VV 
varWW 
(WW 
isAvailableWW  
,WW  !
messageWW" )
)WW) *
=WW+ ,
awaitWW- 2*
CheckUsernameAvailabilityAsyncWW3 Q
(WWQ R
	doctorDtoWWR [
.WW[ \
UsernameWW\ d
)WWd e
;WWe f
ifXX 
(XX 
!XX 
isAvailableXX  
)XX  !
throwXX" '
newXX( +%
InvalidOperationExceptionXX, E
(XXE F
messageXXF M
)XXM N
;XXN O
varZZ 
userZZ 
=ZZ 
newZZ 
UserZZ #
{[[ 
Username\\ 
=\\ 
	doctorDto\\ (
.\\( )
Username\\) 1
,\\1 2
PasswordHash]]  
=]]! "
BCrypt]]# )
.]]) *
Net]]* -
.]]- .
BCrypt]]. 4
.]]4 5
HashPassword]]5 A
(]]A B
	doctorDto]]B K
.]]K L
Password]]L T
)]]T U
,]]U V
RoleID^^ 
=^^ 
$num^^ 
}__ 
;__ 
await`` 
_adminRepository`` &
.``& '
CreateUserAsync``' 6
(``6 7
user``7 ;
)``; <
;``< =
varbb 
doctorbb 
=bb 
newbb  
Doctorbb! '
{cc 
UserIDdd 
=dd 
userdd !
.dd! "
UserIDdd" (
,dd( )
FullNameee 
=ee 
	doctorDtoee (
.ee( )
FullNameee) 1
,ee1 2
Emailff 
=ff 
	doctorDtoff %
.ff% &
Emailff& +
,ff+ ,
ExperienceYearsgg #
=gg$ %
	doctorDtogg& /
.gg/ 0
ExperienceYearsgg0 ?
,gg? @
Qualificationhh !
=hh" #
	doctorDtohh$ -
.hh- .
Qualificationhh. ;
,hh; <
Designationii 
=ii  !
	doctorDtoii" +
.ii+ ,
Designationii, 7
}jj 
;jj 
awaitkk 
_adminRepositorykk &
.kk& '
CreateDoctorAsynckk' 8
(kk8 9
doctorkk9 ?
,kk? @
	doctorDtokkA J
.kkJ K
SpecializationIdskkK \
)kk\ ]
;kk] ^
returnmm 
doctormm 
;mm 
}nn 
catchoo 
(oo 
	Exceptionoo 
exoo 
)oo  
{pp 
throwqq 
newqq 
	Exceptionqq #
(qq# $
$strqq$ U
,qqU V
exqqW Y
)qqY Z
;qqZ [
}rr 
}ss 	
publicuu 
asyncuu 
Taskuu 
<uu 
booluu 
>uu 
UpdateDoctorDetailsuu  3
(uu3 4
intuu4 7
doctorIduu8 @
,uu@ A
DoctorUpdateDtouuB Q
	doctorDtouuR [
)uu[ \
{vv 	
tryww 
{xx 
varyy 
doctoryy 
=yy 
awaityy "
_adminRepositoryyy# 3
.yy3 4-
!GetDoctorWithSpecializationsAsyncyy4 U
(yyU V
doctorIdyyV ^
)yy^ _
;yy_ `
if{{ 
({{ 
doctor{{ 
=={{ 
null{{ "
){{" #
return{{$ *
false{{+ 0
;{{0 1
if}} 
(}} 
!}} 
string}} 
.}} 
IsNullOrEmpty}} )
(}}) *
	doctorDto}}* 3
.}}3 4
FullName}}4 <
)}}< =
)}}= >
doctor}}? E
.}}E F
FullName}}F N
=}}O P
	doctorDto}}Q Z
.}}Z [
FullName}}[ c
;}}c d
if~~ 
(~~ 
!~~ 
string~~ 
.~~ 
IsNullOrEmpty~~ )
(~~) *
	doctorDto~~* 3
.~~3 4
Email~~4 9
)~~9 :
)~~: ;
doctor~~< B
.~~B C
Email~~C H
=~~I J
	doctorDto~~K T
.~~T U
Email~~U Z
;~~Z [
if 
( 
	doctorDto 
. 
ExperienceYears -
.- .
HasValue. 6
)6 7
doctor8 >
.> ?
ExperienceYears? N
=O P
	doctorDtoQ Z
.Z [
ExperienceYears[ j
.j k
Valuek p
;p q
if
ÄÄ 
(
ÄÄ 
!
ÄÄ 
string
ÄÄ 
.
ÄÄ 
IsNullOrEmpty
ÄÄ )
(
ÄÄ) *
	doctorDto
ÄÄ* 3
.
ÄÄ3 4
Qualification
ÄÄ4 A
)
ÄÄA B
)
ÄÄB C
doctor
ÄÄD J
.
ÄÄJ K
Qualification
ÄÄK X
=
ÄÄY Z
	doctorDto
ÄÄ[ d
.
ÄÄd e
Qualification
ÄÄe r
;
ÄÄr s
if
ÅÅ 
(
ÅÅ 
!
ÅÅ 
string
ÅÅ 
.
ÅÅ 
IsNullOrEmpty
ÅÅ )
(
ÅÅ) *
	doctorDto
ÅÅ* 3
.
ÅÅ3 4
Designation
ÅÅ4 ?
)
ÅÅ? @
)
ÅÅ@ A
doctor
ÅÅB H
.
ÅÅH I
Designation
ÅÅI T
=
ÅÅU V
	doctorDto
ÅÅW `
.
ÅÅ` a
Designation
ÅÅa l
;
ÅÅl m
if
ÉÉ 
(
ÉÉ 
	doctorDto
ÉÉ 
.
ÉÉ 
SpecializationIds
ÉÉ /
!=
ÉÉ0 2
null
ÉÉ3 7
&&
ÉÉ8 :
	doctorDto
ÉÉ; D
.
ÉÉD E
SpecializationIds
ÉÉE V
.
ÉÉV W
Any
ÉÉW Z
(
ÉÉZ [
)
ÉÉ[ \
)
ÉÉ\ ]
{
ÑÑ 
await
ÖÖ 
_adminRepository
ÖÖ *
.
ÖÖ* +.
 UpdateDoctorSpecializationsAsync
ÖÖ+ K
(
ÖÖK L
doctorId
ÖÖL T
,
ÖÖT U
	doctorDto
ÖÖV _
.
ÖÖ_ `
SpecializationIds
ÖÖ` q
)
ÖÖq r
;
ÖÖr s
}
ÜÜ 
await
àà 
_adminRepository
àà &
.
àà& '
	SaveAsync
àà' 0
(
àà0 1
)
àà1 2
;
àà2 3
return
ââ 
true
ââ 
;
ââ 
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã 
ex
ãã 
)
ãã  
{
åå 
throw
çç 
new
çç 
	Exception
çç #
(
çç# $
$str
çç$ V
,
ççV W
ex
ççX Z
)
ççZ [
;
çç[ \
}
éé 
}
èè 	
public
íí 
async
íí 
Task
íí 
<
íí 
bool
íí 
>
íí 
DeleteDoctor
íí  ,
(
íí, -
int
íí- 0
userId
íí1 7
,
íí7 8
int
íí9 <
doctorId
íí= E
)
ííE F
{
ìì 	
try
îî 
{
ïï 
var
ññ 
doctor
ññ 
=
ññ 
await
ññ "
_adminRepository
ññ# 3
.
ññ3 4)
GetDoctorByIdAndUserIdAsync
ññ4 O
(
ññO P
doctorId
ññP X
,
ññX Y
userId
ññZ `
)
ññ` a
;
ñña b
if
óó 
(
óó 
doctor
óó 
==
óó 
null
óó "
)
óó" #
return
óó$ *
false
óó+ 0
;
óó0 1
doctor
ôô 
.
ôô 
UserID
ôô 
=
ôô 
null
ôô  $
;
ôô$ %
doctor
öö 
.
öö 
Designation
öö "
=
öö# $
$str
öö% /
;
öö/ 0
var
úú #
scheduledAppointments
úú )
=
úú* +
await
úú, 1
_adminRepository
úú2 B
.
úúB C+
GetScheduledAppointmentsAsync
úúC `
(
úú` a
doctorId
úúa i
)
úúi j
;
úúj k
foreach
ùù 
(
ùù 
var
ùù 
appointment
ùù (
in
ùù) +#
scheduledAppointments
ùù, A
)
ùùA B
{
ûû 
appointment
üü 
.
üü  
Status
üü  &
=
üü' (
$str
üü) 3
;
üü3 4
}
†† 
await
¢¢ 
_adminRepository
¢¢ &
.
¢¢& '
DeleteUserAsync
¢¢' 6
(
¢¢6 7
userId
¢¢7 =
)
¢¢= >
;
¢¢> ?
await
££ 
_adminRepository
££ &
.
££& '
	SaveAsync
££' 0
(
££0 1
)
££1 2
;
££2 3
return
§§ 
true
§§ 
;
§§ 
}
•• 
catch
¶¶ 
(
¶¶ 
	Exception
¶¶ 
ex
¶¶ 
)
¶¶  
{
ßß 
throw
®® 
new
®® 
	Exception
®® #
(
®®# $
$str
®®$ R
,
®®R S
ex
®®T V
)
®®V W
;
®®W X
}
©© 
}
™™ 	
public
¨¨ 
async
¨¨ 
Task
¨¨ 
<
¨¨ 
Doctor
¨¨  
>
¨¨  !
GetDoctorDetails
¨¨" 2
(
¨¨2 3
int
¨¨3 6
doctorId
¨¨7 ?
)
¨¨? @
{
≠≠ 	
try
ÆÆ 
{
ØØ 
return
∞∞ 
await
∞∞ 
_adminRepository
∞∞ -
.
∞∞- . 
GetDoctorByIdAsync
∞∞. @
(
∞∞@ A
doctorId
∞∞A I
)
∞∞I J
;
∞∞J K
}
±± 
catch
≤≤ 
(
≤≤ 
	Exception
≤≤ 
ex
≤≤ 
)
≤≤  
{
≥≥ 
throw
¥¥ 
new
¥¥ 
	Exception
¥¥ #
(
¥¥# $
$str
¥¥$ X
,
¥¥X Y
ex
¥¥Z \
)
¥¥\ ]
;
¥¥] ^
}
µµ 
}
∂∂ 	
public
ππ 
async
ππ 
Task
ππ 
<
ππ 
Patient
ππ !
>
ππ! "
UpdatePatient
ππ# 0
(
ππ0 1

PatientDto
ππ1 ;

patientDto
ππ< F
)
ππF G
{
∫∫ 	
try
ªª 
{
ºº 
var
ΩΩ 
patient
ΩΩ 
=
ΩΩ 
await
ΩΩ #
_adminRepository
ΩΩ$ 4
.
ΩΩ4 5!
GetPatientByIdAsync
ΩΩ5 H
(
ΩΩH I

patientDto
ΩΩI S
.
ΩΩS T
	PatientID
ΩΩT ]
)
ΩΩ] ^
;
ΩΩ^ _
if
ææ 
(
ææ 
patient
ææ 
==
ææ 
null
ææ #
)
ææ# $
throw
ææ% *
new
ææ+ ."
KeyNotFoundException
ææ/ C
(
ææC D
$"
ææD F
$str
ææF V
{
ææV W

patientDto
ææW a
.
ææa b
	PatientID
ææb k
}
ææk l
$str
ææl w
"
ææw x
)
ææx y
;
ææy z
if
¿¿ 
(
¿¿ 
!
¿¿ 
string
¿¿ 
.
¿¿ 
IsNullOrEmpty
¿¿ )
(
¿¿) *

patientDto
¿¿* 4
.
¿¿4 5
FullName
¿¿5 =
)
¿¿= >
)
¿¿> ?
patient
¿¿@ G
.
¿¿G H
FullName
¿¿H P
=
¿¿Q R

patientDto
¿¿S ]
.
¿¿] ^
FullName
¿¿^ f
;
¿¿f g
if
¡¡ 
(
¡¡ 
!
¡¡ 
string
¡¡ 
.
¡¡ 
IsNullOrEmpty
¡¡ )
(
¡¡) *

patientDto
¡¡* 4
.
¡¡4 5
Email
¡¡5 :
)
¡¡: ;
)
¡¡; <
patient
¡¡= D
.
¡¡D E
Email
¡¡E J
=
¡¡K L

patientDto
¡¡M W
.
¡¡W X
Email
¡¡X ]
;
¡¡] ^
patient
¬¬ 
.
¬¬ 
DateOfBirth
¬¬ #
=
¬¬$ %

patientDto
¬¬& 0
.
¬¬0 1
DateOfBirth
¬¬1 <
;
¬¬< =
if
√√ 
(
√√ 
!
√√ 
string
√√ 
.
√√ 
IsNullOrEmpty
√√ )
(
√√) *

patientDto
√√* 4
.
√√4 5
ContactNumber
√√5 B
)
√√B C
)
√√C D
patient
√√E L
.
√√L M
ContactNumber
√√M Z
=
√√[ \

patientDto
√√] g
.
√√g h
ContactNumber
√√h u
;
√√u v
if
ƒƒ 
(
ƒƒ 
!
ƒƒ 
string
ƒƒ 
.
ƒƒ 
IsNullOrEmpty
ƒƒ )
(
ƒƒ) *

patientDto
ƒƒ* 4
.
ƒƒ4 5
Address
ƒƒ5 <
)
ƒƒ< =
)
ƒƒ= >
patient
ƒƒ? F
.
ƒƒF G
Address
ƒƒG N
=
ƒƒO P

patientDto
ƒƒQ [
.
ƒƒ[ \
Address
ƒƒ\ c
;
ƒƒc d
if
≈≈ 
(
≈≈ 
!
≈≈ 
string
≈≈ 
.
≈≈ 
IsNullOrEmpty
≈≈ )
(
≈≈) *

patientDto
≈≈* 4
.
≈≈4 5
MedicalHistory
≈≈5 C
)
≈≈C D
)
≈≈D E
patient
≈≈F M
.
≈≈M N
MedicalHistory
≈≈N \
=
≈≈] ^

patientDto
≈≈_ i
.
≈≈i j
MedicalHistory
≈≈j x
;
≈≈x y
await
«« 
_adminRepository
«« &
.
««& '
	SaveAsync
««' 0
(
««0 1
)
««1 2
;
««2 3
return
»» 
patient
»» 
;
»» 
}
…… 
catch
   
(
   
	Exception
   
ex
   
)
    
{
ÀÀ 
throw
ÃÃ 
new
ÃÃ 
	Exception
ÃÃ #
(
ÃÃ# $
$str
ÃÃ$ W
,
ÃÃW X
ex
ÃÃY [
)
ÃÃ[ \
;
ÃÃ\ ]
}
ÕÕ 
}
ŒŒ 	
public
–– 
async
–– 
Task
–– 
<
–– 
Patient
–– !
>
––! "
GetPatientDetails
––# 4
(
––4 5
int
––5 8
	patientId
––9 B
)
––B C
{
—— 	
try
““ 
{
”” 
var
‘‘ 
patient
‘‘ 
=
‘‘ 
await
‘‘ #
_adminRepository
‘‘$ 4
.
‘‘4 5!
GetPatientByIdAsync
‘‘5 H
(
‘‘H I
	patientId
‘‘I R
)
‘‘R S
;
‘‘S T
if
’’ 
(
’’ 
patient
’’ 
==
’’ 
null
’’ #
)
’’# $
throw
’’% *
new
’’+ ."
KeyNotFoundException
’’/ C
(
’’C D
$"
’’D F
$str
’’F V
{
’’V W
	patientId
’’W `
}
’’` a
$str
’’a l
"
’’l m
)
’’m n
;
’’n o
return
÷÷ 
patient
÷÷ 
;
÷÷ 
}
◊◊ 
catch
ÿÿ 
(
ÿÿ 
	Exception
ÿÿ 
ex
ÿÿ 
)
ÿÿ  
{
ŸŸ 
throw
⁄⁄ 
new
⁄⁄ 
	Exception
⁄⁄ #
(
⁄⁄# $
$str
⁄⁄$ Y
,
⁄⁄Y Z
ex
⁄⁄[ ]
)
⁄⁄] ^
;
⁄⁄^ _
}
€€ 
}
‹‹ 	
public
ﬁﬁ 
async
ﬁﬁ 
Task
ﬁﬁ 
<
ﬁﬁ 
bool
ﬁﬁ 
>
ﬁﬁ 
DeletePatient
ﬁﬁ  -
(
ﬁﬁ- .
int
ﬁﬁ. 1
userId
ﬁﬁ2 8
,
ﬁﬁ8 9
int
ﬁﬁ: =
	patientId
ﬁﬁ> G
)
ﬁﬁG H
{
ﬂﬂ 	
try
‡‡ 
{
·· 
var
‚‚ 
patient
‚‚ 
=
‚‚ 
await
‚‚ #
_adminRepository
‚‚$ 4
.
‚‚4 5*
GetPatientByIdAndUserIdAsync
‚‚5 Q
(
‚‚Q R
	patientId
‚‚R [
,
‚‚[ \
userId
‚‚] c
)
‚‚c d
;
‚‚d e
if
„„ 
(
„„ 
patient
„„ 
==
„„ 
null
„„ #
)
„„# $
return
„„% +
false
„„, 1
;
„„1 2
patient
ÂÂ 
.
ÂÂ 
UserID
ÂÂ 
=
ÂÂ  
null
ÂÂ! %
;
ÂÂ% &
var
ÁÁ #
scheduledAppointments
ÁÁ )
=
ÁÁ* +
await
ÁÁ, 1
_adminRepository
ÁÁ2 B
.
ÁÁB C6
(GetScheduledAppointmentsByPatientIdAsync
ÁÁC k
(
ÁÁk l
	patientId
ÁÁl u
)
ÁÁu v
;
ÁÁv w
foreach
ËË 
(
ËË 
var
ËË 
appointment
ËË (
in
ËË) +#
scheduledAppointments
ËË, A
)
ËËA B
{
ÈÈ 
appointment
ÍÍ 
.
ÍÍ  
Status
ÍÍ  &
=
ÍÍ' (
$str
ÍÍ) 3
;
ÍÍ3 4
}
ÎÎ 
await
ÌÌ 
_adminRepository
ÌÌ &
.
ÌÌ& '
DeleteUserAsync
ÌÌ' 6
(
ÌÌ6 7
userId
ÌÌ7 =
)
ÌÌ= >
;
ÌÌ> ?
await
ÓÓ 
_adminRepository
ÓÓ &
.
ÓÓ& '
	SaveAsync
ÓÓ' 0
(
ÓÓ0 1
)
ÓÓ1 2
;
ÓÓ2 3
return
ÔÔ 
true
ÔÔ 
;
ÔÔ 
}
 
catch
ÒÒ 
(
ÒÒ 
	Exception
ÒÒ 
ex
ÒÒ 
)
ÒÒ  
{
ÚÚ 
throw
ÛÛ 
new
ÛÛ 
	Exception
ÛÛ #
(
ÛÛ# $
$str
ÛÛ$ S
,
ÛÛS T
ex
ÛÛU W
)
ÛÛW X
;
ÛÛX Y
}
ÙÙ 
}
ıı 	
public
¯¯ 
async
¯¯ 
Task
¯¯ 
<
¯¯ 
Appointment
¯¯ %
>
¯¯% &#
RescheduleAppointment
¯¯' <
(
¯¯< =
int
¯¯= @
appointmentId
¯¯A N
,
¯¯N O&
AppointmentRescheduleDto
¯¯P h
rescheduleDto
¯¯i v
)
¯¯v w
{
˘˘ 	
try
˙˙ 
{
˚˚ 
var
¸¸ 
appointment
¸¸ 
=
¸¸  !
await
¸¸" '
_adminRepository
¸¸( 8
.
¸¸8 9/
!GetAppointmentWithDoctorByIdAsync
¸¸9 Z
(
¸¸Z [
appointmentId
¸¸[ h
)
¸¸h i
;
¸¸i j
if
˛˛ 
(
˛˛ 
appointment
˛˛ 
==
˛˛  "
null
˛˛# '
)
˛˛' (
throw
ˇˇ 
new
ˇˇ "
KeyNotFoundException
ˇˇ 2
(
ˇˇ2 3
$str
ˇˇ3 K
)
ˇˇK L
;
ˇˇL M
bool
ÅÅ 
isOnSchedule
ÅÅ !
=
ÅÅ" #
await
ÅÅ$ )
_adminRepository
ÅÅ* :
.
ÅÅ: ;%
IsDoctorOnScheduleAsync
ÅÅ; R
(
ÅÅR S
appointment
ÅÅS ^
.
ÅÅ^ _
DoctorID
ÅÅ_ g
,
ÅÅg h
rescheduleDto
ÅÅi v
.
ÅÅv w!
NewAppointmentDateÅÅw â
)ÅÅâ ä
;ÅÅä ã
if
ÉÉ 
(
ÉÉ 
!
ÉÉ 
isOnSchedule
ÉÉ !
)
ÉÉ! "
throw
ÑÑ 
new
ÑÑ '
InvalidOperationException
ÑÑ 7
(
ÑÑ7 8
$str
ÑÑ8 m
)
ÑÑm n
;
ÑÑn o
appointment
ÜÜ 
.
ÜÜ 
AppointmentDate
ÜÜ +
=
ÜÜ, -
rescheduleDto
ÜÜ. ;
.
ÜÜ; < 
NewAppointmentDate
ÜÜ< N
;
ÜÜN O
await
áá 
_adminRepository
áá &
.
áá& '
	SaveAsync
áá' 0
(
áá0 1
)
áá1 2
;
áá2 3
return
ââ 
appointment
ââ "
;
ââ" #
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã 
ex
ãã 
)
ãã  
{
åå 
throw
çç 
new
çç "
ApplicationException
çç .
(
çç. /
$str
çç/ f
,
ççf g
ex
ççh j
)
ççj k
;
ççk l
}
éé 
}
èè 	
public
íí 
async
íí 
Task
íí 
<
íí 
Appointment
íí %
>
íí% &$
ViewAppointmentDetails
íí' =
(
íí= >
int
íí> A
appointmentId
ííB O
)
ííO P
{
ìì 	
try
îî 
{
ïï 
var
ññ 
appointment
ññ 
=
ññ  !
await
ññ" '
_adminRepository
ññ( 8
.
ññ8 9%
GetAppointmentByIdAsync
ññ9 P
(
ññP Q
appointmentId
ññQ ^
)
ññ^ _
;
ññ_ `
if
òò 
(
òò 
appointment
òò 
==
òò  "
null
òò# '
)
òò' (
throw
ôô 
new
ôô "
KeyNotFoundException
ôô 2
(
ôô2 3
$str
ôô3 K
)
ôôK L
;
ôôL M
return
õõ 
appointment
õõ "
;
õõ" #
}
úú 
catch
ùù 
(
ùù 
	Exception
ùù 
ex
ùù 
)
ùù  
{
ûû 
throw
üü 
new
üü "
ApplicationException
üü .
(
üü. /
$str
üü/ h
,
üüh i
ex
üüj l
)
üül m
;
üüm n
}
†† 
}
°° 	
public
££ 
async
££ 
Task
££ 
<
££ 
IEnumerable
££ %
<
££% &#
ScheduleWithDoctorDto
££& ;
>
££; <
>
££< =-
GetSchedulesWithDoctorNameAsync
££> ]
(
££] ^
int
££^ a
doctorId
££b j
)
££j k
{
§§ 	
try
•• 
{
¶¶ 
var
ßß 
	schedules
ßß 
=
ßß 
await
ßß  %
_adminRepository
ßß& 6
.
ßß6 70
"GetSchedulesWithDoctorDetailsAsync
ßß7 Y
(
ßßY Z
doctorId
ßßZ b
)
ßßb c
;
ßßc d
if
©© 
(
©© 
	schedules
©© 
==
©©  
null
©©! %
||
©©& (
!
©©) *
	schedules
©©* 3
.
©©3 4
Any
©©4 7
(
©©7 8
)
©©8 9
)
©©9 :
throw
™™ 
new
™™ "
KeyNotFoundException
™™ 2
(
™™2 3
$str
™™3 X
)
™™X Y
;
™™Y Z
return
¨¨ 
	schedules
¨¨  
.
¨¨  !
Select
¨¨! '
(
¨¨' (
schedule
¨¨( 0
=>
¨¨1 3
new
¨¨4 7#
ScheduleWithDoctorDto
¨¨8 M
{
≠≠ 

ScheduleID
ÆÆ 
=
ÆÆ  
schedule
ÆÆ! )
.
ÆÆ) *

ScheduleID
ÆÆ* 4
,
ÆÆ4 5
DoctorID
ØØ 
=
ØØ 
schedule
ØØ '
.
ØØ' (
DoctorID
ØØ( 0
,
ØØ0 1

DoctorName
∞∞ 
=
∞∞  
schedule
∞∞! )
.
∞∞) *
Doctor
∞∞* 0
.
∞∞0 1
FullName
∞∞1 9
,
∞∞9 :
	StartDate
±± 
=
±± 
schedule
±±  (
.
±±( )
	StartDate
±±) 2
,
±±2 3
EndDate
≤≤ 
=
≤≤ 
schedule
≤≤ &
.
≤≤& '
EndDate
≤≤' .
,
≤≤. /
Status
≥≥ 
=
≥≥ 
schedule
≥≥ %
.
≥≥% &
Status
≥≥& ,
}
¥¥ 
)
¥¥ 
;
¥¥ 
}
µµ 
catch
∂∂ 
(
∂∂ 
	Exception
∂∂ 
ex
∂∂ 
)
∂∂  
{
∑∑ 
throw
∏∏ 
new
∏∏ "
ApplicationException
∏∏ .
(
∏∏. /
$str
∏∏/ r
,
∏∏r s
ex
∏∏t v
)
∏∏v w
;
∏∏w x
}
ππ 
}
∫∫ 	
public
ªª 
async
ªª 
Task
ªª 
<
ªª 
bool
ªª 
>
ªª (
UpdateScheduleByAdminAsync
ªª  :
(
ªª: ;
int
ªª; >

scheduleId
ªª? I
,
ªªI J
UpdateScheduleDto
ªªK \
	updateDto
ªª] f
)
ªªf g
{
ºº 	
try
ΩΩ 
{
ææ 
var
øø 
schedule
øø 
=
øø 
await
øø $
_adminRepository
øø% 5
.
øø5 6"
GetScheduleByIdAsync
øø6 J
(
øøJ K

scheduleId
øøK U
)
øøU V
;
øøV W
if
¡¡ 
(
¡¡ 
schedule
¡¡ 
==
¡¡ 
null
¡¡  $
)
¡¡$ %
throw
¬¬ 
new
¬¬ "
KeyNotFoundException
¬¬ 2
(
¬¬2 3
$str
¬¬3 H
)
¬¬H I
;
¬¬I J
schedule
ƒƒ 
.
ƒƒ 
	StartDate
ƒƒ "
=
ƒƒ# $
	updateDto
ƒƒ% .
.
ƒƒ. /
	StartDate
ƒƒ/ 8
;
ƒƒ8 9
schedule
≈≈ 
.
≈≈ 
EndDate
≈≈  
=
≈≈! "
	updateDto
≈≈# ,
.
≈≈, -
EndDate
≈≈- 4
;
≈≈4 5
schedule
∆∆ 
.
∆∆ 
Status
∆∆ 
=
∆∆  !
$str
∆∆" -
;
∆∆- .
await
»» 
_adminRepository
»» &
.
»»& '!
UpdateScheduleAsync
»»' :
(
»»: ;
schedule
»»; C
)
»»C D
;
»»D E
return
…… 
true
…… 
;
…… 
}
   
catch
ÀÀ 
(
ÀÀ 
	Exception
ÀÀ 
ex
ÀÀ 
)
ÀÀ  
{
ÃÃ 
throw
ÕÕ 
new
ÕÕ "
ApplicationException
ÕÕ .
(
ÕÕ. /
$str
ÕÕ/ _
,
ÕÕ_ `
ex
ÕÕa c
)
ÕÕc d
;
ÕÕd e
}
ŒŒ 
}
œœ 	
public
““ 
async
““ 
Task
““ 
<
““ 
bool
““ 
>
““ (
CancelScheduleByAdminAsync
““  :
(
““: ;
int
““; >

scheduleId
““? I
)
““I J
{
”” 	
try
‘‘ 
{
’’ 
var
÷÷ 
schedule
÷÷ 
=
÷÷ 
await
÷÷ $
_adminRepository
÷÷% 5
.
÷÷5 6"
GetScheduleByIdAsync
÷÷6 J
(
÷÷J K

scheduleId
÷÷K U
)
÷÷U V
;
÷÷V W
if
ÿÿ 
(
ÿÿ 
schedule
ÿÿ 
==
ÿÿ 
null
ÿÿ  $
||
ÿÿ% '
schedule
ÿÿ( 0
.
ÿÿ0 1
Status
ÿÿ1 7
==
ÿÿ8 :
$str
ÿÿ; F
)
ÿÿF G
throw
ŸŸ 
new
ŸŸ '
InvalidOperationException
ŸŸ 7
(
ŸŸ7 8
$str
ŸŸ8 k
)
ŸŸk l
;
ŸŸl m
schedule
€€ 
.
€€ 
Status
€€ 
=
€€  !
$str
€€" -
;
€€- .
await
‹‹ 
_adminRepository
‹‹ &
.
‹‹& '!
UpdateScheduleAsync
‹‹' :
(
‹‹: ;
schedule
‹‹; C
)
‹‹C D
;
‹‹D E
return
›› 
true
›› 
;
›› 
}
ﬁﬁ 
catch
ﬂﬂ 
(
ﬂﬂ 
	Exception
ﬂﬂ 
ex
ﬂﬂ 
)
ﬂﬂ  
{
‡‡ 
throw
·· 
new
·· "
ApplicationException
·· .
(
··. /
$str
··/ `
,
··` a
ex
··b d
)
··d e
;
··e f
}
‚‚ 
}
„„ 	
public
ÂÂ 
async
ÂÂ 
Task
ÂÂ 
<
ÂÂ 
bool
ÂÂ 
>
ÂÂ *
MarkScheduleAsCompletedAsync
ÂÂ  <
(
ÂÂ< =
int
ÂÂ= @

scheduleId
ÂÂA K
)
ÂÂK L
{
ÊÊ 	
try
ÁÁ 
{
ËË 
var
ÈÈ 
schedule
ÈÈ 
=
ÈÈ 
await
ÈÈ $
_adminRepository
ÈÈ% 5
.
ÈÈ5 6"
GetScheduleByIdAsync
ÈÈ6 J
(
ÈÈJ K

scheduleId
ÈÈK U
)
ÈÈU V
;
ÈÈV W
if
ÎÎ 
(
ÎÎ 
schedule
ÎÎ 
==
ÎÎ 
null
ÎÎ  $
||
ÎÎ% '
schedule
ÎÎ( 0
.
ÎÎ0 1
Status
ÎÎ1 7
==
ÎÎ8 :
$str
ÎÎ; F
)
ÎÎF G
throw
ÏÏ 
new
ÏÏ '
InvalidOperationException
ÏÏ 7
(
ÏÏ7 8
$str
ÏÏ8 v
)
ÏÏv w
;
ÏÏw x
schedule
ÓÓ 
.
ÓÓ 
Status
ÓÓ 
=
ÓÓ  !
$str
ÓÓ" -
;
ÓÓ- .
await
ÔÔ 
_adminRepository
ÔÔ &
.
ÔÔ& '!
UpdateScheduleAsync
ÔÔ' :
(
ÔÔ: ;
schedule
ÔÔ; C
)
ÔÔC D
;
ÔÔD E
return
ÒÒ 
true
ÒÒ 
;
ÒÒ 
}
ÚÚ 
catch
ÛÛ 
(
ÛÛ 
	Exception
ÛÛ 
ex
ÛÛ 
)
ÛÛ  
{
ÙÙ 
throw
ıı 
new
ıı "
ApplicationException
ıı .
(
ıı. /
$str
ıı/ k
,
ıık l
ex
ıım o
)
ııo p
;
ııp q
}
ˆˆ 
}
˜˜ 	
public
¸¸ 
async
¸¸ 
Task
¸¸ 
<
¸¸ 
bool
¸¸ 
>
¸¸ 
UpdateSchedule
¸¸  .
(
¸¸. /
int
¸¸/ 2
doctorId
¸¸3 ;
,
¸¸; <
int
¸¸= @

scheduleId
¸¸A K
,
¸¸K L
DateTime
¸¸M U
newStartDate
¸¸V b
,
¸¸b c
DateTime
¸¸d l

newEndDate
¸¸m w
)
¸¸w x
{
˝˝ 	
try
˛˛ 
{
ˇˇ 
var
ÄÄ 
schedule
ÄÄ 
=
ÄÄ 
await
ÄÄ $
_adminRepository
ÄÄ% 5
.
ÄÄ5 6-
GetScheduleByIdAndDoctorIdAsync
ÄÄ6 U
(
ÄÄU V

scheduleId
ÄÄV `
,
ÄÄ` a
doctorId
ÄÄb j
)
ÄÄj k
;
ÄÄk l
if
ÇÇ 
(
ÇÇ 
schedule
ÇÇ 
==
ÇÇ 
null
ÇÇ  $
)
ÇÇ$ %
throw
ÉÉ 
new
ÉÉ "
KeyNotFoundException
ÉÉ 2
(
ÉÉ2 3
$"
ÉÉ3 5
$str
ÉÉ5 F
{
ÉÉF G

scheduleId
ÉÉG Q
}
ÉÉQ R
$str
ÉÉR k
{
ÉÉk l
doctorId
ÉÉl t
}
ÉÉt u
$str
ÉÉu v
"
ÉÉv w
)
ÉÉw x
;
ÉÉx y
schedule
ÖÖ 
.
ÖÖ 
	StartDate
ÖÖ "
=
ÖÖ# $
newStartDate
ÖÖ% 1
;
ÖÖ1 2
schedule
ÜÜ 
.
ÜÜ 
EndDate
ÜÜ  
=
ÜÜ! "

newEndDate
ÜÜ# -
;
ÜÜ- .
await
àà 
_adminRepository
àà &
.
àà& '
	SaveAsync
àà' 0
(
àà0 1
)
àà1 2
;
àà2 3
return
ââ 
true
ââ 
;
ââ 
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã 
ex
ãã 
)
ãã  
{
åå 
throw
çç 
new
çç "
ApplicationException
çç .
(
çç. /
$str
çç/ _
,
çç_ `
ex
çça c
)
ççc d
;
ççd e
}
éé 
}
èè 	
public
ëë 
async
ëë 
Task
ëë 
<
ëë 
string
ëë  
>
ëë  !
CancelSchedule
ëë" 0
(
ëë0 1
int
ëë1 4
doctorId
ëë5 =
,
ëë= >
int
ëë? B

scheduleId
ëëC M
)
ëëM N
{
íí 	
try
ìì 
{
îî 
var
ïï 
schedule
ïï 
=
ïï 
await
ïï $
_adminRepository
ïï% 5
.
ïï5 6-
GetScheduleByIdAndDoctorIdAsync
ïï6 U
(
ïïU V

scheduleId
ïïV `
,
ïï` a
doctorId
ïïb j
)
ïïj k
;
ïïk l
if
óó 
(
óó 
schedule
óó 
==
óó 
null
óó  $
)
óó$ %
throw
òò 
new
òò "
KeyNotFoundException
òò 2
(
òò2 3
$"
òò3 5
$str
òò5 F
{
òòF G

scheduleId
òòG Q
}
òòQ R
$str
òòR k
{
òòk l
doctorId
òòl t
}
òòt u
$str
òòu v
"
òòv w
)
òòw x
;
òòx y
if
öö 
(
öö 
schedule
öö 
.
öö 
Status
öö #
==
öö$ &
$str
öö' 2
)
öö2 3
return
õõ 
$str
õõ ;
;
õõ; <
if
ùù 
(
ùù 
schedule
ùù 
.
ùù 
Status
ùù #
==
ùù$ &
$str
ùù' 2
)
ùù2 3
return
ûû 
$str
ûû S
;
ûûS T
schedule
†† 
.
†† 
Status
†† 
=
††  !
$str
††" -
;
††- .
await
°° 
_adminRepository
°° &
.
°°& '
	SaveAsync
°°' 0
(
°°0 1
)
°°1 2
;
°°2 3
return
¢¢ 
$str
¢¢ 9
;
¢¢9 :
}
££ 
catch
§§ 
(
§§ 
	Exception
§§ 
ex
§§ 
)
§§  
{
•• 
throw
¶¶ 
new
¶¶ "
ApplicationException
¶¶ .
(
¶¶. /
$str
¶¶/ `
,
¶¶` a
ex
¶¶b d
)
¶¶d e
;
¶¶e f
}
ßß 
}
®® 	
public
™™ 
async
™™ 
Task
™™ 
<
™™ 
IEnumerable
™™ %
<
™™% &
BillingDetailsDto
™™& 7
>
™™7 8
>
™™8 9-
GetBillingDetailsWithNamesAsync
™™: Y
(
™™Y Z
)
™™Z [
{
´´ 	
try
¨¨ 
{
≠≠ 
var
ÆÆ 
billings
ÆÆ 
=
ÆÆ 
await
ÆÆ $
_adminRepository
ÆÆ% 5
.
ÆÆ5 6-
GetBillingDetailsWithNamesAsync
ÆÆ6 U
(
ÆÆU V
)
ÆÆV W
;
ÆÆW X
if
∞∞ 
(
∞∞ 
billings
∞∞ 
==
∞∞ 
null
∞∞  $
||
∞∞% '
!
∞∞( )
billings
∞∞) 1
.
∞∞1 2
Any
∞∞2 5
(
∞∞5 6
)
∞∞6 7
)
∞∞7 8
throw
±± 
new
±± "
KeyNotFoundException
±± 2
(
±±2 3
$str
±±3 N
)
±±N O
;
±±O P
return
≥≥ 
billings
≥≥ 
.
≥≥  
Select
≥≥  &
(
≥≥& '
b
≥≥' (
=>
≥≥) +
new
≥≥, /
BillingDetailsDto
≥≥0 A
{
¥¥ 
	BillingID
µµ 
=
µµ 
b
µµ  !
.
µµ! "
	BillingID
µµ" +
,
µµ+ ,
	PatientID
∂∂ 
=
∂∂ 
b
∂∂  !
.
∂∂! "
	PatientID
∂∂" +
,
∂∂+ ,
PatientName
∑∑ 
=
∑∑  !
b
∑∑" #
.
∑∑# $
Patient
∑∑$ +
.
∑∑+ ,
FullName
∑∑, 4
,
∑∑4 5
DoctorID
∏∏ 
=
∏∏ 
b
∏∏  
.
∏∏  !
DoctorID
∏∏! )
,
∏∏) *

DoctorName
ππ 
=
ππ  
b
ππ! "
.
ππ" #
Doctor
ππ# )
.
ππ) *
FullName
ππ* 2
,
ππ2 3
ConsultationFee
∫∫ #
=
∫∫$ %
b
∫∫& '
.
∫∫' (
ConsultationFee
∫∫( 7
,
∫∫7 8
TotalTestsPrice
ªª #
=
ªª$ %
b
ªª& '
.
ªª' (
TotalTestsPrice
ªª( 7
,
ªª7 8#
TotalMedicationsPrice
ºº )
=
ºº* +
b
ºº, -
.
ºº- .#
TotalMedicationsPrice
ºº. C
,
ººC D

GrandTotal
ΩΩ 
=
ΩΩ  
b
ΩΩ! "
.
ΩΩ" #

GrandTotal
ΩΩ# -
,
ΩΩ- .
Status
ææ 
=
ææ 
b
ææ 
.
ææ 
Status
ææ %
}
øø 
)
øø 
;
øø 
}
¿¿ 
catch
¡¡ 
(
¡¡ 
	Exception
¡¡ 
ex
¡¡ 
)
¡¡  
{
¬¬ 
throw
√√ 
new
√√ "
ApplicationException
√√ .
(
√√. /
$str
√√/ d
,
√√d e
ex
√√f h
)
√√h i
;
√√i j
}
ƒƒ 
}
≈≈ 	
public
«« 
async
«« 
Task
«« 
<
«« 
bool
«« 
>
«« !
MarkBillAsPaidAsync
««  3
(
««3 4
int
««4 7
	billingId
««8 A
)
««A B
{
»» 	
try
…… 
{
   
var
ÀÀ 
billing
ÀÀ 
=
ÀÀ 
await
ÀÀ #
_adminRepository
ÀÀ$ 4
.
ÀÀ4 5!
GetBillingByIdAsync
ÀÀ5 H
(
ÀÀH I
	billingId
ÀÀI R
)
ÀÀR S
;
ÀÀS T
if
ÕÕ 
(
ÕÕ 
billing
ÕÕ 
==
ÕÕ 
null
ÕÕ #
||
ÕÕ$ &
billing
ÕÕ' .
.
ÕÕ. /
Status
ÕÕ/ 5
==
ÕÕ6 8
$str
ÕÕ9 ?
)
ÕÕ? @
throw
ŒŒ 
new
ŒŒ '
InvalidOperationException
ŒŒ 7
(
ŒŒ7 8
$str
ŒŒ8 k
)
ŒŒk l
;
ŒŒl m
billing
–– 
.
–– 
Status
–– 
=
––  
$str
––! '
;
––' (
await
—— 
_adminRepository
—— &
.
——& ' 
UpdateBillingAsync
——' 9
(
——9 :
billing
——: A
)
——A B
;
——B C
return
”” 
true
”” 
;
”” 
}
‘‘ 
catch
’’ 
(
’’ 
	Exception
’’ 
ex
’’ 
)
’’  
{
÷÷ 
throw
◊◊ 
new
◊◊ "
ApplicationException
◊◊ .
(
◊◊. /
$str
◊◊/ b
,
◊◊b c
ex
◊◊d f
)
◊◊f g
;
◊◊g h
}
ÿÿ 
}
ŸŸ 	
public
‹‹ 
async
‹‹ 
Task
‹‹ 
<
‹‹ 
IEnumerable
‹‹ %
<
‹‹% &
TestDto
‹‹& -
>
‹‹- .
>
‹‹. /
GetAllTestsAsync
‹‹0 @
(
‹‹@ A
)
‹‹A B
{
›› 	
try
ﬁﬁ 
{
ﬂﬂ 
var
‡‡ 
tests
‡‡ 
=
‡‡ 
await
‡‡ !
_adminRepository
‡‡" 2
.
‡‡2 3
GetAllTestsAsync
‡‡3 C
(
‡‡C D
)
‡‡D E
;
‡‡E F
if
‚‚ 
(
‚‚ 
tests
‚‚ 
==
‚‚ 
null
‚‚ !
||
‚‚" $
!
‚‚% &
tests
‚‚& +
.
‚‚+ ,
Any
‚‚, /
(
‚‚/ 0
)
‚‚0 1
)
‚‚1 2
throw
„„ 
new
„„ "
KeyNotFoundException
„„ 2
(
„„2 3
$str
„„3 D
)
„„D E
;
„„E F
return
ÂÂ 
tests
ÂÂ 
.
ÂÂ 
Select
ÂÂ #
(
ÂÂ# $
t
ÂÂ$ %
=>
ÂÂ& (
new
ÂÂ) ,
TestDto
ÂÂ- 4
{
ÊÊ 
TestID
ÁÁ 
=
ÁÁ 
t
ÁÁ 
.
ÁÁ 
TestID
ÁÁ %
,
ÁÁ% &
TestName
ËË 
=
ËË 
t
ËË  
.
ËË  !
TestName
ËË! )
,
ËË) *
	TestPrice
ÈÈ 
=
ÈÈ 
t
ÈÈ  !
.
ÈÈ! "
	TestPrice
ÈÈ" +
}
ÍÍ 
)
ÍÍ 
;
ÍÍ 
}
ÎÎ 
catch
ÏÏ 
(
ÏÏ 
	Exception
ÏÏ 
ex
ÏÏ 
)
ÏÏ  
{
ÌÌ 
throw
ÓÓ 
new
ÓÓ "
ApplicationException
ÓÓ .
(
ÓÓ. /
$str
ÓÓ/ Z
,
ÓÓZ [
ex
ÓÓ\ ^
)
ÓÓ^ _
;
ÓÓ_ `
}
ÔÔ 
}
 	
public
ÒÒ 
async
ÒÒ 
Task
ÒÒ 
<
ÒÒ 
bool
ÒÒ 
>
ÒÒ 
AddTestAsync
ÒÒ  ,
(
ÒÒ, -!
CreateUpdateTestDto
ÒÒ- @
createTestDto
ÒÒA N
)
ÒÒN O
{
ÚÚ 	
try
ÛÛ 
{
ÙÙ 
var
ıı 
test
ıı 
=
ıı 
new
ıı 
Test
ıı #
{
ˆˆ 
TestName
˜˜ 
=
˜˜ 
createTestDto
˜˜ ,
.
˜˜, -
TestName
˜˜- 5
,
˜˜5 6
	TestPrice
¯¯ 
=
¯¯ 
createTestDto
¯¯  -
.
¯¯- .
	TestPrice
¯¯. 7
}
˘˘ 
;
˘˘ 
await
˚˚ 
_adminRepository
˚˚ &
.
˚˚& '
AddTestAsync
˚˚' 3
(
˚˚3 4
test
˚˚4 8
)
˚˚8 9
;
˚˚9 :
return
¸¸ 
true
¸¸ 
;
¸¸ 
}
˝˝ 
catch
˛˛ 
(
˛˛ 
	Exception
˛˛ 
ex
˛˛ 
)
˛˛  
{
ˇˇ 
throw
ÄÄ 
new
ÄÄ "
ApplicationException
ÄÄ .
(
ÄÄ. /
$str
ÄÄ/ [
,
ÄÄ[ \
ex
ÄÄ] _
)
ÄÄ_ `
;
ÄÄ` a
}
ÅÅ 
}
ÇÇ 	
public
ÑÑ 
async
ÑÑ 
Task
ÑÑ 
<
ÑÑ 
bool
ÑÑ 
>
ÑÑ 
UpdateTestAsync
ÑÑ  /
(
ÑÑ/ 0
int
ÑÑ0 3
testId
ÑÑ4 :
,
ÑÑ: ;!
CreateUpdateTestDto
ÑÑ< O
updateTestDto
ÑÑP ]
)
ÑÑ] ^
{
ÖÖ 	
try
ÜÜ 
{
áá 
var
àà 
test
àà 
=
àà 
await
àà  
_adminRepository
àà! 1
.
àà1 2
GetTestByIdAsync
àà2 B
(
ààB C
testId
ààC I
)
ààI J
;
ààJ K
if
ââ 
(
ââ 
test
ââ 
==
ââ 
null
ââ  
)
ââ  !
throw
ää 
new
ää "
KeyNotFoundException
ää 2
(
ää2 3
$str
ää3 D
)
ääD E
;
ääE F
test
åå 
.
åå 
TestName
åå 
=
åå 
updateTestDto
åå  -
.
åå- .
TestName
åå. 6
;
åå6 7
test
çç 
.
çç 
	TestPrice
çç 
=
çç  
updateTestDto
çç! .
.
çç. /
	TestPrice
çç/ 8
;
çç8 9
await
èè 
_adminRepository
èè &
.
èè& '
UpdateTestAsync
èè' 6
(
èè6 7
test
èè7 ;
)
èè; <
;
èè< =
return
êê 
true
êê 
;
êê 
}
ëë 
catch
íí 
(
íí 
	Exception
íí 
ex
íí 
)
íí  
{
ìì 
throw
îî 
new
îî "
ApplicationException
îî .
(
îî. /
$str
îî/ [
,
îî[ \
ex
îî] _
)
îî_ `
;
îî` a
}
ïï 
}
ññ 	
public
òò 
async
òò 
Task
òò 
<
òò 
IEnumerable
òò %
<
òò% &
MedicationDto
òò& 3
>
òò3 4
>
òò4 5$
GetAllMedicationsAsync
òò6 L
(
òòL M
)
òòM N
{
ôô 	
try
öö 
{
õõ 
var
úú 
medications
úú 
=
úú  !
await
úú" '
_adminRepository
úú( 8
.
úú8 9$
GetAllMedicationsAsync
úú9 O
(
úúO P
)
úúP Q
;
úúQ R
if
ûû 
(
ûû 
medications
ûû 
==
ûû  "
null
ûû# '
||
ûû( *
!
ûû+ ,
medications
ûû, 7
.
ûû7 8
Any
ûû8 ;
(
ûû; <
)
ûû< =
)
ûû= >
throw
üü 
new
üü "
KeyNotFoundException
üü 2
(
üü2 3
$str
üü3 J
)
üüJ K
;
üüK L
return
°° 
medications
°° "
.
°°" #
Select
°°# )
(
°°) *
m
°°* +
=>
°°, .
new
°°/ 2
MedicationDto
°°3 @
{
¢¢ 
MedicationID
££  
=
££! "
m
££# $
.
££$ %
MedicationID
££% 1
,
££1 2
MedicationName
§§ "
=
§§# $
m
§§% &
.
§§& '
MedicationName
§§' 5
,
§§5 6
PricePerUnit
••  
=
••! "
m
••# $
.
••$ %
PricePerUnit
••% 1
}
¶¶ 
)
¶¶ 
;
¶¶ 
}
ßß 
catch
®® 
(
®® 
	Exception
®® 
ex
®® 
)
®®  
{
©© 
throw
™™ 
new
™™ "
ApplicationException
™™ .
(
™™. /
$str
™™/ `
,
™™` a
ex
™™b d
)
™™d e
;
™™e f
}
´´ 
}
¨¨ 	
public
ÆÆ 
async
ÆÆ 
Task
ÆÆ 
<
ÆÆ 
bool
ÆÆ 
>
ÆÆ  
AddMedicationAsync
ÆÆ  2
(
ÆÆ2 3'
CreateUpdateMedicationDto
ÆÆ3 L!
createMedicationDto
ÆÆM `
)
ÆÆ` a
{
ØØ 	
try
∞∞ 
{
±± 
var
≤≤ 

medication
≤≤ 
=
≤≤  
new
≤≤! $

Medication
≤≤% /
{
≥≥ 
MedicationName
¥¥ "
=
¥¥# $!
createMedicationDto
¥¥% 8
.
¥¥8 9
MedicationName
¥¥9 G
,
¥¥G H
PricePerUnit
µµ  
=
µµ! "!
createMedicationDto
µµ# 6
.
µµ6 7
PricePerUnit
µµ7 C
}
∂∂ 
;
∂∂ 
await
∏∏ 
_adminRepository
∏∏ &
.
∏∏& ' 
AddMedicationAsync
∏∏' 9
(
∏∏9 :

medication
∏∏: D
)
∏∏D E
;
∏∏E F
return
ππ 
true
ππ 
;
ππ 
}
∫∫ 
catch
ªª 
(
ªª 
	Exception
ªª 
ex
ªª 
)
ªª  
{
ºº 
throw
ΩΩ 
new
ΩΩ "
ApplicationException
ΩΩ .
(
ΩΩ. /
$str
ΩΩ/ a
,
ΩΩa b
ex
ΩΩc e
)
ΩΩe f
;
ΩΩf g
}
ææ 
}
øø 	
public
¡¡ 
async
¡¡ 
Task
¡¡ 
<
¡¡ 
bool
¡¡ 
>
¡¡ #
UpdateMedicationAsync
¡¡  5
(
¡¡5 6
int
¡¡6 9
medicationId
¡¡: F
,
¡¡F G'
CreateUpdateMedicationDto
¡¡H a!
updateMedicationDto
¡¡b u
)
¡¡u v
{
¬¬ 	
try
√√ 
{
ƒƒ 
var
≈≈ 

medication
≈≈ 
=
≈≈  
await
≈≈! &
_adminRepository
≈≈' 7
.
≈≈7 8$
GetMedicationByIdAsync
≈≈8 N
(
≈≈N O
medicationId
≈≈O [
)
≈≈[ \
;
≈≈\ ]
if
∆∆ 
(
∆∆ 

medication
∆∆ 
==
∆∆ !
null
∆∆" &
)
∆∆& '
throw
«« 
new
«« "
KeyNotFoundException
«« 2
(
««2 3
$str
««3 J
)
««J K
;
««K L

medication
…… 
.
…… 
MedicationName
…… )
=
……* +!
updateMedicationDto
……, ?
.
……? @
MedicationName
……@ N
;
……N O

medication
   
.
   
PricePerUnit
   '
=
  ( )!
updateMedicationDto
  * =
.
  = >
PricePerUnit
  > J
;
  J K
await
ÃÃ 
_adminRepository
ÃÃ &
.
ÃÃ& '#
UpdateMedicationAsync
ÃÃ' <
(
ÃÃ< =

medication
ÃÃ= G
)
ÃÃG H
;
ÃÃH I
return
ÕÕ 
true
ÕÕ 
;
ÕÕ 
}
ŒŒ 
catch
œœ 
(
œœ 
	Exception
œœ 
ex
œœ 
)
œœ  
{
–– 
throw
—— 
new
—— "
ApplicationException
—— .
(
——. /
$str
——/ a
,
——a b
ex
——c e
)
——e f
;
——f g
}
““ 
}
”” 	
}
◊◊ 
}ÿÿ ˜.
eC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Services\AuthenticationService.cs
	namespace 	
AmazeCareAPI
 
. 
Services 
{ 
public 

class !
AuthenticationService &
{ 
private 
readonly 
IUserRepository (
_userRepository) 8
;8 9
private 
readonly 
IConfiguration '
_configuration( 6
;6 7
public !
AuthenticationService $
($ %
IUserRepository% 4
userRepository5 C
,C D
IConfigurationE S
configurationT a
)a b
{ 	
_userRepository 
= 
userRepository ,
;, -
_configuration 
= 
configuration *
;* +
} 	
public 
async 
Task 
< 
string  
>  !
AuthenticateUser" 2
(2 3
string3 9
username: B
,B C
stringD J
passwordK S
)S T
{ 	
try 
{ 
var 
user 
= 
await  
_userRepository! 0
.0 1 
GetUserWithRoleAsync1 E
(E F
usernameF N
)N O
;O P
if   
(   
user   
==   
null    
||  ! #
!  $ %
VerifyPassword  % 3
(  3 4
password  4 <
,  < =
user  > B
.  B C
PasswordHash  C O
)  O P
)  P Q
{!! 
throw"" 
new"" #
AuthenticationException"" 5
(""5 6
$str""6 U
)""U V
;""V W
}## 
return%% 
GenerateJwtToken%% '
(%%' (
user%%( ,
)%%, -
;%%- .
}&& 
catch'' 
('' 
	Exception'' 
ex'' 
)''  
when''! %
(''& '
!''' (
(''( )
ex'') +
is'', .#
AuthenticationException''/ F
)''F G
)''G H
{(( 
throw)) 
new)) 
ServiceException)) *
())* +
$str))+ U
,))U V
ex))W Y
)))Y Z
;))Z [
}** 
}++ 	
private.. 
bool.. 
VerifyPassword.. #
(..# $
string..$ *
password..+ 3
,..3 4
string..5 ;

storedHash..< F
)..F G
{// 	
return00 
BCrypt00 
.00 
Net00 
.00 
BCrypt00 $
.00$ %
Verify00% +
(00+ ,
password00, 4
,004 5

storedHash006 @
)00@ A
;00A B
}11 	
private22 
string22 
GenerateJwtToken22 '
(22' (
User22( ,
user22- 1
)221 2
{33 	
try44 
{55 
var66 
role66 
=66 
user66 
.66  
Role66  $
?66$ %
.66% &
RoleName66& .
??66/ 1
$str662 8
;668 9
var88 
claims88 
=88 
new88  
[88  !
]88! "
{99 
new:: 
Claim:: 
(:: #
JwtRegisteredClaimNames:: 5
.::5 6
Sub::6 9
,::9 :
user::; ?
.::? @
UserID::@ F
.::F G
ToString::G O
(::O P
)::P Q
)::Q R
,::R S
new;; 
Claim;; 
(;; 

ClaimTypes;; (
.;;( )
Name;;) -
,;;- .
user;;/ 3
.;;3 4
Username;;4 <
);;< =
,;;= >
new<< 
Claim<< 
(<< 

ClaimTypes<< (
.<<( )
Role<<) -
,<<- .
role<</ 3
)<<3 4
}== 
;== 
var?? 
key?? 
=?? 
new??  
SymmetricSecurityKey?? 2
(??2 3
Encoding??3 ;
.??; <
UTF8??< @
.??@ A
GetBytes??A I
(??I J
_configuration??J X
[??X Y
$str??Y b
]??b c
)??c d
)??d e
;??e f
var@@ 
creds@@ 
=@@ 
new@@ 
SigningCredentials@@  2
(@@2 3
key@@3 6
,@@6 7
SecurityAlgorithms@@8 J
.@@J K

HmacSha256@@K U
)@@U V
;@@V W
varBB 
tokenBB 
=BB 
newBB 
JwtSecurityTokenBB  0
(BB0 1
issuerCC 
:CC 
_configurationCC *
[CC* +
$strCC+ 7
]CC7 8
,CC8 9
audienceDD 
:DD 
_configurationDD ,
[DD, -
$strDD- ;
]DD; <
,DD< =
claimsEE 
:EE 
claimsEE "
,EE" #
expiresFF 
:FF 
DateTimeFF %
.FF% &
UtcNowFF& ,
.FF, -
AddHoursFF- 5
(FF5 6
$numFF6 7
)FF7 8
,FF8 9
signingCredentialsGG &
:GG& '
credsGG( -
)GG- .
;GG. /
returnII 
newII #
JwtSecurityTokenHandlerII 2
(II2 3
)II3 4
.II4 5

WriteTokenII5 ?
(II? @
tokenII@ E
)IIE F
;IIF G
}JJ 
catchKK 
(KK 
	ExceptionKK 
exKK 
)KK  
{LL 
throwMM 
newMM 
ServiceExceptionMM *
(MM* +
$strMM+ H
,MMH I
exMMJ L
)MML M
;MMM N
}NN 
}OO 	
}PP 
}RR ¥‰
]C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Services\DoctorService.cs
	namespace 	
AmazeCareAPI
 
. 
Services 
{		 
public

 

class

 
DoctorService

 
:

  
IDoctorService

! /
{ 
private 
readonly 
IDoctorRepository *
_doctorRepository+ <
;< =
public 
DoctorService 
( 
IDoctorRepository .
doctorRepository/ ?
)? @
{ 	
_doctorRepository 
= 
doctorRepository  0
;0 1
} 	
public 
async 
Task 
< 
int 
? 
> 
GetDoctorIdAsync  0
(0 1
int1 4
userId5 ;
); <
{ 	
try 
{ 
return 
await 
_doctorRepository .
.. /$
GetDoctorIdByUserIdAsync/ G
(G H
userIdH N
)N O
;O P
} 
catch 
( 
	Exception 
ex 
)  
{ 
throw 
new  
ApplicationException .
(. /
$"/ 1
$str1 S
{S T
userIdT Z
}Z [
$str[ \
"\ ]
,] ^
ex_ a
)a b
;b c
} 
} 	
public   
async   
Task   
<   
List   "
<  " #%
AppointmentWithPatientDto  # <
>  < =
>  = >#
GetAppointmentsByStatus  ? V
(  V W
int  W Z
doctorId  [ c
,  c d
string  e k
status  l r
)  r s
{!! 
try"" 
{## 
return$$ 
await$$  
_doctorRepository$$! 2
.$$2 3(
GetAppointmentsByStatusAsync$$3 O
($$O P
doctorId$$P X
,$$X Y
status$$Z `
)$$` a
;$$a b
}%% 
catch&& 
(&& 
	Exception&&  
ex&&! #
)&&# $
{'' 
throw(( 
new((  
ApplicationException(( 2
(((2 3
$"((3 5
$str((5 ^
{((^ _
status((_ e
}((e f
$str((f s
{((s t
doctorId((t |
}((| }
$str((} ~
"((~ 
,	(( Ä
ex
((Å É
)
((É Ñ
;
((Ñ Ö
})) 
}** 
public,, 
async,, 
Task,, 
<,, 
bool,, "
>,," #%
ApproveAppointmentRequest,,$ =
(,,= >
int,,> A
doctorId,,B J
,,,J K
int,,L O
appointmentId,,P ]
),,] ^
{-- 
try.. 
{// 
var00 
appointment00 #
=00$ %
await00& +
_doctorRepository00, =
.00= >(
GetRequestedAppointmentAsync00> Z
(00Z [
doctorId00[ c
,00c d
appointmentId00e r
)00r s
;00s t
if11 
(11 
appointment11 #
==11$ &
null11' +
)11+ ,
return22 
false22 $
;22$ %
appointment44 
.44  
Status44  &
=44' (
$str44) 4
;444 5
await55 
_doctorRepository55 +
.55+ ,"
UpdateAppointmentAsync55, B
(55B C
appointment55C N
)55N O
;55O P
return66 
true66 
;66  
}77 
catch88 
(88 
	Exception88  
ex88! #
)88# $
{99 
throw:: 
new::  
ApplicationException:: 2
(::2 3
$"::3 5
$str::5 Q
{::Q R
appointmentId::R _
}::_ `
$str::` l
{::l m
doctorId::m u
}::u v
$str::v w
"::w x
,::x y
ex::z |
)::| }
;::} ~
};; 
}<< 
public>> 
async>> 
Task>> 
<>> 
bool>> "
>>>" #&
CancelScheduledAppointment>>$ >
(>>> ?
int>>? B
doctorId>>C K
,>>K L
int>>M P
appointmentId>>Q ^
)>>^ _
{?? 
try@@ 
{AA 
varBB 
appointmentBB #
=BB$ %
awaitBB& +
_doctorRepositoryBB, =
.BB= >(
GetScheduledAppointmentAsyncBB> Z
(BBZ [
doctorIdBB[ c
,BBc d
appointmentIdBBe r
)BBr s
;BBs t
ifCC 
(CC 
appointmentCC #
==CC$ &
nullCC' +
)CC+ ,
returnDD 
falseDD $
;DD$ %
appointmentFF 
.FF  
StatusFF  &
=FF' (
$strFF) 3
;FF3 4
awaitGG 
_doctorRepositoryGG +
.GG+ ,"
UpdateAppointmentAsyncGG, B
(GGB C
appointmentGGC N
)GGN O
;GGO P
returnHH 
trueHH 
;HH  
}II 
catchJJ 
(JJ 
	ExceptionJJ  
exJJ! #
)JJ# $
{KK 
throwLL 
newLL  
ApplicationExceptionLL 2
(LL2 3
$"LL3 5
$strLL5 Q
{LLQ R
appointmentIdLLR _
}LL_ `
$strLL` l
{LLl m
doctorIdLLm u
}LLu v
$strLLv w
"LLw x
,LLx y
exLLz |
)LL| }
;LL} ~
}MM 
}NN 
publicOO 
asyncOO 
TaskOO 
<OO 
boolOO 
>OO 
UpdateMedicalRecordOO  3
(OO3 4
intOO4 7
doctorIdOO8 @
,OO@ A
intOOB E
recordIdOOF N
,OON O
intOOP S
	patientIdOOT ]
,OO] ^"
UpdateMedicalRecordDtoOO_ u
	updateDtoOOv 
)	OO Ä
{PP 	
tryQQ 
{RR 
varSS 
medicalRecordSS !
=SS" #
awaitSS$ )
_doctorRepositorySS* ;
.SS; <!
GetMedicalRecordAsyncSS< Q
(SSQ R
doctorIdSSR Z
,SSZ [
recordIdSS\ d
,SSd e
	patientIdSSf o
)SSo p
;SSp q
ifTT 
(TT 
medicalRecordTT !
==TT" $
nullTT% )
)TT) *
returnUU 
falseUU  
;UU  !
ifWW 
(WW 
	updateDtoWW 
.WW 
SymptomsWW &
!=WW' )
nullWW* .
)WW. /
medicalRecordXX !
.XX! "
SymptomsXX" *
=XX+ ,
	updateDtoXX- 6
.XX6 7
SymptomsXX7 ?
;XX? @
ifYY 
(YY 
	updateDtoYY 
.YY 
PhysicalExaminationYY 1
!=YY2 4
nullYY5 9
)YY9 :
medicalRecordZZ !
.ZZ! "
PhysicalExaminationZZ" 5
=ZZ6 7
	updateDtoZZ8 A
.ZZA B
PhysicalExaminationZZB U
;ZZU V
if[[ 
([[ 
	updateDto[[ 
.[[ 
TreatmentPlan[[ +
!=[[, .
null[[/ 3
)[[3 4
medicalRecord\\ !
.\\! "
TreatmentPlan\\" /
=\\0 1
	updateDto\\2 ;
.\\; <
TreatmentPlan\\< I
;\\I J
if]] 
(]] 
	updateDto]] 
.]] 
FollowUpDate]] *
!=]]+ -
null]]. 2
)]]2 3
medicalRecord^^ !
.^^! "
FollowUpDate^^" .
=^^/ 0
	updateDto^^1 :
.^^: ;
FollowUpDate^^; G
;^^G H
await`` 
_doctorRepository`` '
.``' ($
UpdateMedicalRecordAsync``( @
(``@ A
medicalRecord``A N
)``N O
;``O P
returnaa 
trueaa 
;aa 
}bb 
catchcc 
(cc 
	Exceptioncc 
excc 
)cc  
{dd 
throwee 
newee  
ApplicationExceptionee .
(ee. /
$"ee/ 1
$stree1 O
{eeO P
recordIdeeP X
}eeX Y
$streeY e
{eee f
doctorIdeef n
}een o
$streeo p
"eep q
,eeq r
exees u
)eeu v
;eev w
}ff 
}gg 	
publichh 
asynchh 
Taskhh 
<hh 
boolhh 
>hh 
ConductConsultationhh  3
(hh3 4
inthh4 7
doctorIdhh8 @
,hh@ A
inthhB E
appointmentIdhhF S
,hhS T"
CreateMedicalRecordDtohhU k
	recordDtohhl u
,hhu v
decimalhhw ~
consultationFee	hh é
)
hhé è
{ii 	
tryjj 
{kk 
varll 
appointmentll 
=ll  !
awaitll" '
_doctorRepositoryll( 9
.ll9 :(
GetScheduledAppointmentAsyncll: V
(llV W
doctorIdllW _
,ll_ `
appointmentIdlla n
)lln o
;llo p
ifmm 
(mm 
appointmentmm 
==mm  "
nullmm# '
||mm( *
appointmentmm+ 6
.mm6 7
Statusmm7 =
!=mm> @
$strmmA L
)mmL M
returnnn 
falsenn  
;nn  !
varpp 
medicalRecordpp !
=pp" #
newpp$ '
MedicalRecordpp( 5
{qq 
AppointmentIDrr !
=rr" #
appointmentrr$ /
.rr/ 0
AppointmentIDrr0 =
,rr= >
DoctorIDss 
=ss 
doctorIdss '
,ss' (
	PatientIDtt 
=tt 
appointmenttt  +
.tt+ ,
	PatientIDtt, 5
,tt5 6
Symptomsuu 
=uu 
	recordDtouu (
.uu( )
Symptomsuu) 1
,uu1 2
PhysicalExaminationvv '
=vv( )
	recordDtovv* 3
.vv3 4
PhysicalExaminationvv4 G
,vvG H
TreatmentPlanww !
=ww" #
	recordDtoww$ -
.ww- .
TreatmentPlanww. ;
,ww; <
FollowUpDatexx  
=xx! "
	recordDtoxx# ,
.xx, -
FollowUpDatexx- 9
,xx9 :

TotalPriceyy 
=yy  
$numyy! "
}zz 
;zz 
await|| 
_doctorRepository|| '
.||' (!
AddMedicalRecordAsync||( =
(||= >
medicalRecord||> K
)||K L
;||L M
decimal~~ 
totalTestsPrice~~ '
=~~( )
$num~~* +
;~~+ ,
decimal !
totalMedicationsPrice -
=. /
$num0 1
;1 2
if
ÅÅ 
(
ÅÅ 
	recordDto
ÅÅ 
.
ÅÅ 
TestIDs
ÅÅ %
!=
ÅÅ& (
null
ÅÅ) -
&&
ÅÅ. 0
	recordDto
ÅÅ1 :
.
ÅÅ: ;
TestIDs
ÅÅ; B
.
ÅÅB C
Any
ÅÅC F
(
ÅÅF G
)
ÅÅG H
)
ÅÅH I
{
ÇÇ 
var
ÉÉ 
selectedTests
ÉÉ %
=
ÉÉ& '
await
ÉÉ( -
_doctorRepository
ÉÉ. ?
.
ÉÉ? @ 
GetTestsByIdsAsync
ÉÉ@ R
(
ÉÉR S
	recordDto
ÉÉS \
.
ÉÉ\ ]
TestIDs
ÉÉ] d
)
ÉÉd e
;
ÉÉe f
var
ÑÑ  
medicalRecordTests
ÑÑ *
=
ÑÑ+ ,
selectedTests
ÑÑ- :
.
ÑÑ: ;
Select
ÑÑ; A
(
ÑÑA B
test
ÑÑB F
=>
ÑÑG I
new
ÑÑJ M
MedicalRecordTest
ÑÑN _
{
ÖÖ 
RecordID
ÜÜ  
=
ÜÜ! "
medicalRecord
ÜÜ# 0
.
ÜÜ0 1
RecordID
ÜÜ1 9
,
ÜÜ9 :
TestID
áá 
=
áá  
test
áá! %
.
áá% &
TestID
áá& ,
}
àà 
)
àà 
.
àà 
ToList
àà 
(
àà 
)
àà 
;
àà  
await
ää 
_doctorRepository
ää +
.
ää+ ,(
AddMedicalRecordTestsAsync
ää, F
(
ääF G 
medicalRecordTests
ääG Y
)
ääY Z
;
ääZ [
totalTestsPrice
ãã #
=
ãã$ %
selectedTests
ãã& 3
.
ãã3 4
Sum
ãã4 7
(
ãã7 8
t
ãã8 9
=>
ãã: <
t
ãã= >
.
ãã> ?
	TestPrice
ãã? H
)
ããH I
;
ããI J
medicalRecord
åå !
.
åå! "

TotalPrice
åå" ,
+=
åå- /
totalTestsPrice
åå0 ?
;
åå? @
}
çç 
var
èè 
prescriptions
èè !
=
èè" #
new
èè$ '
List
èè( ,
<
èè, -
Prescription
èè- 9
>
èè9 :
(
èè: ;
)
èè; <
;
èè< =
if
êê 
(
êê 
	recordDto
êê 
.
êê 
Prescriptions
êê +
!=
êê, .
null
êê/ 3
&&
êê4 6
	recordDto
êê7 @
.
êê@ A
Prescriptions
êêA N
.
êêN O
Any
êêO R
(
êêR S
)
êêS T
)
êêT U
{
ëë 
foreach
íí 
(
íí 
var
íí  
prescriptionDto
íí! 0
in
íí1 3
	recordDto
íí4 =
.
íí= >
Prescriptions
íí> K
)
ííK L
{
ìì 
var
îî 

medication
îî &
=
îî' (
await
îî) .
_doctorRepository
îî/ @
.
îî@ A$
GetMedicationByIdAsync
îîA W
(
îîW X
prescriptionDto
îîX g
.
îîg h
MedicationID
îîh t
)
îît u
;
îîu v
if
ïï 
(
ïï 

medication
ïï &
!=
ïï' )
null
ïï* .
)
ïï. /
{
ññ 
var
óó 
prescription
óó  ,
=
óó- .
new
óó/ 2
Prescription
óó3 ?
{
òò 
RecordID
ôô  (
=
ôô) *
medicalRecord
ôô+ 8
.
ôô8 9
RecordID
ôô9 A
,
ôôA B
MedicationID
öö  ,
=
öö- .
prescriptionDto
öö/ >
.
öö> ?
MedicationID
öö? K
,
ööK L
Dosage
õõ  &
=
õõ' (
prescriptionDto
õõ) 8
.
õõ8 9
Dosage
õõ9 ?
,
õõ? @
DurationDays
úú  ,
=
úú- .
prescriptionDto
úú/ >
.
úú> ?
DurationDays
úú? K
,
úúK L
Quantity
ùù  (
=
ùù) *
prescriptionDto
ùù+ :
.
ùù: ;
Quantity
ùù; C
,
ùùC D

TotalPrice
ûû  *
=
ûû+ ,

medication
ûû- 7
.
ûû7 8
PricePerUnit
ûû8 D
*
ûûE F
prescriptionDto
ûûG V
.
ûûV W
Quantity
ûûW _
,
ûû_ `
MedicationName
üü  .
=
üü/ 0

medication
üü1 ;
.
üü; <
MedicationName
üü< J
}
†† 
;
†† 
prescriptions
°° )
.
°°) *
Add
°°* -
(
°°- .
prescription
°°. :
)
°°: ;
;
°°; <#
totalMedicationsPrice
¢¢ 1
+=
¢¢2 4
prescription
¢¢5 A
.
¢¢A B

TotalPrice
¢¢B L
;
¢¢L M
}
££ 
}
§§ 
await
•• 
_doctorRepository
•• +
.
••+ ,#
AddPrescriptionsAsync
••, A
(
••A B
prescriptions
••B O
)
••O P
;
••P Q
medicalRecord
¶¶ !
.
¶¶! "

TotalPrice
¶¶" ,
+=
¶¶- /#
totalMedicationsPrice
¶¶0 E
;
¶¶E F
}
ßß 
await
©© 
_doctorRepository
©© '
.
©©' (0
"UpdateMedicalRecordTotalPriceAsync
©©( J
(
©©J K
medicalRecord
©©K X
)
©©X Y
;
©©Y Z
var
´´ 
billing
´´ 
=
´´ 
new
´´ !
Billing
´´" )
{
¨¨ 
	PatientID
≠≠ 
=
≠≠ 
appointment
≠≠  +
.
≠≠+ ,
	PatientID
≠≠, 5
,
≠≠5 6
DoctorID
ÆÆ 
=
ÆÆ 
doctorId
ÆÆ '
,
ÆÆ' (
MedicalRecordID
ØØ #
=
ØØ$ %
medicalRecord
ØØ& 3
.
ØØ3 4
RecordID
ØØ4 <
,
ØØ< =
ConsultationFee
∞∞ #
=
∞∞$ %
consultationFee
∞∞& 5
,
∞∞5 6
TotalTestsPrice
±± #
=
±±$ %
totalTestsPrice
±±& 5
,
±±5 6#
TotalMedicationsPrice
≤≤ )
=
≤≤* +#
totalMedicationsPrice
≤≤, A
,
≤≤A B

GrandTotal
≥≥ 
=
≥≥  
consultationFee
≥≥! 0
+
≥≥1 2
totalTestsPrice
≥≥3 B
+
≥≥C D#
totalMedicationsPrice
≥≥E Z
,
≥≥Z [
Status
¥¥ 
=
¥¥ 
$str
¥¥ &
}
µµ 
;
µµ 
await
∂∂ 
_doctorRepository
∂∂ '
.
∂∂' (
AddBillingAsync
∂∂( 7
(
∂∂7 8
billing
∂∂8 ?
)
∂∂? @
;
∂∂@ A
medicalRecord
∏∏ 
.
∏∏ 
	BillingID
∏∏ '
=
∏∏( )
billing
∏∏* 1
.
∏∏1 2
	BillingID
∏∏2 ;
;
∏∏; <
await
ππ 
_doctorRepository
ππ '
.
ππ' ( 
UpdateBillingAsync
ππ( :
(
ππ: ;
billing
ππ; B
)
ππB C
;
ππC D
foreach
ªª 
(
ªª 
var
ªª 
prescription
ªª )
in
ªª* ,
prescriptions
ªª- :
)
ªª: ;
{
ºº 
prescription
ΩΩ  
.
ΩΩ  !
	BillingID
ΩΩ! *
=
ΩΩ+ ,
billing
ΩΩ- 4
.
ΩΩ4 5
	BillingID
ΩΩ5 >
;
ΩΩ> ?
}
ææ 
await
¿¿ 
_doctorRepository
¿¿ '
.
¿¿' (/
!UpdatePrescriptionBillingIdsAsync
¿¿( I
(
¿¿I J
prescriptions
¿¿J W
)
¿¿W X
;
¿¿X Y
appointment
¬¬ 
.
¬¬ 
Status
¬¬ "
=
¬¬# $
$str
¬¬% 0
;
¬¬0 1
await
√√ 
_doctorRepository
√√ '
.
√√' ($
UpdateAppointmentAsync
√√( >
(
√√> ?
appointment
√√? J
)
√√J K
;
√√K L
return
≈≈ 
true
≈≈ 
;
≈≈ 
}
∆∆ 
catch
«« 
(
«« 
	Exception
«« 
ex
«« 
)
««  
{
»» 
throw
…… 
new
…… "
ApplicationException
…… .
(
……. /
$"
……/ 1
$str
……1 _
{
……_ `
appointmentId
……` m
}
……m n
$str
……n {
{
……{ |
doctorId……| Ñ
}……Ñ Ö
$str……Ö Ü
"……Ü á
,……á à
ex……â ã
)……ã å
;……å ç
}
   
}
ÀÀ 	
public
ÕÕ 
async
ÕÕ 
Task
ÕÕ 
<
ÕÕ 
List
ÕÕ 
<
ÕÕ %
PatientMedicalRecordDto
ÕÕ 6
>
ÕÕ6 7
>
ÕÕ7 8/
!GetMedicalRecordsByPatientIdAsync
ÕÕ9 Z
(
ÕÕZ [
int
ÕÕ[ ^
	patientId
ÕÕ_ h
)
ÕÕh i
{
ŒŒ 	
try
œœ 
{
–– 
var
—— 
records
—— 
=
—— 
await
—— #
_doctorRepository
——$ 5
.
——5 6>
0GetAppointmentsWithMedicalRecordsAndDetailsAsync
——6 f
(
——f g
	patientId
——g p
)
——p q
;
——q r
if
““ 
(
““ 
records
““ 
==
““ 
null
““ #
||
““$ &
!
““' (
records
““( /
.
““/ 0
Any
““0 3
(
““3 4
)
““4 5
)
““5 6
throw
”” 
new
”” 
	Exception
”” '
(
””' (
$str
””( \
)
””\ ]
;
””] ^
var
’’ 
result
’’ 
=
’’ 
records
’’ $
.
’’$ %
Select
’’% +
(
’’+ ,
a
’’, -
=>
’’. 0
new
’’1 4%
PatientMedicalRecordDto
’’5 L
{
÷÷ 
MedicalRecordID
◊◊ #
=
◊◊$ %
a
◊◊& '
.
◊◊' (
MedicalRecord
◊◊( 5
?
◊◊5 6
.
◊◊6 7
RecordID
◊◊7 ?
,
◊◊? @
AppointmentDate
ÿÿ #
=
ÿÿ$ %
a
ÿÿ& '
.
ÿÿ' (
AppointmentDate
ÿÿ( 7
,
ÿÿ7 8

DoctorName
ŸŸ 
=
ŸŸ  
a
ŸŸ! "
.
ŸŸ" #
Doctor
ŸŸ# )
?
ŸŸ) *
.
ŸŸ* +
FullName
ŸŸ+ 3
,
ŸŸ3 4
Symptoms
⁄⁄ 
=
⁄⁄ 
a
⁄⁄  
.
⁄⁄  !
MedicalRecord
⁄⁄! .
?
⁄⁄. /
.
⁄⁄/ 0
Symptoms
⁄⁄0 8
,
⁄⁄8 9!
PhysicalExamination
€€ '
=
€€( )
a
€€* +
.
€€+ ,
MedicalRecord
€€, 9
?
€€9 :
.
€€: ;!
PhysicalExamination
€€; N
,
€€N O
TreatmentPlan
‹‹ !
=
‹‹" #
a
‹‹$ %
.
‹‹% &
MedicalRecord
‹‹& 3
?
‹‹3 4
.
‹‹4 5
TreatmentPlan
‹‹5 B
,
‹‹B C
FollowUpDate
››  
=
››! "
a
››# $
.
››$ %
MedicalRecord
››% 2
?
››2 3
.
››3 4
FollowUpDate
››4 @
,
››@ A
Tests
ﬁﬁ 
=
ﬁﬁ 
a
ﬁﬁ 
.
ﬁﬁ 
MedicalRecord
ﬁﬁ +
?
ﬁﬁ+ ,
.
ﬁﬁ, - 
MedicalRecordTests
ﬁﬁ- ?
?
ﬁﬁ? @
.
ﬁﬁ@ A
Select
ﬁﬁA G
(
ﬁﬁG H
mt
ﬁﬁH J
=>
ﬁﬁK M
new
ﬁﬁN Q
TestDto
ﬁﬁR Y
{
ﬂﬂ 
TestName
‡‡  
=
‡‡! "
mt
‡‡# %
.
‡‡% &
Test
‡‡& *
?
‡‡* +
.
‡‡+ ,
TestName
‡‡, 4
,
‡‡4 5
	TestPrice
·· !
=
··" #
mt
··$ &
.
··& '
Test
··' +
.
··+ ,
	TestPrice
··, 5
}
‚‚ 
)
‚‚ 
.
‚‚ 
ToList
‚‚ 
(
‚‚ 
)
‚‚ 
??
‚‚  "
new
‚‚# &
List
‚‚' +
<
‚‚+ ,
TestDto
‚‚, 3
>
‚‚3 4
(
‚‚4 5
)
‚‚5 6
,
‚‚6 7
Prescriptions
„„ !
=
„„" #
a
„„$ %
.
„„% &
MedicalRecord
„„& 3
?
„„3 4
.
„„4 5
Prescriptions
„„5 B
?
„„B C
.
„„C D
Select
„„D J
(
„„J K
p
„„K L
=>
„„M O
new
„„P S
PrescriptionDto
„„T c
{
‰‰ 
MedicationName
ÂÂ &
=
ÂÂ' (
p
ÂÂ) *
.
ÂÂ* +
MedicationName
ÂÂ+ 9
,
ÂÂ9 :
Dosage
ÊÊ 
=
ÊÊ  
p
ÊÊ! "
.
ÊÊ" #
Dosage
ÊÊ# )
,
ÊÊ) *
DurationDays
ÁÁ $
=
ÁÁ% &
p
ÁÁ' (
.
ÁÁ( )
DurationDays
ÁÁ) 5
,
ÁÁ5 6
Quantity
ËË  
=
ËË! "
p
ËË# $
.
ËË$ %
Quantity
ËË% -
}
ÈÈ 
)
ÈÈ 
.
ÈÈ 
ToList
ÈÈ 
(
ÈÈ 
)
ÈÈ 
??
ÈÈ  "
new
ÈÈ# &
List
ÈÈ' +
<
ÈÈ+ ,
PrescriptionDto
ÈÈ, ;
>
ÈÈ; <
(
ÈÈ< =
)
ÈÈ= >
,
ÈÈ> ?
BillingDetails
ÍÍ "
=
ÍÍ# $
a
ÍÍ% &
.
ÍÍ& '
MedicalRecord
ÍÍ' 4
?
ÍÍ4 5
.
ÍÍ5 6
Billing
ÍÍ6 =
!=
ÍÍ> @
null
ÍÍA E
?
ÍÍF G
new
ÍÍH K

BillingDto
ÍÍL V
{
ÎÎ 
	BillingID
ÏÏ !
=
ÏÏ" #
a
ÏÏ$ %
.
ÏÏ% &
MedicalRecord
ÏÏ& 3
.
ÏÏ3 4
Billing
ÏÏ4 ;
.
ÏÏ; <
	BillingID
ÏÏ< E
,
ÏÏE F
ConsultationFee
ÌÌ '
=
ÌÌ( )
a
ÌÌ* +
.
ÌÌ+ ,
MedicalRecord
ÌÌ, 9
.
ÌÌ9 :
Billing
ÌÌ: A
.
ÌÌA B
ConsultationFee
ÌÌB Q
,
ÌÌQ R
TotalTestsPrice
ÓÓ '
=
ÓÓ( )
a
ÓÓ* +
.
ÓÓ+ ,
MedicalRecord
ÓÓ, 9
.
ÓÓ9 :
Billing
ÓÓ: A
.
ÓÓA B
TotalTestsPrice
ÓÓB Q
,
ÓÓQ R#
TotalMedicationsPrice
ÔÔ -
=
ÔÔ. /
a
ÔÔ0 1
.
ÔÔ1 2
MedicalRecord
ÔÔ2 ?
.
ÔÔ? @
Billing
ÔÔ@ G
.
ÔÔG H#
TotalMedicationsPrice
ÔÔH ]
,
ÔÔ] ^

GrandTotal
 "
=
# $
a
% &
.
& '
MedicalRecord
' 4
.
4 5
Billing
5 <
.
< =

GrandTotal
= G
,
G H
Status
ÒÒ 
=
ÒÒ  
a
ÒÒ! "
.
ÒÒ" #
MedicalRecord
ÒÒ# 0
.
ÒÒ0 1
Billing
ÒÒ1 8
.
ÒÒ8 9
Status
ÒÒ9 ?
}
ÚÚ 
:
ÚÚ 
null
ÚÚ 
}
ÛÛ 
)
ÛÛ 
.
ÛÛ 
ToList
ÛÛ 
(
ÛÛ 
)
ÛÛ 
;
ÛÛ 
return
ıı 
result
ıı 
;
ıı 
}
ˆˆ 
catch
˜˜ 
(
˜˜ 
	Exception
˜˜ 
ex
˜˜ 
)
˜˜  
{
¯¯ 
throw
˘˘ 
new
˘˘ 
	Exception
˘˘ #
(
˘˘# $
$"
˘˘$ &
$str
˘˘& X
{
˘˘X Y
ex
˘˘Y [
.
˘˘[ \
Message
˘˘\ c
}
˘˘c d
"
˘˘d e
,
˘˘e f
ex
˘˘g i
)
˘˘i j
;
˘˘j k
}
˙˙ 
}
˚˚ 	
public
˛˛ 
async
˛˛ 
Task
˛˛ 
<
˛˛ 
bool
˛˛ 
>
˛˛ &
UpdateBillingStatusAsync
˛˛  8
(
˛˛8 9
int
˛˛9 <
	billingId
˛˛= F
,
˛˛F G
int
˛˛H K
doctorId
˛˛L T
)
˛˛T U
{
ˇˇ 	
try
ÄÄ 
{
ÅÅ 
var
ÇÇ 
billing
ÇÇ 
=
ÇÇ 
await
ÇÇ #
_doctorRepository
ÇÇ$ 5
.
ÇÇ5 6,
GetBillingByIdAndDoctorIdAsync
ÇÇ6 T
(
ÇÇT U
	billingId
ÇÇU ^
,
ÇÇ^ _
doctorId
ÇÇ` h
)
ÇÇh i
;
ÇÇi j
if
ÉÉ 
(
ÉÉ 
billing
ÉÉ 
==
ÉÉ 
null
ÉÉ #
)
ÉÉ# $
throw
ÑÑ 
new
ÑÑ 
	Exception
ÑÑ '
(
ÑÑ' (
$str
ÑÑ( C
)
ÑÑC D
;
ÑÑD E
if
ÜÜ 
(
ÜÜ 
billing
ÜÜ 
.
ÜÜ 
Status
ÜÜ "
==
ÜÜ# %
$str
ÜÜ& ,
)
ÜÜ, -
throw
áá 
new
áá 
	Exception
áá '
(
áá' (
$str
áá( S
)
ááS T
;
ááT U
billing
ââ 
.
ââ 
Status
ââ 
=
ââ  
$str
ââ! '
;
ââ' (
await
ää 
_doctorRepository
ää '
.
ää' ( 
UpdateBillingAsync
ää( :
(
ää: ;
billing
ää; B
)
ääB C
;
ääC D
return
ãã 
true
ãã 
;
ãã 
}
åå 
catch
çç 
(
çç 
	Exception
çç 
ex
çç 
)
çç  
{
éé 
throw
èè 
new
èè 
	Exception
èè #
(
èè# $
$"
èè$ &
$str
èè& W
{
èèW X
ex
èèX Z
.
èèZ [
Message
èè[ b
}
èèb c
"
èèc d
,
èèd e
ex
èèf h
)
èèh i
;
èèi j
}
êê 
}
ëë 	
public
ìì 
async
ìì 
Task
ìì 
<
ìì 
List
ìì 
<
ìì 
TestDto
ìì &
>
ìì& '
>
ìì' (
GetTestsAsync
ìì) 6
(
ìì6 7
)
ìì7 8
{
îî 	
try
ïï 
{
ññ 
var
óó 
tests
óó 
=
óó 
await
óó !
_doctorRepository
óó" 3
.
óó3 4
GetAllTestsAsync
óó4 D
(
óóD E
)
óóE F
;
óóF G
if
òò 
(
òò 
tests
òò 
==
òò 
null
òò !
||
òò" $
!
òò% &
tests
òò& +
.
òò+ ,
Any
òò, /
(
òò/ 0
)
òò0 1
)
òò1 2
throw
ôô 
new
ôô 
	Exception
ôô '
(
ôô' (
$str
ôô( =
)
ôô= >
;
ôô> ?
return
õõ 
tests
õõ 
;
õõ 
}
úú 
catch
ùù 
(
ùù 
	Exception
ùù 
ex
ùù 
)
ùù  
{
ûû 
throw
üü 
new
üü 
	Exception
üü #
(
üü# $
$"
üü$ &
$str
üü& N
{
üüN O
ex
üüO Q
.
üüQ R
Message
üüR Y
}
üüY Z
"
üüZ [
,
üü[ \
ex
üü] _
)
üü_ `
;
üü` a
}
†† 
}
°° 	
public
¢¢ 
async
¢¢ 
Task
¢¢ 
<
¢¢ 
List
¢¢ 
<
¢¢ 
MedicationDto
¢¢ ,
>
¢¢, -
>
¢¢- .!
GetMedicationsAsync
¢¢/ B
(
¢¢B C
)
¢¢C D
{
££ 	
try
§§ 
{
•• 
var
¶¶ 
medications
¶¶ 
=
¶¶  !
await
¶¶" '
_doctorRepository
¶¶( 9
.
¶¶9 :$
GetAllMedicationsAsync
¶¶: P
(
¶¶P Q
)
¶¶Q R
;
¶¶R S
if
ßß 
(
ßß 
medications
ßß 
==
ßß  "
null
ßß# '
||
ßß( *
!
ßß+ ,
medications
ßß, 7
.
ßß7 8
Any
ßß8 ;
(
ßß; <
)
ßß< =
)
ßß= >
throw
®® 
new
®® 
	Exception
®® '
(
®®' (
$str
®®( C
)
®®C D
;
®®D E
return
™™ 
medications
™™ "
;
™™" #
}
´´ 
catch
¨¨ 
(
¨¨ 
	Exception
¨¨ 
ex
¨¨ 
)
¨¨  
{
≠≠ 
throw
ÆÆ 
new
ÆÆ 
	Exception
ÆÆ #
(
ÆÆ# $
$"
ÆÆ$ &
$str
ÆÆ& T
{
ÆÆT U
ex
ÆÆU W
.
ÆÆW X
Message
ÆÆX _
}
ÆÆ_ `
"
ÆÆ` a
,
ÆÆa b
ex
ÆÆc e
)
ÆÆe f
;
ÆÆf g
}
ØØ 
}
∞∞ 	
public
±± 
async
±± 
Task
±± 
<
±± 
bool
±± 
>
±± 
AddScheduleAsync
±±  0
(
±±0 1
int
±±1 4
doctorId
±±5 =
,
±±= >
CreateScheduleDto
±±? P
scheduleDto
±±Q \
)
±±\ ]
{
≤≤ 	
try
≥≥ 
{
¥¥ 
var
µµ 
schedule
µµ 
=
µµ 
new
µµ "
DoctorSchedule
µµ# 1
{
∂∂ 
DoctorID
∑∑ 
=
∑∑ 
doctorId
∑∑ '
,
∑∑' (
	StartDate
∏∏ 
=
∏∏ 
scheduleDto
∏∏  +
.
∏∏+ ,
	StartDate
∏∏, 5
,
∏∏5 6
EndDate
ππ 
=
ππ 
scheduleDto
ππ )
.
ππ) *
EndDate
ππ* 1
,
ππ1 2
Status
∫∫ 
=
∫∫ 
$str
∫∫ (
}
ªª 
;
ªª 
await
ΩΩ 
_doctorRepository
ΩΩ '
.
ΩΩ' (
AddScheduleAsync
ΩΩ( 8
(
ΩΩ8 9
schedule
ΩΩ9 A
)
ΩΩA B
;
ΩΩB C
return
ææ 
true
ææ 
;
ææ 
}
øø 
catch
¿¿ 
(
¿¿ 
	Exception
¿¿ 
ex
¿¿ 
)
¿¿  
{
¡¡ 
throw
¬¬ 
new
¬¬ 
	Exception
¬¬ #
(
¬¬# $
$"
¬¬$ &
$str
¬¬& S
{
¬¬S T
ex
¬¬T V
.
¬¬V W
Message
¬¬W ^
}
¬¬^ _
"
¬¬_ `
,
¬¬` a
ex
¬¬b d
)
¬¬d e
;
¬¬e f
}
√√ 
}
ƒƒ 	
public
∆∆ 
async
∆∆ 
Task
∆∆ 
<
∆∆ 
bool
∆∆ 
>
∆∆ !
UpdateScheduleAsync
∆∆  3
(
∆∆3 4
int
∆∆4 7

scheduleId
∆∆8 B
,
∆∆B C
int
∆∆D G
doctorId
∆∆H P
,
∆∆P Q
UpdateScheduleDto
∆∆R c
	updateDto
∆∆d m
)
∆∆m n
{
«« 	
try
»» 
{
…… 
var
   
schedule
   
=
   
await
   $
_doctorRepository
  % 6
.
  6 7-
GetScheduleByIdAndDoctorIdAsync
  7 V
(
  V W

scheduleId
  W a
,
  a b
doctorId
  c k
)
  k l
;
  l m
if
ÀÀ 
(
ÀÀ 
schedule
ÀÀ 
==
ÀÀ 
null
ÀÀ  $
)
ÀÀ$ %
throw
ÃÃ 
new
ÃÃ 
	Exception
ÃÃ '
(
ÃÃ' (
$str
ÃÃ( =
)
ÃÃ= >
;
ÃÃ> ?
schedule
ŒŒ 
.
ŒŒ 
	StartDate
ŒŒ "
=
ŒŒ# $
	updateDto
ŒŒ% .
.
ŒŒ. /
	StartDate
ŒŒ/ 8
;
ŒŒ8 9
schedule
œœ 
.
œœ 
EndDate
œœ  
=
œœ! "
	updateDto
œœ# ,
.
œœ, -
EndDate
œœ- 4
;
œœ4 5
schedule
–– 
.
–– 
Status
–– 
=
––  !
	updateDto
––" +
.
––+ ,
Status
––, 2
;
––2 3
await
““ 
_doctorRepository
““ '
.
““' (!
UpdateScheduleAsync
““( ;
(
““; <
schedule
““< D
)
““D E
;
““E F
return
”” 
true
”” 
;
”” 
}
‘‘ 
catch
’’ 
(
’’ 
	Exception
’’ 
ex
’’ 
)
’’  
{
÷÷ 
throw
◊◊ 
new
◊◊ 
	Exception
◊◊ #
(
◊◊# $
$"
◊◊$ &
$str
◊◊& U
{
◊◊U V
ex
◊◊V X
.
◊◊X Y
Message
◊◊Y `
}
◊◊` a
"
◊◊a b
,
◊◊b c
ex
◊◊d f
)
◊◊f g
;
◊◊g h
}
ÿÿ 
}
ŸŸ 	
public
⁄⁄ 
async
⁄⁄ 
Task
⁄⁄ 
<
⁄⁄ 
IEnumerable
⁄⁄ %
<
⁄⁄% &
ScheduleDto
⁄⁄& 1
>
⁄⁄1 2
>
⁄⁄2 3
GetSchedulesAsync
⁄⁄4 E
(
⁄⁄E F
int
⁄⁄F I
doctorId
⁄⁄J R
)
⁄⁄R S
{
€€ 	
try
‹‹ 
{
›› 
return
ﬁﬁ 
await
ﬁﬁ 
_doctorRepository
ﬁﬁ .
.
ﬁﬁ. /)
GetSchedulesByDoctorIdAsync
ﬁﬁ/ J
(
ﬁﬁJ K
doctorId
ﬁﬁK S
)
ﬁﬁS T
;
ﬁﬁT U
}
ﬂﬂ 
catch
‡‡ 
(
‡‡ 
	Exception
‡‡ 
ex
‡‡ 
)
‡‡  
{
·· 
throw
‚‚ 
new
‚‚ 
	Exception
‚‚ #
(
‚‚# $
$"
‚‚$ &
$str
‚‚& R
{
‚‚R S
ex
‚‚S U
.
‚‚U V
Message
‚‚V ]
}
‚‚] ^
"
‚‚^ _
,
‚‚_ `
ex
‚‚a c
)
‚‚c d
;
‚‚d e
}
„„ 
}
‰‰ 	
public
ÂÂ 
async
ÂÂ 
Task
ÂÂ 
<
ÂÂ 
bool
ÂÂ 
>
ÂÂ !
CancelScheduleAsync
ÂÂ  3
(
ÂÂ3 4
int
ÂÂ4 7

scheduleId
ÂÂ8 B
,
ÂÂB C
int
ÂÂD G
doctorId
ÂÂH P
)
ÂÂP Q
{
ÊÊ 	
try
ÁÁ 
{
ËË 
var
ÈÈ 
schedule
ÈÈ 
=
ÈÈ 
await
ÈÈ $
_doctorRepository
ÈÈ% 6
.
ÈÈ6 7-
GetScheduleByIdAndDoctorIdAsync
ÈÈ7 V
(
ÈÈV W

scheduleId
ÈÈW a
,
ÈÈa b
doctorId
ÈÈc k
)
ÈÈk l
;
ÈÈl m
if
ÍÍ 
(
ÍÍ 
schedule
ÍÍ 
==
ÍÍ 
null
ÍÍ  $
)
ÍÍ$ %
throw
ÎÎ 
new
ÎÎ 
	Exception
ÎÎ '
(
ÎÎ' (
$str
ÎÎ( =
)
ÎÎ= >
;
ÎÎ> ?
if
ÌÌ 
(
ÌÌ 
schedule
ÌÌ 
.
ÌÌ 
Status
ÌÌ #
==
ÌÌ$ &
$str
ÌÌ' 2
)
ÌÌ2 3
throw
ÓÓ 
new
ÓÓ 
	Exception
ÓÓ '
(
ÓÓ' (
$str
ÓÓ( M
)
ÓÓM N
;
ÓÓN O
schedule
 
.
 
Status
 
=
  !
$str
" -
;
- .
await
ÒÒ 
_doctorRepository
ÒÒ '
.
ÒÒ' (!
UpdateScheduleAsync
ÒÒ( ;
(
ÒÒ; <
schedule
ÒÒ< D
)
ÒÒD E
;
ÒÒE F
return
ÚÚ 
true
ÚÚ 
;
ÚÚ 
}
ÛÛ 
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ 
ex
ÙÙ 
)
ÙÙ  
{
ıı 
throw
ˆˆ 
new
ˆˆ 
	Exception
ˆˆ #
(
ˆˆ# $
$"
ˆˆ$ &
$str
ˆˆ& V
{
ˆˆV W
ex
ˆˆW Y
.
ˆˆY Z
Message
ˆˆZ a
}
ˆˆa b
"
ˆˆb c
,
ˆˆc d
ex
ˆˆe g
)
ˆˆg h
;
ˆˆh i
}
˜˜ 
}
¯¯ 	
public
˘˘ 
async
˘˘ 
Task
˘˘ 
<
˘˘ 
bool
˘˘ 
>
˘˘ #
CompleteScheduleAsync
˘˘  5
(
˘˘5 6
int
˘˘6 9

scheduleId
˘˘: D
,
˘˘D E
int
˘˘F I
doctorId
˘˘J R
)
˘˘R S
{
˙˙ 	
try
˚˚ 
{
¸¸ 
var
˝˝ 
schedule
˝˝ 
=
˝˝ 
await
˝˝ $
_doctorRepository
˝˝% 6
.
˝˝6 7-
GetScheduleByIdAndDoctorIdAsync
˝˝7 V
(
˝˝V W

scheduleId
˝˝W a
,
˝˝a b
doctorId
˝˝c k
)
˝˝k l
;
˝˝l m
if
˛˛ 
(
˛˛ 
schedule
˛˛ 
==
˛˛ 
null
˛˛  $
)
˛˛$ %
throw
ˇˇ 
new
ˇˇ 
	Exception
ˇˇ '
(
ˇˇ' (
$str
ˇˇ( =
)
ˇˇ= >
;
ˇˇ> ?
if
ÅÅ 
(
ÅÅ 
schedule
ÅÅ 
.
ÅÅ 
Status
ÅÅ #
==
ÅÅ$ &
$str
ÅÅ' 2
)
ÅÅ2 3
throw
ÇÇ 
new
ÇÇ 
	Exception
ÇÇ '
(
ÇÇ' (
$str
ÇÇ( O
)
ÇÇO P
;
ÇÇP Q
schedule
ÑÑ 
.
ÑÑ 
Status
ÑÑ 
=
ÑÑ  !
$str
ÑÑ" -
;
ÑÑ- .
await
ÖÖ 
_doctorRepository
ÖÖ '
.
ÖÖ' (!
UpdateScheduleAsync
ÖÖ( ;
(
ÖÖ; <
schedule
ÖÖ< D
)
ÖÖD E
;
ÖÖE F
return
ÜÜ 
true
ÜÜ 
;
ÜÜ 
}
áá 
catch
àà 
(
àà 
	Exception
àà 
ex
àà 
)
àà  
{
ââ 
throw
ää 
new
ää 
	Exception
ää #
(
ää# $
$"
ää$ &
$str
ää& W
{
ääW X
ex
ääX Z
.
ääZ [
Message
ää[ b
}
ääb c
"
ääc d
,
ääd e
ex
ääf h
)
ääh i
;
ääi j
}
ãã 
}
åå 	
public
êê 
async
êê 
Task
êê 
<
êê 
(
êê 
bool
êê 
Success
êê  '
,
êê' (
string
êê) /
Message
êê0 7
)
êê7 8
>
êê8 9(
RescheduleAppointmentAsync
êê: T
(
êêT U
int
êêU X
doctorId
êêY a
,
êêa b
int
êêc f
appointmentId
êêg t
,
êêt u'
AppointmentRescheduleDtoêêv é
rescheduleDtoêêè ú
)êêú ù
{
ëë 	
try
íí 
{
ìì 
var
îî 
appointment
îî 
=
îî  !
await
îî" '
_doctorRepository
îî( 9
.
îî9 :0
"GetAppointmentByIdAndDoctorIdAsync
îî: \
(
îî\ ]
appointmentId
îî] j
,
îîj k
doctorId
îîl t
)
îît u
;
îîu v
if
ïï 
(
ïï 
appointment
ïï 
==
ïï  "
null
ïï# '
)
ïï' (
return
ññ 
(
ññ 
false
ññ !
,
ññ! "
$str
ññ# R
)
ññR S
;
ññS T
if
òò 
(
òò 
rescheduleDto
òò !
.
òò! " 
NewAppointmentDate
òò" 4
<=
òò5 7
DateTime
òò8 @
.
òò@ A
Now
òòA D
)
òòD E
return
ôô 
(
ôô 
false
ôô !
,
ôô! "
$str
ôô# ]
)
ôô] ^
;
ôô^ _
bool
õõ 
isOnSchedule
õõ !
=
õõ" #
await
õõ$ )
_doctorRepository
õõ* ;
.
õõ; <
IsOnScheduleAsync
õõ< M
(
õõM N
doctorId
õõN V
,
õõV W
rescheduleDto
õõX e
.
õõe f 
NewAppointmentDate
õõf x
)
õõx y
;
õõy z
if
úú 
(
úú 
!
úú 
isOnSchedule
úú !
)
úú! "
return
ùù 
(
ùù 
false
ùù !
,
ùù! "
$str
ùù# c
)
ùùc d
;
ùùd e
appointment
üü 
.
üü 
AppointmentDate
üü +
=
üü, -
rescheduleDto
üü. ;
.
üü; < 
NewAppointmentDate
üü< N
;
üüN O
await
†† 
_doctorRepository
†† '
.
††' ($
UpdateAppointmentAsync
††( >
(
††> ?
appointment
††? J
)
††J K
;
††K L
return
°° 
(
°° 
true
°° 
,
°° 
$str
°° E
)
°°E F
;
°°F G
}
¢¢ 
catch
££ 
(
££ 
	Exception
££ 
ex
££ 
)
££  
{
§§ 
throw
•• 
new
•• 
	Exception
•• #
(
••# $
$"
••$ &
$str
••& \
{
••\ ]
ex
••] _
.
••_ `
Message
••` g
}
••g h
"
••h i
,
••i j
ex
••k m
)
••m n
;
••n o
}
¶¶ 
}
ßß 	
public
©© 
async
©© 
Task
©© 
<
©© 
IEnumerable
©© %
<
©©% &%
DoctorBillingDetailsDto
©©& =
>
©©= >
>
©©> ?%
GetBillsByDoctorIdAsync
©©@ W
(
©©W X
int
©©X [
doctorId
©©\ d
)
©©d e
{
™™ 	
try
´´ 
{
¨¨ 
var
≠≠ 
bills
≠≠ 
=
≠≠ 
await
≠≠ !
_doctorRepository
≠≠" 3
.
≠≠3 4%
GetBillsByDoctorIdAsync
≠≠4 K
(
≠≠K L
doctorId
≠≠L T
)
≠≠T U
;
≠≠U V
if
ÆÆ 
(
ÆÆ 
bills
ÆÆ 
==
ÆÆ 
null
ÆÆ !
||
ÆÆ" $
!
ÆÆ% &
bills
ÆÆ& +
.
ÆÆ+ ,
Any
ÆÆ, /
(
ÆÆ/ 0
)
ÆÆ0 1
)
ÆÆ1 2
throw
ØØ 
new
ØØ 
	Exception
ØØ '
(
ØØ' (
$str
ØØ( H
)
ØØH I
;
ØØI J
return
±± 
bills
±± 
.
±± 
Select
±± #
(
±±# $
b
±±$ %
=>
±±& (
new
±±) ,%
DoctorBillingDetailsDto
±±- D
{
≤≤ 
	BillingID
≥≥ 
=
≥≥ 
b
≥≥  !
.
≥≥! "
	BillingID
≥≥" +
,
≥≥+ ,
DoctorID
¥¥ 
=
¥¥ 
b
¥¥  
.
¥¥  !
DoctorID
¥¥! )
,
¥¥) *

DoctorName
µµ 
=
µµ  
b
µµ! "
.
µµ" #
Doctor
µµ# )
.
µµ) *
FullName
µµ* 2
,
µµ2 3
	PatientID
∂∂ 
=
∂∂ 
b
∂∂  !
.
∂∂! "
	PatientID
∂∂" +
,
∂∂+ ,
PatientName
∑∑ 
=
∑∑  !
b
∑∑" #
.
∑∑# $
Patient
∑∑$ +
.
∑∑+ ,
FullName
∑∑, 4
,
∑∑4 5
ConsultationFee
∏∏ #
=
∏∏$ %
b
∏∏& '
.
∏∏' (
ConsultationFee
∏∏( 7
,
∏∏7 8
TotalTestsPrice
ππ #
=
ππ$ %
b
ππ& '
.
ππ' (
TotalTestsPrice
ππ( 7
,
ππ7 8#
TotalMedicationsPrice
∫∫ )
=
∫∫* +
b
∫∫, -
.
∫∫- .#
TotalMedicationsPrice
∫∫. C
,
∫∫C D

GrandTotal
ªª 
=
ªª  
b
ªª! "
.
ªª" #

GrandTotal
ªª# -
,
ªª- .
Status
ºº 
=
ºº 
b
ºº 
.
ºº 
Status
ºº %
}
ΩΩ 
)
ΩΩ 
.
ΩΩ 
ToList
ΩΩ 
(
ΩΩ 
)
ΩΩ 
;
ΩΩ 
}
ææ 
catch
øø 
(
øø 
	Exception
øø 
ex
øø 
)
øø  
{
¿¿ 
throw
¡¡ 
new
¡¡ 
	Exception
¡¡ #
(
¡¡# $
$"
¡¡$ &
$str
¡¡& N
{
¡¡N O
ex
¡¡O Q
.
¡¡Q R
Message
¡¡R Y
}
¡¡Y Z
"
¡¡Z [
,
¡¡[ \
ex
¡¡] _
)
¡¡_ `
;
¡¡` a
}
¬¬ 
}
√√ 	
}
∆∆ 
}«« ©2
gC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Services\Interface\IAdminService.cs
	namespace 	
AmazeCareAPI
 
. 
Services 
.  
	Interface  )
{ 
public 

	interface 
IAdminService "
{ 
Task 
< 
( 
bool 
IsAvailable 
, 
string  &
Message' .
). /
>/ 0*
CheckUsernameAvailabilityAsync1 O
(O P
stringP V
usernameW _
)_ `
;` a
Task		 
<		 
Administrator		 
>		 
RegisterAdmin		 )
(		) *
string		* 0
username		1 9
,		9 :
string		; A
password		B J
,		J K
string		L R
fullName		S [
,		[ \
string		] c
email		d i
)		i j
;		j k
Task

 
<

 
Doctor

 
>

 
RegisterDoctor

 #
(

# $!
DoctorRegistrationDto

$ 9
	doctorDto

: C
)

C D
;

D E
Task 
< 
bool 
> 
UpdateDoctorDetails &
(& '
int' *
doctorId+ 3
,3 4
DoctorUpdateDto5 D
	doctorDtoE N
)N O
;O P
Task 
< 
bool 
> 
DeleteDoctor 
(  
int  #
userId$ *
,* +
int, /
doctorId0 8
)8 9
;9 :
Task 
< 
Patient 
> 
UpdatePatient #
(# $

PatientDto$ .

patientDto/ 9
)9 :
;: ;
Task 
< 
Doctor 
> 
GetDoctorDetails %
(% &
int& )
doctorId* 2
)2 3
;3 4
Task 
< 
Patient 
> 
GetPatientDetails '
(' (
int( +
	patientId, 5
)5 6
;6 7
Task 
< 
bool 
> 
DeletePatient  
(  !
int! $
userId% +
,+ ,
int- 0
	patientId1 :
): ;
;; <
Task 
< 
Appointment 
> !
RescheduleAppointment /
(/ 0
int0 3
appointmentId4 A
,A B$
AppointmentRescheduleDtoC [
rescheduleDto\ i
)i j
;j k
Task 
< 
Appointment 
> "
ViewAppointmentDetails 0
(0 1
int1 4
appointmentId5 B
)B C
;C D
Task 
< 
bool 
> 
UpdateSchedule !
(! "
int" %
doctorId& .
,. /
int0 3

scheduleId4 >
,> ?
DateTime@ H
newStartDateI U
,U V
DateTimeW _

newEndDate` j
)j k
;k l
Task 
< 
string 
> 
CancelSchedule #
(# $
int$ '
doctorId( 0
,0 1
int2 5

scheduleId6 @
)@ A
;A B
Task 
< 
IEnumerable 
< 
SpecializationDto *
>* +
>+ ,&
GetAllSpecializationsAsync- G
(G H
)H I
;I J
Task 
< 
IEnumerable 
< !
ScheduleWithDoctorDto .
>. /
>/ 0+
GetSchedulesWithDoctorNameAsync1 P
(P Q
intQ T
doctorIdU ]
)] ^
;^ _
Task 
< 
bool 
> (
MarkScheduleAsCompletedAsync /
(/ 0
int0 3

scheduleId4 >
)> ?
;? @
Task 
< 
bool 
> &
CancelScheduleByAdminAsync -
(- .
int. 1

scheduleId2 <
)< =
;= >
Task 
< 
bool 
> &
UpdateScheduleByAdminAsync -
(- .
int. 1

scheduleId2 <
,< =
UpdateScheduleDto> O
	updateDtoP Y
)Y Z
;Z [
Task 
< 
IEnumerable 
< 
BillingDetailsDto *
>* +
>+ ,+
GetBillingDetailsWithNamesAsync- L
(L M
)M N
;N O
Task 
< 
bool 
> 
MarkBillAsPaidAsync &
(& '
int' *
	billingId+ 4
)4 5
;5 6
Task 
< 
bool 
> !
UpdateMedicationAsync (
(( )
int) ,
medicationId- 9
,9 :%
CreateUpdateMedicationDto; T
updateMedicationDtoU h
)h i
;i j
Task   
<   
bool   
>   
AddMedicationAsync   %
(  % &%
CreateUpdateMedicationDto  & ?
createMedicationDto  @ S
)  S T
;  T U
Task!! 
<!! 
IEnumerable!! 
<!! 
MedicationDto!! &
>!!& '
>!!' ("
GetAllMedicationsAsync!!) ?
(!!? @
)!!@ A
;!!A B
Task"" 
<"" 
bool"" 
>"" 
UpdateTestAsync"" "
(""" #
int""# &
testId""' -
,""- .
CreateUpdateTestDto""/ B
updateTestDto""C P
)""P Q
;""Q R
Task$$ 
<$$ 
bool$$ 
>$$ 
AddTestAsync$$ 
($$  
CreateUpdateTestDto$$  3
createTestDto$$4 A
)$$A B
;$$B C
Task%% 
<%% 
IEnumerable%% 
<%% 
TestDto%%  
>%%  !
>%%! "
GetAllTestsAsync%%# 3
(%%3 4
)%%4 5
;%%5 6
})) 
}** ˇ&
hC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Services\Interface\IDoctorService.cs
	namespace 	
AmazeCareAPI
 
. 
Services 
.  
	Interface  )
{ 
public 

	interface 
IDoctorService #
{ 
Task		 
<		 
int		 
?		 
>		 
GetDoctorIdAsync		 #
(		# $
int		$ '
userId		( .
)		. /
;		/ 0
Task

 
<

 
List

 
<

 %
AppointmentWithPatientDto

 +
>

+ ,
>

, -#
GetAppointmentsByStatus

. E
(

E F
int

F I
doctorId

J R
,

R S
string

T Z
status

[ a
)

a b
;

b c
Task 
< 
bool 
> %
ApproveAppointmentRequest ,
(, -
int- 0
doctorId1 9
,9 :
int; >
appointmentId? L
)L M
;M N
Task 
< 
bool 
> &
CancelScheduledAppointment -
(- .
int. 1
doctorId2 :
,: ;
int< ?
appointmentId@ M
)M N
;N O
Task 
< 
bool 
> 
UpdateMedicalRecord &
(& '
int' *
doctorId+ 3
,3 4
int5 8
recordId9 A
,A B
intC F
	patientIdG P
,P Q"
UpdateMedicalRecordDtoR h
	updateDtoi r
)r s
;s t
Task 
< 
List 
< #
PatientMedicalRecordDto )
>) *
>* +-
!GetMedicalRecordsByPatientIdAsync, M
(M N
intN Q
	patientIdR [
)[ \
;\ ]
Task 
< 
bool 
> 
ConductConsultation &
(& '
int' *
doctorId+ 3
,3 4
int5 8
appointmentId9 F
,F G"
CreateMedicalRecordDtoH ^
	recordDto_ h
,h i
decimalj q
consultationFee	r Å
)
Å Ç
;
Ç É
Task 
< 
bool 
> $
UpdateBillingStatusAsync +
(+ ,
int, /
	billingId0 9
,9 :
int; >
doctorId? G
)G H
;H I
Task 
< 
List 
< 
TestDto 
> 
> 
GetTestsAsync )
() *
)* +
;+ ,
Task 
< 
List 
< 
MedicationDto 
>  
>  !
GetMedicationsAsync" 5
(5 6
)6 7
;7 8
Task 
< 
bool 
> 
AddScheduleAsync #
(# $
int$ '
doctorId( 0
,0 1
CreateScheduleDto2 C
scheduleDtoD O
)O P
;P Q
Task 
< 
bool 
> 
UpdateScheduleAsync &
(& '
int' *

scheduleId+ 5
,5 6
int7 :
doctorId; C
,C D
UpdateScheduleDtoE V
	updateDtoW `
)` a
;a b
Task 
< 
IEnumerable 
< 
ScheduleDto $
>$ %
>% &
GetSchedulesAsync' 8
(8 9
int9 <
doctorId= E
)E F
;F G
Task 
< 
bool 
> 
CancelScheduleAsync &
(& '
int' *

scheduleId+ 5
,5 6
int7 :
doctorId; C
)C D
;D E
Task 
< 
bool 
> !
CompleteScheduleAsync (
(( )
int) ,

scheduleId- 7
,7 8
int9 <
doctorId= E
)E F
;F G
Task 
< 
( 
bool 
Success 
, 
string "
Message# *
)* +
>+ ,&
RescheduleAppointmentAsync- G
(G H
intH K
doctorIdL T
,T U
intV Y
appointmentIdZ g
,g h%
AppointmentRescheduleDto	i Å
rescheduleDto
Ç è
)
è ê
;
ê ë
Task 
< 
IEnumerable 
< #
DoctorBillingDetailsDto 0
>0 1
>1 2#
GetBillsByDoctorIdAsync3 J
(J K
intK N
doctorIdO W
)W X
;X Y
} 
} Î!
iC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Services\Interface\IPatientService.cs
	namespace 	
AmazeCareAPI
 
. 
Services 
.  
	Interface  )
{ 
public 

	interface 
IPatientService $
{ 
Task

 
<

 
(

 
Appointment

 
appointment

 %
,

% &
string

' -
message

. 5
)

5 6
>

6 7
ScheduleAppointment

8 K
(

K L
int

L O
userId

P V
,

V W!
AppointmentBookingDto

X m

bookingDto

n x
)

x y
;

y z
Task 
< 
List 
< #
PatientMedicalRecordDto )
>) *
>* +
GetMedicalHistory, =
(= >
int> A
userIdB H
)H I
;I J
Task 
< 
IEnumerable 
< 
	DoctorDto "
>" #
># $
SearchDoctors% 2
(2 3
string3 9
specialization: H
=I J
nullK O
)O P
;P Q
Task 
< 
IEnumerable 
< $
AppointmentWithDoctorDto 1
>1 2
>2 3
GetAppointments4 C
(C D
intD G
userIdH N
)N O
;O P
Task 
< 
bool 
> 
CancelAppointment $
($ %
int% (
userId) /
,/ 0
int1 4
appointmentId5 B
)B C
;C D
Task 
< 
List 
<  
PatientTestDetailDto &
>& '
>' (
GetTestDetails) 7
(7 8
int8 ;
userId< B
)B C
;C D
Task 
< 
List 
< (
PatientPrescriptionDetailDto .
>. /
>/ 0"
GetPrescriptionDetails1 G
(G H
intH K
userIdL R
)R S
;S T
Task 
< 
List 
< 

BillingDto 
> 
> 
GetBillingDetails 0
(0 1
int1 4
userId5 ;
); <
;< =
Task 
< 
( 
Appointment 
? 
appointment &
,& '
string( .
message/ 6
)6 7
>7 8!
RescheduleAppointment9 N
(N O
intO R
userIdS Y
,Y Z
int[ ^
appointmentId_ l
,l m%
AppointmentRescheduleDto	n Ü
rescheduleDto
á î
)
î ï
;
ï ñ
Task 
< 
( 
bool 
IsAvailable 
, 
string  &
Message' .
). /
>/ 0*
CheckUsernameAvailabilityAsync1 O
(O P
stringP V
usernameW _
)_ `
;` a
Task 
< "
PatientPersonalInfoDto #
?# $
>$ % 
GetPersonalInfoAsync& :
(: ;
int; >
userId? E
)E F
;F G
Task 
< 
( 
bool 
	IsSuccess 
, 
string $
Message% ,
), -
>- .#
UpdatePersonalInfoAsync/ F
(F G
intG J
userIdK Q
,Q R!
UpdatePersonalInfoDtoS h
	updateDtoi r
)r s
;s t
Task 
< 
List 
< 
ScheduleDto 
> 
> "
GetDoctorScheduleAsync  6
(6 7
int7 :
doctorId; C
)C D
;D E
Task 
< 
IEnumerable 
< $
PatientBillingDetailsDto 1
>1 2
>2 3$
GetBillsByPatientIdAsync4 L
(L M
intM P
	patientIdQ Z
)Z [
;[ \
} 
} ﬂ	
fC:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Services\Interface\IUserService.cs
	namespace 	
AmazeCareAPI
 
. 
Services 
.  
	Interface  )
{ 
public 

	interface 
IUserService !
{		 
Task

 
<

 
(

 
bool

 
IsAvailable

 
,

 
string

  &
Message

' .
)

. /
>

/ 0*
CheckUsernameAvailabilityAsync

1 O
(

O P
string

P V
username

W _
)

_ `
;

` a
Task 
< 
Patient 
> 
RegisterPatient %
(% &
User& *
user+ /
,/ 0
string1 7
fullName8 @
,@ A
stringB H
emailI N
,N O
DateTimeP X
dateOfBirthY d
,d e
string 
gender 
, 
string !
contactNumber" /
,/ 0
string1 7
address8 ?
,? @
stringA G
medicalHistoryH V
)V W
;W X
} 
} ˚Ì
^C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Services\PatientService.cs
	namespace 	
AmazeCareAPI
 
. 
Services 
{ 
public 

class 
PatientService 
:  !
IPatientService" 1
{ 
private 
readonly 
IPatientRepository +
_patientRepository, >
;> ?
public 
PatientService 
( 
IPatientRepository 0
patientRepository1 B
)B C
{ 	
_patientRepository 
=  
patientRepository! 2
;2 3
} 	
public 
async 
Task 
< 
( 
bool 
IsAvailable  +
,+ ,
string- 3
Message4 ;
); <
>< =*
CheckUsernameAvailabilityAsync> \
(\ ]
string] c
usernamed l
)l m
{ 	
try 
{ 
bool 
isAvailable  
=! "
await# (
_patientRepository) ;
.; <$
IsUsernameAvailableAsync< T
(T U
usernameU ]
)] ^
;^ _
string 
message 
=  
isAvailable! ,
? 
$str .
: 
$str V
;V W
return 
( 
isAvailable #
,# $
message% ,
), -
;- .
} 
catch   
(   
	Exception   
ex   
)    
{!! 
throw"" 
new"" 
ServiceException"" *
(""* +
$str""+ d
,""d e
ex""f h
)""h i
;""i j
}## 
}$$ 	
public%% 
async%% 
Task%% 
<%% "
PatientPersonalInfoDto%% 0
?%%0 1
>%%1 2 
GetPersonalInfoAsync%%3 G
(%%G H
int%%H K
userId%%L R
)%%R S
{&& 	
try'' 
{(( 
var)) 
user)) 
=)) 
await))  
_patientRepository))! 3
.))3 4
GetUserByIdAsync))4 D
())D E
userId))E K
)))K L
??** 
throw** $
new**% (!
UserNotFoundException**) >
(**> ?
$"**? A
$str**A N
{**N O
userId**O U
}**U V
$str**V a
"**a b
)**b c
;**c d
var++ 
patient++ 
=++ 
await++ #
_patientRepository++$ 6
.++6 7#
GetPatientByUserIdAsync++7 N
(++N O
userId++O U
)++U V
??,, 
throw,,  %
new,,& )$
PatientNotFoundException,,* B
(,,B C
$",,C E
$str,,E `
{,,` a
userId,,a g
},,g h
$str,,h s
",,s t
),,t u
;,,u v
return.. 
new.. "
PatientPersonalInfoDto.. 1
{// 
UserId00 
=00 
user00 !
.00! "
UserID00" (
,00( )
Username11 
=11 
user11 #
.11# $
Username11$ ,
,11, -
FullName22 
=22 
patient22 &
.22& '
FullName22' /
,22/ 0
Email33 
=33 
patient33 #
.33# $
Email33$ )
,33) *
DateOfBirth44 
=44  !
patient44" )
.44) *
DateOfBirth44* 5
,445 6
Gender55 
=55 
patient55 $
.55$ %
Gender55% +
,55+ ,
ContactNumber66 !
=66" #
patient66$ +
.66+ ,
ContactNumber66, 9
,669 :
Address77 
=77 
patient77 %
.77% &
Address77& -
,77- .
MedicalHistory88 "
=88# $
patient88% ,
.88, -
MedicalHistory88- ;
}99 
;99 
}:: 
catch;; 
(;; 
	Exception;; 
ex;; 
);;  
{<< 
throw== 
new== 
ServiceException== *
(==* +
$str==+ e
,==e f
ex==g i
)==i j
;==j k
}>> 
}?? 	
public@@ 
async@@ 
Task@@ 
<@@ 
(@@ 
bool@@ 
	IsSuccess@@  )
,@@) *
string@@+ 1
Message@@2 9
)@@9 :
>@@: ;#
UpdatePersonalInfoAsync@@< S
(@@S T
int@@T W
userId@@X ^
,@@^ _!
UpdatePersonalInfoDto@@` u
	updateDto@@v 
)	@@ Ä
{AA 	
tryBB 
{CC 
varDD 
userDD 
=DD 
awaitDD  
_patientRepositoryDD! 3
.DD3 4
GetUserByIdAsyncDD4 D
(DDD E
userIdDDE K
)DDK L
??EE 
throwEE $
newEE% (!
UserNotFoundExceptionEE) >
(EE> ?
$strEE? P
)EEP Q
;EEQ R
ifGG 
(GG 
!GG 
stringGG 
.GG 
EqualsGG "
(GG" #
userGG# '
.GG' (
UsernameGG( 0
,GG0 1
	updateDtoGG2 ;
.GG; <
UsernameGG< D
,GGD E
StringComparisonGGF V
.GGV W
OrdinalIgnoreCaseGGW h
)GGh i
)GGi j
{HH 
varII 
(II 
isAvailableII $
,II$ %
messageII& -
)II- .
=II/ 0
awaitII1 6*
CheckUsernameAvailabilityAsyncII7 U
(IIU V
	updateDtoIIV _
.II_ `
UsernameII` h
)IIh i
;IIi j
ifJJ 
(JJ 
!JJ 
isAvailableJJ $
)JJ$ %
returnJJ& ,
(JJ- .
falseJJ. 3
,JJ3 4
messageJJ5 <
)JJ< =
;JJ= >
}KK 
userMM 
.MM 
UsernameMM 
=MM 
	updateDtoMM  )
.MM) *
UsernameMM* 2
;MM2 3
ifOO 
(OO 
!OO 
stringOO 
.OO 
IsNullOrWhiteSpaceOO .
(OO. /
	updateDtoOO/ 8
.OO8 9
NewPasswordOO9 D
)OOD E
)OOE F
{PP 
userQQ 
.QQ 
PasswordHashQQ %
=QQ& '
BCryptQQ( .
.QQ. /
NetQQ/ 2
.QQ2 3
BCryptQQ3 9
.QQ9 :
HashPasswordQQ: F
(QQF G
	updateDtoQQG P
.QQP Q
NewPasswordQQQ \
)QQ\ ]
;QQ] ^
}RR 
awaitTT 
_patientRepositoryTT (
.TT( )
UpdateUserAsyncTT) 8
(TT8 9
userTT9 =
)TT= >
;TT> ?
varVV 
patientVV 
=VV 
awaitVV #
_patientRepositoryVV$ 6
.VV6 7#
GetPatientByUserIdAsyncVV7 N
(VVN O
userIdVVO U
)VVU V
??WW 
throwWW  %
newWW& )$
PatientNotFoundExceptionWW* B
(WWB C
$strWWC ^
)WW^ _
;WW_ `
patientYY 
.YY 
FullNameYY  
=YY! "
	updateDtoYY# ,
.YY, -
FullNameYY- 5
;YY5 6
patientZZ 
.ZZ 
EmailZZ 
=ZZ 
	updateDtoZZ  )
.ZZ) *
EmailZZ* /
;ZZ/ 0
patient[[ 
.[[ 
ContactNumber[[ %
=[[& '
	updateDto[[( 1
.[[1 2
ContactNumber[[2 ?
;[[? @
patient\\ 
.\\ 
Address\\ 
=\\  !
	updateDto\\" +
.\\+ ,
Address\\, 3
;\\3 4
patient]] 
.]] 
MedicalHistory]] &
=]]' (
	updateDto]]) 2
.]]2 3
MedicalHistory]]3 A
;]]A B
patient^^ 
.^^ 
DateOfBirth^^ #
=^^$ %
	updateDto^^& /
.^^/ 0
DateOfBirth^^0 ;
;^^; <
patient__ 
.__ 
Gender__ 
=__  
	updateDto__! *
.__* +
Gender__+ 1
;__1 2
awaitaa 
_patientRepositoryaa (
.aa( )
UpdatePatientAsyncaa) ;
(aa; <
patientaa< C
)aaC D
;aaD E
awaitbb 
_patientRepositorybb (
.bb( )
SaveChangesAsyncbb) 9
(bb9 :
)bb: ;
;bb; <
returndd 
(dd 
truedd 
,dd 
$strdd J
)ddJ K
;ddK L
}ee 
catchff 
(ff 
	Exceptionff 
exff 
)ff  
{gg 
throwhh 
newhh 
ServiceExceptionhh *
(hh* +
$strhh+ c
,hhc d
exhhe g
)hhg h
;hhh i
}ii 
}jj 	
publicmm 
asyncmm 
Taskmm 
<mm 
(mm 
Appointmentmm &
appointmentmm' 2
,mm2 3
stringmm4 :
messagemm; B
)mmB C
>mmC D
ScheduleAppointmentmmE X
(mmX Y
intmmY \
userIdmm] c
,mmc d!
AppointmentBookingDtomme z

bookingDto	mm{ Ö
)
mmÖ Ü
{nn 	
tryoo 
{pp 
varqq 
patientqq 
=qq 
awaitqq #
_patientRepositoryqq$ 6
.qq6 7#
GetPatientByUserIdAsyncqq7 N
(qqN O
userIdqqO U
)qqU V
??rr 
throwrr  %
newrr& )$
PatientNotFoundExceptionrr* B
(rrB C
$strrrC W
)rrW X
;rrX Y
booltt 
isOnSchedulett !
=tt" #
awaittt$ )
_patientRepositorytt* <
.tt< =
IsDoctorOnSchedulett= O
(ttO P

bookingDtottP Z
.ttZ [
DoctorIDtt[ c
,ttc d

bookingDtotte o
.tto p
AppointmentDatettp 
)	tt Ä
;
ttÄ Å
ifuu 
(uu 
!uu 
isOnScheduleuu !
)uu! "
throwvv 
newvv %
InvalidOperationExceptionvv 7
(vv7 8
$strvv8 y
)vvy z
;vvz {
varxx 
appointmentxx 
=xx  !
newxx" %
Appointmentxx& 1
{yy 
	PatientIDzz 
=zz 
patientzz  '
.zz' (
	PatientIDzz( 1
,zz1 2
DoctorID{{ 
={{ 

bookingDto{{ )
.{{) *
DoctorID{{* 2
,{{2 3
AppointmentDate|| #
=||$ %

bookingDto||& 0
.||0 1
AppointmentDate||1 @
,||@ A
Symptoms}} 
=}} 

bookingDto}} )
.}}) *
Symptoms}}* 2
,}}2 3
Status~~ 
=~~ 
$str~~ (
} 
; 
await
ÅÅ  
_patientRepository
ÅÅ (
.
ÅÅ( )!
AddAppointmentAsync
ÅÅ) <
(
ÅÅ< =
appointment
ÅÅ= H
)
ÅÅH I
;
ÅÅI J
await
ÇÇ  
_patientRepository
ÇÇ (
.
ÇÇ( )
SaveChangesAsync
ÇÇ) 9
(
ÇÇ9 :
)
ÇÇ: ;
;
ÇÇ; <
return
ÑÑ 
(
ÑÑ 
appointment
ÑÑ #
,
ÑÑ# $
$str
ÑÑ% J
)
ÑÑJ K
;
ÑÑK L
}
ÖÖ 
catch
ÜÜ 
(
ÜÜ 
	Exception
ÜÜ 
ex
ÜÜ 
)
ÜÜ  
{
áá 
throw
àà 
new
àà 
ServiceException
àà *
(
àà* +
$str
àà+ _
,
àà_ `
ex
ààa c
)
ààc d
;
ààd e
}
ââ 
}
ää 	
public
çç 
async
çç 
Task
çç 
<
çç 
List
çç 
<
çç %
PatientMedicalRecordDto
çç 6
>
çç6 7
>
çç7 8
GetMedicalHistory
çç9 J
(
ççJ K
int
ççK N
userId
ççO U
)
ççU V
{
éé 	
try
èè 
{
êê 
var
ëë 
patient
ëë 
=
ëë 
await
ëë # 
_patientRepository
ëë$ 6
.
ëë6 7%
GetPatientByUserIdAsync
ëë7 N
(
ëëN O
userId
ëëO U
)
ëëU V
??
íí 
throw
íí  %
new
íí& )&
PatientNotFoundException
íí* B
(
ííB C
$str
ííC W
)
ííW X
;
ííX Y
return
îî 
await
îî  
_patientRepository
îî /
.
îî/ 0$
GetMedicalHistoryAsync
îî0 F
(
îîF G
patient
îîG N
.
îîN O
	PatientID
îîO X
)
îîX Y
;
îîY Z
}
ïï 
catch
ññ 
(
ññ 
	Exception
ññ 
ex
ññ 
)
ññ  
{
óó 
throw
òò 
new
òò 
ServiceException
òò *
(
òò* +
$str
òò+ `
,
òò` a
ex
òòb d
)
òòd e
;
òòe f
}
ôô 
}
öö 	
public
úú 
async
úú 
Task
úú 
<
úú 
IEnumerable
úú %
<
úú% &
	DoctorDto
úú& /
>
úú/ 0
>
úú0 1
SearchDoctors
úú2 ?
(
úú? @
string
úú@ F
specialization
úúG U
=
úúV W
null
úúX \
)
úú\ ]
{
ùù 	
try
ûû 
{
üü 
return
†† 
await
††  
_patientRepository
†† /
.
††/ 0 
SearchDoctorsAsync
††0 B
(
††B C
specialization
††C Q
)
††Q R
;
††R S
}
°° 
catch
¢¢ 
(
¢¢ 
	Exception
¢¢ 
ex
¢¢ 
)
¢¢  
{
££ 
throw
§§ 
new
§§ 
ServiceException
§§ *
(
§§* +
$str
§§+ [
,
§§[ \
ex
§§] _
)
§§_ `
;
§§` a
}
•• 
}
¶¶ 	
public
®® 
async
®® 
Task
®® 
<
®® 
IEnumerable
®® %
<
®®% &&
AppointmentWithDoctorDto
®®& >
>
®®> ?
>
®®? @
GetAppointments
®®A P
(
®®P Q
int
®®Q T
userId
®®U [
)
®®[ \
{
©© 	
try
™™ 
{
´´ 
var
¨¨ 
patient
¨¨ 
=
¨¨ 
await
¨¨ # 
_patientRepository
¨¨$ 6
.
¨¨6 7%
GetPatientByUserIdAsync
¨¨7 N
(
¨¨N O
userId
¨¨O U
)
¨¨U V
??
≠≠ 
throw
≠≠  %
new
≠≠& )&
PatientNotFoundException
≠≠* B
(
≠≠B C
$str
≠≠C W
)
≠≠W X
;
≠≠X Y
return
ØØ 
await
ØØ  
_patientRepository
ØØ /
.
ØØ/ 0-
GetAppointmentsByPatientIdAsync
ØØ0 O
(
ØØO P
patient
ØØP W
.
ØØW X
	PatientID
ØØX a
)
ØØa b
;
ØØb c
}
∞∞ 
catch
±± 
(
±± 
	Exception
±± 
ex
±± 
)
±±  
{
≤≤ 
throw
≥≥ 
new
≥≥ 
ServiceException
≥≥ *
(
≥≥* +
$str
≥≥+ ]
,
≥≥] ^
ex
≥≥_ a
)
≥≥a b
;
≥≥b c
}
¥¥ 
}
µµ 	
public
∑∑ 
async
∑∑ 
Task
∑∑ 
<
∑∑ 
bool
∑∑ 
>
∑∑ 
CancelAppointment
∑∑  1
(
∑∑1 2
int
∑∑2 5
userId
∑∑6 <
,
∑∑< =
int
∑∑> A
appointmentId
∑∑B O
)
∑∑O P
{
∏∏ 	
try
ππ 
{
∫∫ 
var
ªª 
patient
ªª 
=
ªª 
await
ªª # 
_patientRepository
ªª$ 6
.
ªª6 7%
GetPatientByUserIdAsync
ªª7 N
(
ªªN O
userId
ªªO U
)
ªªU V
??
ºº 
throw
ºº  %
new
ºº& )&
PatientNotFoundException
ºº* B
(
ººB C
$str
ººC W
)
ººW X
;
ººX Y
var
ææ 
appointment
ææ 
=
ææ  !
await
ææ" ' 
_patientRepository
ææ( :
.
ææ: ;%
GetAppointmentByIdAsync
ææ; R
(
ææR S
patient
ææS Z
.
ææZ [
	PatientID
ææ[ d
,
ææd e
appointmentId
ææf s
)
ææs t
??
øø  "
throw
øø# (
new
øø) ,*
AppointmentNotFoundException
øø- I
(
øøI J
$str
øøJ v
)
øøv w
;
øøw x
if
¡¡ 
(
¡¡ 
appointment
¡¡ 
.
¡¡  
Status
¡¡  &
==
¡¡' )
$str
¡¡* 4
)
¡¡4 5
throw
¬¬ 
new
¬¬ '
InvalidOperationException
¬¬ 7
(
¬¬7 8
$str
¬¬8 Z
)
¬¬Z [
;
¬¬[ \
appointment
ƒƒ 
.
ƒƒ 
Status
ƒƒ "
=
ƒƒ# $
$str
ƒƒ% /
;
ƒƒ/ 0
await
≈≈  
_patientRepository
≈≈ (
.
≈≈( )$
UpdateAppointmentAsync
≈≈) ?
(
≈≈? @
appointment
≈≈@ K
)
≈≈K L
;
≈≈L M
await
∆∆  
_patientRepository
∆∆ (
.
∆∆( )
SaveChangesAsync
∆∆) 9
(
∆∆9 :
)
∆∆: ;
;
∆∆; <
return
»» 
true
»» 
;
»» 
}
…… 
catch
   
(
   
	Exception
   
ex
   
)
    
{
ÀÀ 
throw
ÃÃ 
new
ÃÃ 
ServiceException
ÃÃ *
(
ÃÃ* +
$str
ÃÃ+ _
,
ÃÃ_ `
ex
ÃÃa c
)
ÃÃc d
;
ÃÃd e
}
ÕÕ 
}
ŒŒ 	
public
—— 
async
—— 
Task
—— 
<
—— 
List
—— 
<
—— "
PatientTestDetailDto
—— 3
>
——3 4
>
——4 5
GetTestDetails
——6 D
(
——D E
int
——E H
userId
——I O
)
——O P
{
““ 	
try
”” 
{
‘‘ 
var
’’ 
	patientId
’’ 
=
’’ 
await
’’  % 
_patientRepository
’’& 8
.
’’8 9'
GetPatientIdByUserIdAsync
’’9 R
(
’’R S
userId
’’S Y
)
’’Y Z
;
’’Z [
return
÷÷ 
await
÷÷  
_patientRepository
÷÷ /
.
÷÷/ 0,
GetTestDetailsByPatientIdAsync
÷÷0 N
(
÷÷N O
	patientId
÷÷O X
)
÷÷X Y
;
÷÷Y Z
}
◊◊ 
catch
ÿÿ 
(
ÿÿ 
	Exception
ÿÿ 
ex
ÿÿ 
)
ÿÿ  
{
ŸŸ 
throw
⁄⁄ 
new
⁄⁄ 
ServiceException
⁄⁄ *
(
⁄⁄* +
$str
⁄⁄+ ]
,
⁄⁄] ^
ex
⁄⁄_ a
)
⁄⁄a b
;
⁄⁄b c
}
€€ 
}
‹‹ 	
public
ﬁﬁ 
async
ﬁﬁ 
Task
ﬁﬁ 
<
ﬁﬁ 
List
ﬁﬁ 
<
ﬁﬁ *
PatientPrescriptionDetailDto
ﬁﬁ ;
>
ﬁﬁ; <
>
ﬁﬁ< =$
GetPrescriptionDetails
ﬁﬁ> T
(
ﬁﬁT U
int
ﬁﬁU X
userId
ﬁﬁY _
)
ﬁﬁ_ `
{
ﬂﬂ 	
try
‡‡ 
{
·· 
var
‚‚ 
	patientId
‚‚ 
=
‚‚ 
await
‚‚  % 
_patientRepository
‚‚& 8
.
‚‚8 9'
GetPatientIdByUserIdAsync
‚‚9 R
(
‚‚R S
userId
‚‚S Y
)
‚‚Y Z
;
‚‚Z [
return
„„ 
await
„„  
_patientRepository
„„ /
.
„„/ 04
&GetPrescriptionDetailsByPatientIdAsync
„„0 V
(
„„V W
	patientId
„„W `
)
„„` a
;
„„a b
}
‰‰ 
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ 
ex
ÂÂ 
)
ÂÂ  
{
ÊÊ 
throw
ÁÁ 
new
ÁÁ 
ServiceException
ÁÁ *
(
ÁÁ* +
$str
ÁÁ+ e
,
ÁÁe f
ex
ÁÁg i
)
ÁÁi j
;
ÁÁj k
}
ËË 
}
ÈÈ 	
public
ÎÎ 
async
ÎÎ 
Task
ÎÎ 
<
ÎÎ 
List
ÎÎ 
<
ÎÎ 

BillingDto
ÎÎ )
>
ÎÎ) *
>
ÎÎ* +
GetBillingDetails
ÎÎ, =
(
ÎÎ= >
int
ÎÎ> A
userId
ÎÎB H
)
ÎÎH I
{
ÏÏ 	
try
ÌÌ 
{
ÓÓ 
var
ÔÔ 
	patientId
ÔÔ 
=
ÔÔ 
await
ÔÔ  % 
_patientRepository
ÔÔ& 8
.
ÔÔ8 9'
GetPatientIdByUserIdAsync
ÔÔ9 R
(
ÔÔR S
userId
ÔÔS Y
)
ÔÔY Z
;
ÔÔZ [
return
 
await
  
_patientRepository
 /
.
/ 0/
!GetBillingDetailsByPatientIdAsync
0 Q
(
Q R
	patientId
R [
)
[ \
;
\ ]
}
ÒÒ 
catch
ÚÚ 
(
ÚÚ 
	Exception
ÚÚ 
ex
ÚÚ 
)
ÚÚ  
{
ÛÛ 
throw
ÙÙ 
new
ÙÙ 
ServiceException
ÙÙ *
(
ÙÙ* +
$str
ÙÙ+ `
,
ÙÙ` a
ex
ÙÙb d
)
ÙÙd e
;
ÙÙe f
}
ıı 
}
ˆˆ 	
public
¯¯ 
async
¯¯ 
Task
¯¯ 
<
¯¯ 
(
¯¯ 
Appointment
¯¯ &
?
¯¯& '
appointment
¯¯( 3
,
¯¯3 4
string
¯¯5 ;
message
¯¯< C
)
¯¯C D
>
¯¯D E#
RescheduleAppointment
¯¯F [
(
¯¯[ \
int
¯¯\ _
userId
¯¯` f
,
¯¯f g
int
¯¯h k
appointmentId
¯¯l y
,
¯¯y z'
AppointmentRescheduleDto¯¯{ ì
rescheduleDto¯¯î °
)¯¯° ¢
{
˘˘ 	
try
˙˙ 
{
˚˚ 
var
¸¸ 
	patientId
¸¸ 
=
¸¸ 
await
¸¸  % 
_patientRepository
¸¸& 8
.
¸¸8 9'
GetPatientIdByUserIdAsync
¸¸9 R
(
¸¸R S
userId
¸¸S Y
)
¸¸Y Z
;
¸¸Z [
var
˝˝ 
appointment
˝˝ 
=
˝˝  !
await
˝˝" ' 
_patientRepository
˝˝( :
.
˝˝: ;1
#GetAppointmentByIdAndPatientIdAsync
˝˝; ^
(
˝˝^ _
appointmentId
˝˝_ l
,
˝˝l m
	patientId
˝˝n w
)
˝˝w x
??
˛˛  "
throw
˛˛# (
new
˛˛) ,*
AppointmentNotFoundException
˛˛- I
(
˛˛I J
$str
˛˛J y
)
˛˛y z
;
˛˛z {
if
ÄÄ 
(
ÄÄ 
appointment
ÄÄ 
.
ÄÄ  
Status
ÄÄ  &
!=
ÄÄ' )
$str
ÄÄ* 5
&&
ÄÄ6 8
appointment
ÄÄ9 D
.
ÄÄD E
Status
ÄÄE K
!=
ÄÄL N
$str
ÄÄO Z
)
ÄÄZ [
throw
ÅÅ 
new
ÅÅ '
InvalidOperationException
ÅÅ 7
(
ÅÅ7 8
$str
ÅÅ8 v
)
ÅÅv w
;
ÅÅw x
var
ÉÉ 
isOnSchedule
ÉÉ  
=
ÉÉ! "
await
ÉÉ# ( 
_patientRepository
ÉÉ) ;
.
ÉÉ; <%
IsDoctorOnScheduleAsync
ÉÉ< S
(
ÉÉS T
appointment
ÉÉT _
.
ÉÉ_ `
DoctorID
ÉÉ` h
,
ÉÉh i
rescheduleDto
ÉÉj w
.
ÉÉw x!
NewAppointmentDateÉÉx ä
)ÉÉä ã
;ÉÉã å
if
ÑÑ 
(
ÑÑ 
!
ÑÑ 
isOnSchedule
ÑÑ !
)
ÑÑ! "
throw
ÖÖ 
new
ÖÖ '
InvalidOperationException
ÖÖ 7
(
ÖÖ7 8
$str
ÖÖ8 i
)
ÖÖi j
;
ÖÖj k
appointment
áá 
.
áá 
AppointmentDate
áá +
=
áá, -
rescheduleDto
áá. ;
.
áá; < 
NewAppointmentDate
áá< N
;
ááN O
appointment
àà 
.
àà 
Status
àà "
=
àà# $
$str
àà% 0
;
àà0 1
await
ää  
_patientRepository
ää (
.
ää( )$
UpdateAppointmentAsync
ää) ?
(
ää? @
appointment
ää@ K
)
ääK L
;
ääL M
await
ãã  
_patientRepository
ãã (
.
ãã( )
SaveChangesAsync
ãã) 9
(
ãã9 :
)
ãã: ;
;
ãã; <
return
çç 
(
çç 
appointment
çç #
,
çç# $
$str
çç% n
)
ççn o
;
çço p
}
éé 
catch
èè 
(
èè 
	Exception
èè 
ex
èè 
)
èè  
{
êê 
throw
ëë 
new
ëë 
ServiceException
ëë *
(
ëë* +
$str
ëë+ b
,
ëëb c
ex
ëëd f
)
ëëf g
;
ëëg h
}
íí 
}
ìì 	
public
ïï 
async
ïï 
Task
ïï 
<
ïï 
List
ïï 
<
ïï 
ScheduleDto
ïï *
>
ïï* +
>
ïï+ ,$
GetDoctorScheduleAsync
ïï- C
(
ïïC D
int
ïïD G
doctorId
ïïH P
)
ïïP Q
{
ññ 	
try
óó 
{
òò 
var
ôô 
schedule
ôô 
=
ôô 
await
ôô $ 
_patientRepository
ôô% 7
.
ôô7 8$
GetDoctorScheduleAsync
ôô8 N
(
ôôN O
doctorId
ôôO W
)
ôôW X
??
öö  
throw
öö! &
new
öö' *%
DoctorNotFoundException
öö+ B
(
ööB C
$"
ööC E
$str
ööE T
{
ööT U
doctorId
ööU ]
}
öö] ^
$ströö^ Ç
"ööÇ É
)ööÉ Ñ
;ööÑ Ö
return
úú 
schedule
úú 
.
úú  
Select
úú  &
(
úú& '
h
úú' (
=>
úú) +
new
úú, /
ScheduleDto
úú0 ;
{
ùù 

ScheduleID
ûû 
=
ûû  
h
ûû! "
.
ûû" #

ScheduleID
ûû# -
,
ûû- .
DoctorID
üü 
=
üü 
h
üü  
.
üü  !
DoctorID
üü! )
,
üü) *
	StartDate
†† 
=
†† 
h
††  !
.
††! "
	StartDate
††" +
,
††+ ,
EndDate
°° 
=
°° 
h
°° 
.
°°  
EndDate
°°  '
,
°°' (
}
¢¢ 
)
¢¢ 
.
¢¢ 
ToList
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
catch
§§ 
(
§§ 
	Exception
§§ 
ex
§§ 
)
§§  
{
•• 
throw
¶¶ 
new
¶¶ 
ServiceException
¶¶ *
(
¶¶* +
$str
¶¶+ f
,
¶¶f g
ex
¶¶h j
)
¶¶j k
;
¶¶k l
}
ßß 
}
®® 	
public
©© 
async
©© 
Task
©© 
<
©© 
IEnumerable
©© %
<
©©% &&
PatientBillingDetailsDto
©©& >
>
©©> ?
>
©©? @&
GetBillsByPatientIdAsync
©©A Y
(
©©Y Z
int
©©Z ]
userId
©©^ d
)
©©d e
{
™™ 	
try
´´ 
{
¨¨ 
var
≠≠ 
	patientId
≠≠ 
=
≠≠ 
await
≠≠  % 
_patientRepository
≠≠& 8
.
≠≠8 9'
GetPatientIdByUserIdAsync
≠≠9 R
(
≠≠R S
userId
≠≠S Y
)
≠≠Y Z
;
≠≠Z [
var
ØØ 
bills
ØØ 
=
ØØ 
await
ØØ ! 
_patientRepository
ØØ" 4
.
ØØ4 5&
GetBillsByPatientIdAsync
ØØ5 M
(
ØØM N
	patientId
ØØN W
)
ØØW X
;
ØØX Y
if
±± 
(
±± 
bills
±± 
==
±± 
null
±± !
||
±±" $
!
±±% &
bills
±±& +
.
±±+ ,
Any
±±, /
(
±±/ 0
)
±±0 1
)
±±1 2
throw
≤≤ 
new
≤≤ &
BillingNotFoundException
≤≤ 6
(
≤≤6 7
$"
≤≤7 9
$str
≤≤9 a
{
≤≤a b
	patientId
≤≤b k
}
≤≤k l
$str
≤≤l m
"
≤≤m n
)
≤≤n o
;
≤≤o p
return
¥¥ 
bills
¥¥ 
.
¥¥ 
Select
¥¥ #
(
¥¥# $
b
¥¥$ %
=>
¥¥& (
new
¥¥) ,&
PatientBillingDetailsDto
¥¥- E
{
µµ 
	BillingID
∂∂ 
=
∂∂ 
b
∂∂  !
.
∂∂! "
	BillingID
∂∂" +
,
∂∂+ ,
	PatientID
∑∑ 
=
∑∑ 
b
∑∑  !
.
∑∑! "
	PatientID
∑∑" +
,
∑∑+ ,
PatientName
∏∏ 
=
∏∏  !
b
∏∏" #
.
∏∏# $
Patient
∏∏$ +
.
∏∏+ ,
FullName
∏∏, 4
,
∏∏4 5
DoctorID
ππ 
=
ππ 
b
ππ  
.
ππ  !
Doctor
ππ! '
.
ππ' (
DoctorID
ππ( 0
,
ππ0 1

DoctorName
∫∫ 
=
∫∫  
b
∫∫! "
.
∫∫" #
Doctor
∫∫# )
.
∫∫) *
FullName
∫∫* 2
,
∫∫2 3
ConsultationFee
ªª #
=
ªª$ %
b
ªª& '
.
ªª' (
ConsultationFee
ªª( 7
,
ªª7 8
TotalTestsPrice
ºº #
=
ºº$ %
b
ºº& '
.
ºº' (
TotalTestsPrice
ºº( 7
,
ºº7 8#
TotalMedicationsPrice
ΩΩ )
=
ΩΩ* +
b
ΩΩ, -
.
ΩΩ- .#
TotalMedicationsPrice
ΩΩ. C
,
ΩΩC D

GrandTotal
ææ 
=
ææ  
b
ææ! "
.
ææ" #

GrandTotal
ææ# -
,
ææ- .
Status
øø 
=
øø 
b
øø 
.
øø 
Status
øø %
}
¿¿ 
)
¿¿ 
.
¿¿ 
ToList
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
}
¡¡ 
catch
¬¬ 
(
¬¬ 
	Exception
¬¬ 
ex
¬¬ 
)
¬¬  
{
√√ 
throw
ƒƒ 
new
ƒƒ 
ServiceException
ƒƒ *
(
ƒƒ* +
$str
ƒƒ+ p
,
ƒƒp q
ex
ƒƒr t
)
ƒƒt u
;
ƒƒu v
}
≈≈ 
}
∆∆ 	
}
»» 
}…… ú 
[C:\Users\suyas\OneDrive\Desktop\Backup Projects\AmazeCareAPI (Test)\Services\UserService.cs
	namespace		 	
AmazeCareAPI		
 
.		 
Services		 
{

 
public 

class 
UserService 
: 
IUserService +
{ 
private 
readonly 
IUserRepository (
_userRepository) 8
;8 9
public 
UserService 
( 
IUserRepository *
userRepository+ 9
)9 :
{ 	
_userRepository 
= 
userRepository ,
;, -
} 	
public 
async 
Task 
< 
( 
bool 
IsAvailable  +
,+ ,
string- 3
Message4 ;
); <
>< =*
CheckUsernameAvailabilityAsync> \
(\ ]
string] c
usernamed l
)l m
{ 	
try 
{ 
bool 
isAvailable  
=! "
await# (
_userRepository) 8
.8 9$
IsUsernameAvailableAsync9 Q
(Q R
usernameR Z
)Z [
;[ \
string 
message 
=  
isAvailable! ,
? 
$str .
: 
$str V
;V W
return 
( 
isAvailable #
,# $
message% ,
), -
;- .
} 
catch 
( 
	Exception 
ex 
)  
{   
throw!! 
new!! 
ServiceException!! *
(!!* +
$str!!+ R
,!!R S
ex!!T V
)!!V W
;!!W X
}"" 
}## 	
public$$ 
async$$ 
Task$$ 
<$$ 
Patient$$ !
>$$! "
RegisterPatient$$# 2
($$2 3
User$$3 7
user$$8 <
,$$< =
string$$> D
fullName$$E M
,$$M N
string$$O U
email$$V [
,$$[ \
DateTime$$] e
dateOfBirth$$f q
,$$q r
string%% 
gender%% 
,%% 
string%% !
contactNumber%%" /
,%%/ 0
string%%1 7
address%%8 ?
,%%? @
string%%A G
medicalHistory%%H V
)%%V W
{&& 	
try'' 
{(( 
user)) 
.)) 
RoleID)) 
=)) 
$num)) 
;))  
var** 
createdUser** 
=**  !
await**" '
_userRepository**( 7
.**7 8
AddUserAsync**8 D
(**D E
user**E I
)**I J
;**J K
var,, 
patient,, 
=,, 
new,, !
Patient,," )
{-- 
UserID.. 
=.. 
createdUser.. (
...( )
UserID..) /
,../ 0
FullName// 
=// 
fullName// '
,//' (
Email00 
=00 
email00 !
,00! "
DateOfBirth11 
=11  !
dateOfBirth11" -
,11- .
Gender22 
=22 
gender22 #
,22# $
ContactNumber33 !
=33" #
contactNumber33$ 1
,331 2
Address44 
=44 
address44 %
,44% &
MedicalHistory55 "
=55# $
medicalHistory55% 3
}66 
;66 
return88 
await88 
_userRepository88 ,
.88, -
AddPatientAsync88- <
(88< =
patient88= D
)88D E
;88E F
}99 
catch:: 
(:: 
	Exception:: 
ex:: 
)::  
{;; 
throw<< 
new<< 
ServiceException<< *
(<<* +
$str<<+ G
,<<G H
ex<<I K
)<<K L
;<<L M
}== 
}>> 	
}?? 
}@@ 