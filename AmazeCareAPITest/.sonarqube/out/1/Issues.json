{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Microsoft (R) Visual C# Compiler",
        "version": "4.11.0.0",
        "fileVersion": "4.11.0-3.24365.8 (9e9c7c1d)",
        "semanticVersion": "4.11.0",
        "language": "en-US"
      },
      "results": [
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 61,
                  "startColumn": 31,
                  "endLine": 61,
                  "endColumn": 64
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IAdminRepository, Task<IEnumerable<DoctorSchedule>>>' cannot be used for parameter 'mock' of type 'IReturns<IAdminRepository, Task<IEnumerable<DoctorSchedule>?>>' in 'IReturnsResult<IAdminRepository> ReturnsExtensions.ReturnsAsync<IAdminRepository, IEnumerable<DoctorSchedule>?>(IReturns<IAdminRepository, Task<IEnumerable<DoctorSchedule>?>> mock, IEnumerable<DoctorSchedule>? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 60,
                  "startColumn": 13,
                  "endLine": 60,
                  "endColumn": 98
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 66,
                  "startColumn": 25,
                  "endLine": 66,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 50,
                  "startColumn": 86,
                  "endLine": 50,
                  "endColumn": 102
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "Cannot convert null literal to non-nullable reference type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 50,
                  "startColumn": 86,
                  "endLine": 50,
                  "endColumn": 102
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 55,
                  "startColumn": 25,
                  "endLine": 55,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 56,
                  "startColumn": 25,
                  "endLine": 56,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 48,
                  "startColumn": 27,
                  "endLine": 48,
                  "endColumn": 87
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminBillingServiceTests.cs",
                "region": {
                  "startLine": 71,
                  "startColumn": 25,
                  "endLine": 71,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminBillingServiceTests.cs",
                "region": {
                  "startLine": 73,
                  "startColumn": 25,
                  "endLine": 73,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminBillingServiceTests.cs",
                "region": {
                  "startLine": 62,
                  "startColumn": 27,
                  "endLine": 62,
                  "endColumn": 105
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockAdminRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminAppointmentServiceTests.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 60
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminAppointmentServiceTests.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 60
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_adminService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminAppointmentServiceTests.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 30,
                  "endLine": 16,
                  "endColumn": 43
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminAppointmentServiceTests.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 30,
                  "endLine": 16,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/UserServiceTests.cs",
                "region": {
                  "startLine": 63,
                  "startColumn": 25,
                  "endLine": 63,
                  "endColumn": 27
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockAdminRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminBillingServiceTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 40,
                  "endLine": 17,
                  "endColumn": 60
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminBillingServiceTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 40,
                  "endLine": 17,
                  "endColumn": 60
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_adminService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminBillingServiceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 30,
                  "endLine": 18,
                  "endColumn": 43
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminBillingServiceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 30,
                  "endLine": 18,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AuthenticationServiceTests.cs",
                "region": {
                  "startLine": 83,
                  "startColumn": 31,
                  "endLine": 83,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IUserRepository, Task<User>>' cannot be used for parameter 'mock' of type 'IReturns<IUserRepository, Task<User?>>' in 'IReturnsResult<IUserRepository> ReturnsExtensions.ReturnsAsync<IUserRepository, User?>(IReturns<IUserRepository, Task<User?>> mock, User? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AuthenticationServiceTests.cs",
                "region": {
                  "startLine": 82,
                  "startColumn": 13,
                  "endLine": 82,
                  "endColumn": 83
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AuthenticationServiceTests.cs",
                "region": {
                  "startLine": 88,
                  "startColumn": 25,
                  "endLine": 88,
                  "endColumn": 27
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockAdminRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 40,
                  "endLine": 17,
                  "endColumn": 60
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 40,
                  "endLine": 17,
                  "endColumn": 60
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_adminService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 30,
                  "endLine": 18,
                  "endColumn": 43
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 30,
                  "endLine": 18,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AuthenticationServiceTests.cs",
                "region": {
                  "startLine": 111,
                  "startColumn": 25,
                  "endLine": 111,
                  "endColumn": 27
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/UserServiceTests.cs",
                "region": {
                  "startLine": 107,
                  "startColumn": 25,
                  "endLine": 107,
                  "endColumn": 27
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockUserRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/UserServiceTests.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 39,
                  "endLine": 16,
                  "endColumn": 58
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/UserServiceTests.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 39,
                  "endLine": 16,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_userService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/UserServiceTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 29,
                  "endLine": 17,
                  "endColumn": 41
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/UserServiceTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 29,
                  "endLine": 17,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 144,
                  "startColumn": 25,
                  "endLine": 144,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 145,
                  "startColumn": 25,
                  "endLine": 145,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 125,
                  "startColumn": 27,
                  "endLine": 125,
                  "endColumn": 109
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AuthenticationServiceTests.cs",
                "region": {
                  "startLine": 126,
                  "startColumn": 25,
                  "endLine": 126,
                  "endColumn": 27
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockUserRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AuthenticationServiceTests.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 39,
                  "endLine": 20,
                  "endColumn": 58
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AuthenticationServiceTests.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 39,
                  "endLine": 20,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockConfiguration' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AuthenticationServiceTests.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 38,
                  "endLine": 21,
                  "endColumn": 56
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AuthenticationServiceTests.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 38,
                  "endLine": 21,
                  "endColumn": 56
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_authenticationService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AuthenticationServiceTests.cs",
                "region": {
                  "startLine": 22,
                  "startColumn": 39,
                  "endLine": 22,
                  "endColumn": 61
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AuthenticationServiceTests.cs",
                "region": {
                  "startLine": 22,
                  "startColumn": 39,
                  "endLine": 22,
                  "endColumn": 61
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 58,
                  "startColumn": 25,
                  "endLine": 58,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 48,
                  "startColumn": 27,
                  "endLine": 48,
                  "endColumn": 112
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 77,
                  "startColumn": 31,
                  "endLine": 77,
                  "endColumn": 50
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IDoctorRepository, Task<MedicalRecord>>' cannot be used for parameter 'mock' of type 'IReturns<IDoctorRepository, Task<MedicalRecord?>>' in 'IReturnsResult<IDoctorRepository> ReturnsExtensions.ReturnsAsync<IDoctorRepository, MedicalRecord?>(IReturns<IDoctorRepository, Task<MedicalRecord?>> mock, MedicalRecord? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 76,
                  "startColumn": 13,
                  "endLine": 76,
                  "endColumn": 107
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 167,
                  "startColumn": 25,
                  "endLine": 167,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 168,
                  "startColumn": 25,
                  "endLine": 168,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 149,
                  "startColumn": 27,
                  "endLine": 149,
                  "endColumn": 111
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 49,
                  "startColumn": 25,
                  "endLine": 49,
                  "endColumn": 31
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 56,
                  "startColumn": 25,
                  "endLine": 56,
                  "endColumn": 31
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 96,
                  "startColumn": 89,
                  "endLine": 96,
                  "endColumn": 98
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 86,
                  "startColumn": 27,
                  "endLine": 86,
                  "endColumn": 100
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockAdminRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 40,
                  "endLine": 17,
                  "endColumn": 60
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 40,
                  "endLine": 17,
                  "endColumn": 60
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_adminService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 30,
                  "endLine": 18,
                  "endColumn": 43
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 30,
                  "endLine": 18,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 84,
                  "startColumn": 31,
                  "endLine": 84,
                  "endColumn": 44
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 88,
                  "startColumn": 25,
                  "endLine": 88,
                  "endColumn": 27
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 91,
                  "startColumn": 25,
                  "endLine": 91,
                  "endColumn": 32
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 79,
                  "startColumn": 27,
                  "endLine": 79,
                  "endColumn": 104
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 94,
                  "startColumn": 31,
                  "endLine": 94,
                  "endColumn": 48
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 144,
                  "startColumn": 80,
                  "endLine": 144,
                  "endColumn": 89
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 136,
                  "startColumn": 27,
                  "endLine": 136,
                  "endColumn": 88
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 118,
                  "startColumn": 25,
                  "endLine": 118,
                  "endColumn": 27
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 119,
                  "startColumn": 25,
                  "endLine": 119,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 94,
                  "startColumn": 27,
                  "endLine": 94,
                  "endColumn": 97
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 182,
                  "startColumn": 31,
                  "endLine": 182,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IAdminRepository, Task<Doctor>>' cannot be used for parameter 'mock' of type 'IReturns<IAdminRepository, Task<Doctor?>>' in 'IReturnsResult<IAdminRepository> ReturnsExtensions.ReturnsAsync<IAdminRepository, Doctor?>(IReturns<IAdminRepository, Task<Doctor?>> mock, Doctor? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 181,
                  "startColumn": 13,
                  "endLine": 181,
                  "endColumn": 97
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 151,
                  "startColumn": 25,
                  "endLine": 151,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 138,
                  "startColumn": 27,
                  "endLine": 138,
                  "endColumn": 93
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockDoctorRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorScheduleTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 41,
                  "endLine": 17,
                  "endColumn": 62
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorScheduleTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 41,
                  "endLine": 17,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_doctorService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorScheduleTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 31,
                  "endLine": 18,
                  "endColumn": 45
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorScheduleTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 31,
                  "endLine": 18,
                  "endColumn": 45
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 150,
                  "startColumn": 31,
                  "endLine": 150,
                  "endColumn": 44
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 153,
                  "startColumn": 25,
                  "endLine": 153,
                  "endColumn": 27
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 155,
                  "startColumn": 25,
                  "endLine": 155,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 146,
                  "startColumn": 27,
                  "endLine": 146,
                  "endColumn": 102
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 193,
                  "startColumn": 89,
                  "endLine": 193,
                  "endColumn": 98
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 176,
                  "startColumn": 27,
                  "endLine": 176,
                  "endColumn": 101
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockPatientRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 42,
                  "endLine": 18,
                  "endColumn": 64
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 42,
                  "endLine": 18,
                  "endColumn": 64
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_patientService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 32,
                  "endLine": 19,
                  "endColumn": 47
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 32,
                  "endLine": 19,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 135,
                  "startColumn": 31,
                  "endLine": 135,
                  "endColumn": 48
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IDoctorRepository, Task<Appointment>>' cannot be used for parameter 'mock' of type 'IReturns<IDoctorRepository, Task<Appointment?>>' in 'IReturnsResult<IDoctorRepository> ReturnsExtensions.ReturnsAsync<IDoctorRepository, Appointment?>(IReturns<IDoctorRepository, Task<Appointment?>> mock, Appointment? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 134,
                  "startColumn": 13,
                  "endLine": 134,
                  "endColumn": 108
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorServiceTests.cs",
                "region": {
                  "startLine": 112,
                  "startColumn": 31,
                  "endLine": 112,
                  "endColumn": 48
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IDoctorRepository, Task<Appointment>>' cannot be used for parameter 'mock' of type 'IReturns<IDoctorRepository, Task<Appointment?>>' in 'IReturnsResult<IDoctorRepository> ReturnsExtensions.ReturnsAsync<IDoctorRepository, Appointment?>(IReturns<IDoctorRepository, Task<Appointment?>> mock, Appointment? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorServiceTests.cs",
                "region": {
                  "startLine": 111,
                  "startColumn": 13,
                  "endLine": 111,
                  "endColumn": 108
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockAdminRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 40,
                  "endLine": 18,
                  "endColumn": 60
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 40,
                  "endLine": 18,
                  "endColumn": 60
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_adminService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 30,
                  "endLine": 19,
                  "endColumn": 43
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 30,
                  "endLine": 19,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 194,
                  "startColumn": 25,
                  "endLine": 194,
                  "endColumn": 27
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 197,
                  "startColumn": 25,
                  "endLine": 197,
                  "endColumn": 32
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 180,
                  "startColumn": 27,
                  "endLine": 180,
                  "endColumn": 112
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 225,
                  "startColumn": 80,
                  "endLine": 225,
                  "endColumn": 89
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 218,
                  "startColumn": 27,
                  "endLine": 218,
                  "endColumn": 78
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorServiceTests.cs",
                "region": {
                  "startLine": 149,
                  "startColumn": 25,
                  "endLine": 149,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorServiceTests.cs",
                "region": {
                  "startLine": 137,
                  "startColumn": 27,
                  "endLine": 137,
                  "endColumn": 108
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockDoctorRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorServiceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 41,
                  "endLine": 18,
                  "endColumn": 62
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorServiceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 41,
                  "endLine": 18,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_doctorService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorServiceTests.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 31,
                  "endLine": 19,
                  "endColumn": 45
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorServiceTests.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 31,
                  "endLine": 19,
                  "endColumn": 45
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 218,
                  "startColumn": 25,
                  "endLine": 218,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 292,
                  "startColumn": 31,
                  "endLine": 292,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IAdminRepository, Task<Doctor>>' cannot be used for parameter 'mock' of type 'IReturns<IAdminRepository, Task<Doctor?>>' in 'IReturnsResult<IAdminRepository> ReturnsExtensions.ReturnsAsync<IAdminRepository, Doctor?>(IReturns<IAdminRepository, Task<Doctor?>> mock, Doctor? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 291,
                  "startColumn": 13,
                  "endLine": 291,
                  "endColumn": 82
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockAdminRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 40,
                  "endLine": 18,
                  "endColumn": 60
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 40,
                  "endLine": 18,
                  "endColumn": 60
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_adminService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 30,
                  "endLine": 19,
                  "endColumn": 43
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 30,
                  "endLine": 19,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 257,
                  "startColumn": 86,
                  "endLine": 257,
                  "endColumn": 95
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 250,
                  "startColumn": 27,
                  "endLine": 250,
                  "endColumn": 90
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 187,
                  "startColumn": 31,
                  "endLine": 187,
                  "endColumn": 48
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IDoctorRepository, Task<Appointment>>' cannot be used for parameter 'mock' of type 'IReturns<IDoctorRepository, Task<Appointment?>>' in 'IReturnsResult<IDoctorRepository> ReturnsExtensions.ReturnsAsync<IDoctorRepository, Appointment?>(IReturns<IDoctorRepository, Task<Appointment?>> mock, Appointment? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 186,
                  "startColumn": 13,
                  "endLine": 186,
                  "endColumn": 114
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockDoctorRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 41,
                  "endLine": 17,
                  "endColumn": 62
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 41,
                  "endLine": 17,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_doctorService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 31,
                  "endLine": 18,
                  "endColumn": 45
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 31,
                  "endLine": 18,
                  "endColumn": 45
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 241,
                  "startColumn": 25,
                  "endLine": 241,
                  "endColumn": 27
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 226,
                  "startColumn": 27,
                  "endLine": 226,
                  "endColumn": 99
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockPatientRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 13,
                  "startColumn": 42,
                  "endLine": 13,
                  "endColumn": 64
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 13,
                  "startColumn": 42,
                  "endLine": 13,
                  "endColumn": 64
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_patientService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 32,
                  "endLine": 14,
                  "endColumn": 47
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 32,
                  "endLine": 14,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "Cannot convert null literal to non-nullable reference type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 214,
                  "startColumn": 62,
                  "endLine": 214,
                  "endColumn": 66
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockPatientRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 42,
                  "endLine": 17,
                  "endColumn": 64
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 42,
                  "endLine": 17,
                  "endColumn": 64
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_patientService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 32,
                  "endLine": 18,
                  "endColumn": 47
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 32,
                  "endLine": 18,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockDoctorRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 41,
                  "endLine": 16,
                  "endColumn": 62
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 41,
                  "endLine": 16,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_doctorService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 31,
                  "endLine": 17,
                  "endColumn": 45
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 31,
                  "endLine": 17,
                  "endColumn": 45
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/UserServiceTests.cs",
                "region": {
                  "startLine": 35,
                  "startColumn": 13,
                  "endLine": 35,
                  "endColumn": 53
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 50,
                  "startColumn": 13,
                  "endLine": 50,
                  "endColumn": 65
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 13,
                  "endLine": 51,
                  "endColumn": 65
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 13,
                  "endLine": 52,
                  "endColumn": 83
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 53,
                  "startColumn": 13,
                  "endLine": 53,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 54,
                  "startColumn": 13,
                  "endLine": 54,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 55,
                  "startColumn": 13,
                  "endLine": 55,
                  "endColumn": 73
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 56,
                  "startColumn": 13,
                  "endLine": 56,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 50,
                  "startColumn": 13,
                  "endLine": 50,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 13,
                  "endLine": 51,
                  "endColumn": 79
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 13,
                  "endLine": 52,
                  "endColumn": 66
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 66,
                  "startColumn": 13,
                  "endLine": 66,
                  "endColumn": 124
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminAppointmentServiceTests.cs",
                "region": {
                  "startLine": 46,
                  "startColumn": 13,
                  "endLine": 46,
                  "endColumn": 73
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminBillingServiceTests.cs",
                "region": {
                  "startLine": 54,
                  "startColumn": 13,
                  "endLine": 54,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminBillingServiceTests.cs",
                "region": {
                  "startLine": 55,
                  "startColumn": 13,
                  "endLine": 55,
                  "endColumn": 76
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminBillingServiceTests.cs",
                "region": {
                  "startLine": 56,
                  "startColumn": 13,
                  "endLine": 56,
                  "endColumn": 76
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 42,
                  "startColumn": 13,
                  "endLine": 42,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 43,
                  "startColumn": 13,
                  "endLine": 43,
                  "endColumn": 71
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminBillingServiceTests.cs",
                "region": {
                  "startLine": 71,
                  "startColumn": 13,
                  "endLine": 71,
                  "endColumn": 110
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/UserServiceTests.cs",
                "region": {
                  "startLine": 49,
                  "startColumn": 13,
                  "endLine": 49,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 91,
                  "startColumn": 13,
                  "endLine": 91,
                  "endColumn": 74
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 92,
                  "startColumn": 13,
                  "endLine": 92,
                  "endColumn": 68
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 93,
                  "startColumn": 13,
                  "endLine": 93,
                  "endColumn": 84
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 94,
                  "startColumn": 13,
                  "endLine": 94,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminBillingServiceTests.cs",
                "region": {
                  "startLine": 93,
                  "startColumn": 13,
                  "endLine": 93,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2046",
          "level": "note",
          "message": "Use Assert.That(<collection>, Has.Count.EqualTo(<value>)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 43,
                  "startColumn": 25,
                  "endLine": 43,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 94,
                  "startColumn": 13,
                  "endLine": 94,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 95,
                  "startColumn": 13,
                  "endLine": 95,
                  "endColumn": 77
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 96,
                  "startColumn": 13,
                  "endLine": 96,
                  "endColumn": 73
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AuthenticationServiceTests.cs",
                "region": {
                  "startLine": 70,
                  "startColumn": 13,
                  "endLine": 70,
                  "endColumn": 67
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 68,
                  "startColumn": 13,
                  "endLine": 68,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 69,
                  "startColumn": 13,
                  "endLine": 69,
                  "endColumn": 63
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/UserServiceTests.cs",
                "region": {
                  "startLine": 90,
                  "startColumn": 13,
                  "endLine": 90,
                  "endColumn": 67
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 119,
                  "startColumn": 13,
                  "endLine": 119,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 129,
                  "startColumn": 13,
                  "endLine": 129,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 130,
                  "startColumn": 13,
                  "endLine": 130,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminPatientServiceTests.cs",
                "region": {
                  "startLine": 131,
                  "startColumn": 13,
                  "endLine": 131,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 114,
                  "startColumn": 13,
                  "endLine": 114,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 115,
                  "startColumn": 13,
                  "endLine": 115,
                  "endColumn": 78
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 56,
                  "startColumn": 13,
                  "endLine": 56,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 57,
                  "startColumn": 13,
                  "endLine": 57,
                  "endColumn": 65
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 60,
                  "startColumn": 13,
                  "endLine": 60,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 61,
                  "startColumn": 13,
                  "endLine": 61,
                  "endColumn": 81
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 62,
                  "startColumn": 13,
                  "endLine": 62,
                  "endColumn": 95
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 63,
                  "startColumn": 13,
                  "endLine": 63,
                  "endColumn": 82
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 82,
                  "startColumn": 13,
                  "endLine": 82,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 49,
                  "startColumn": 13,
                  "endLine": 49,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 50,
                  "startColumn": 13,
                  "endLine": 50,
                  "endColumn": 68
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 13,
                  "endLine": 51,
                  "endColumn": 71
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 13,
                  "endLine": 52,
                  "endColumn": 65
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 53,
                  "startColumn": 13,
                  "endLine": 53,
                  "endColumn": 77
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 54,
                  "startColumn": 13,
                  "endLine": 54,
                  "endColumn": 67
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 55,
                  "startColumn": 13,
                  "endLine": 55,
                  "endColumn": 81
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 56,
                  "startColumn": 13,
                  "endLine": 56,
                  "endColumn": 69
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 88,
                  "startColumn": 13,
                  "endLine": 88,
                  "endColumn": 69
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminDoctorScheduleServiceTests.cs",
                "region": {
                  "startLine": 189,
                  "startColumn": 13,
                  "endLine": 189,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 73,
                  "startColumn": 13,
                  "endLine": 73,
                  "endColumn": 76
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 74,
                  "startColumn": 13,
                  "endLine": 74,
                  "endColumn": 65
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2046",
          "level": "note",
          "message": "Use Assert.That(<collection>, Has.Count.EqualTo(<value>)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 72,
                  "startColumn": 25,
                  "endLine": 72,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 124,
                  "startColumn": 13,
                  "endLine": 124,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 125,
                  "startColumn": 13,
                  "endLine": 125,
                  "endColumn": 73
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 70
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2046",
          "level": "note",
          "message": "Use Assert.That(<collection>, Has.Count.EqualTo(<value>)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 112,
                  "startColumn": 25,
                  "endLine": 112,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminInventoryServicesTests.cs",
                "region": {
                  "startLine": 151,
                  "startColumn": 13,
                  "endLine": 151,
                  "endColumn": 107
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 129,
                  "startColumn": 13,
                  "endLine": 129,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 130,
                  "startColumn": 13,
                  "endLine": 130,
                  "endColumn": 69
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 163,
                  "startColumn": 13,
                  "endLine": 163,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 164,
                  "startColumn": 13,
                  "endLine": 164,
                  "endColumn": 73
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 165,
                  "startColumn": 13,
                  "endLine": 165,
                  "endColumn": 67
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 166,
                  "startColumn": 13,
                  "endLine": 166,
                  "endColumn": 87
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 167,
                  "startColumn": 13,
                  "endLine": 167,
                  "endColumn": 83
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 152,
                  "startColumn": 13,
                  "endLine": 152,
                  "endColumn": 77
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2046",
          "level": "note",
          "message": "Use Assert.That(<collection>, Has.Count.EqualTo(<value>)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 151,
                  "startColumn": 25,
                  "endLine": 151,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 153,
                  "startColumn": 13,
                  "endLine": 153,
                  "endColumn": 100
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 170,
                  "startColumn": 13,
                  "endLine": 170,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 123,
                  "startColumn": 13,
                  "endLine": 123,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2046",
          "level": "note",
          "message": "Use Assert.That(<collection>, Has.Count.EqualTo(<value>)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 141,
                  "startColumn": 25,
                  "endLine": 141,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 218,
                  "startColumn": 13,
                  "endLine": 218,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 173,
                  "startColumn": 13,
                  "endLine": 173,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 219,
                  "startColumn": 13,
                  "endLine": 219,
                  "endColumn": 48
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 220,
                  "startColumn": 13,
                  "endLine": 220,
                  "endColumn": 68
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 221,
                  "startColumn": 13,
                  "endLine": 221,
                  "endColumn": 81
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2046",
          "level": "note",
          "message": "Use Assert.That(<collection>, Has.Count.EqualTo(<value>)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 212,
                  "startColumn": 25,
                  "endLine": 212,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 191,
                  "startColumn": 13,
                  "endLine": 191,
                  "endColumn": 60
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 192,
                  "startColumn": 13,
                  "endLine": 192,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 193,
                  "startColumn": 13,
                  "endLine": 193,
                  "endColumn": 71
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 194,
                  "startColumn": 13,
                  "endLine": 194,
                  "endColumn": 77
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 195,
                  "startColumn": 13,
                  "endLine": 195,
                  "endColumn": 67
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 196,
                  "startColumn": 13,
                  "endLine": 196,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 198,
                  "startColumn": 13,
                  "endLine": 198,
                  "endColumn": 60
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 199,
                  "startColumn": 13,
                  "endLine": 199,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 200,
                  "startColumn": 13,
                  "endLine": 200,
                  "endColumn": 71
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 201,
                  "startColumn": 13,
                  "endLine": 201,
                  "endColumn": 77
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 202,
                  "startColumn": 13,
                  "endLine": 202,
                  "endColumn": 67
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2046",
          "level": "note",
          "message": "Use Assert.That(<collection>, Has.Count.EqualTo(<value>)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientMedicalRecordTests.cs",
                "region": {
                  "startLine": 190,
                  "startColumn": 25,
                  "endLine": 190,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 99,
                  "startColumn": 13,
                  "endLine": 99,
                  "endColumn": 51
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 100,
                  "startColumn": 13,
                  "endLine": 100,
                  "endColumn": 98
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 104,
                  "startColumn": 13,
                  "endLine": 104,
                  "endColumn": 50
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 106,
                  "startColumn": 13,
                  "endLine": 106,
                  "endColumn": 74
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 107,
                  "startColumn": 13,
                  "endLine": 107,
                  "endColumn": 68
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 108,
                  "startColumn": 13,
                  "endLine": 108,
                  "endColumn": 84
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 109,
                  "startColumn": 13,
                  "endLine": 109,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 110,
                  "startColumn": 13,
                  "endLine": 110,
                  "endColumn": 86
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 111,
                  "startColumn": 13,
                  "endLine": 111,
                  "endColumn": 80
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2046",
          "level": "note",
          "message": "Use Assert.That(<collection>, Has.Count.EqualTo(<value>)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorMedicalRecordServiceTests.cs",
                "region": {
                  "startLine": 244,
                  "startColumn": 25,
                  "endLine": 244,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 171,
                  "startColumn": 13,
                  "endLine": 171,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 191,
                  "startColumn": 13,
                  "endLine": 191,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 251,
                  "startColumn": 13,
                  "endLine": 251,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 278,
                  "startColumn": 13,
                  "endLine": 278,
                  "endColumn": 63
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 279,
                  "startColumn": 13,
                  "endLine": 279,
                  "endColumn": 69
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 280,
                  "startColumn": 13,
                  "endLine": 280,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 281,
                  "startColumn": 13,
                  "endLine": 281,
                  "endColumn": 64
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/AdminServciceTests.cs",
                "region": {
                  "startLine": 282,
                  "startColumn": 13,
                  "endLine": 282,
                  "endColumn": 66
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 141,
                  "startColumn": 13,
                  "endLine": 141,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 218,
                  "startColumn": 13,
                  "endLine": 218,
                  "endColumn": 80
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientAppointmentServiceTests.cs",
                "region": {
                  "startLine": 219,
                  "startColumn": 13,
                  "endLine": 219,
                  "endColumn": 110
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 218,
                  "startColumn": 13,
                  "endLine": 218,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 217,
                  "startColumn": 13,
                  "endLine": 217,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/DoctorAppointmentsTests.cs",
                "region": {
                  "startLine": 248,
                  "startColumn": 13,
                  "endLine": 248,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 179,
                  "startColumn": 13,
                  "endLine": 179,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/suyas/OneDrive/Desktop/AmazaCare/AmazaCareBackendApi/AmazeCareAPITest/PatientServiceTests.cs",
                "region": {
                  "startLine": 180,
                  "startColumn": 13,
                  "endLine": 180,
                  "endColumn": 77
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        }
      ],
      "rules": {
        "CS1998": {
          "id": "CS1998",
          "shortDescription": "Async method lacks 'await' operators and will run synchronously",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS1998)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8600": {
          "id": "CS8600",
          "shortDescription": "Converting null literal or possible null value to non-nullable type.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8600)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8602": {
          "id": "CS8602",
          "shortDescription": "Dereference of a possibly null reference.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8602)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8618": {
          "id": "CS8618",
          "shortDescription": "Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8618)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8620": {
          "id": "CS8620",
          "shortDescription": "Argument cannot be used for parameter due to differences in the nullability of reference types.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8620)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8625": {
          "id": "CS8625",
          "shortDescription": "Cannot convert null literal to non-nullable reference type.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8625)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "NUnit2045": {
          "id": "NUnit2045",
          "shortDescription": "Use Assert.Multiple",
          "fullDescription": "Hosting Asserts inside an Assert.Multiple allows detecting more than one failure.",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2045.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2046": {
          "id": "NUnit2046",
          "shortDescription": "Use CollectionConstraint for better assertion messages in case of failure",
          "fullDescription": "Use Has.Length/Has.Count/Is.Empty instead of testing property directly.",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2046.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        }
      }
    }
  ]
}